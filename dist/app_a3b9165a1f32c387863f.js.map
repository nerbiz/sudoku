{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/Utilities/Visitor.js","webpack:///./assets/js/InputMode.js","webpack:///./assets/js/functions.js","webpack:///./assets/js/Traits/HasGridCells.js","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/EventHandlers/GridCellEventHandler.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/Commands/Command.js","webpack:///./assets/js/Commands/UndoableCommand.js","webpack:///./assets/js/Commands/Grid/ChangeDigitCommand.js","webpack:///./assets/js/Commands/TogglableCommand.js","webpack:///./assets/js/Commands/Modal/CloseAllModalsCommand.js","webpack:///./assets/js/Modal.js","webpack:///./assets/js/Commands/Modal/OpenModalCommand.js","webpack:///./assets/js/Commands/PauseGameCommand.js","webpack:///./assets/js/Commands/Settings/ShowClockCommand.js","webpack:///./assets/js/Commands/Settings/AutoErrorCheckingCommand.js","webpack:///./assets/js/Commands/Settings/HighlightRowCommand.js","webpack:///./assets/js/Commands/Settings/HighlightColumnCommand.js","webpack:///./assets/js/Commands/Settings/HighlightBoxCommand.js","webpack:///./assets/js/Commands/Settings/HighlightValueCommand.js","webpack:///./assets/js/Commands/Settings/HighlightPencilMarksCommand.js","webpack:///./assets/js/Commands/AutoCandidateModeCommand.js","webpack:///./assets/js/app.js","webpack:///./assets/js/Settings.js","webpack:///./assets/js/Commands/CommandHistory.js","webpack:///./assets/js/Meta.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/Grid/GridCellHighlighter.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Clock.js","webpack:///./assets/js/EventHandlers/DocumentEventHandler.js","webpack:///./assets/js/EventHandlers/SettingsEventHandler.js","webpack:///./assets/js/EventHandlers/ActionsEventHandler.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visitor","InputMode","self","this","_mode","MODE_VALUE","_radioButtons","document","getElementsByName","init","_selectCurrentRadioButton","_registerEventListeners","forEach","radioButton","parseInt","getMode","checked","addEventListener","setMode","event","code","changeMode","MODE_CORNER","Sudoku","settings","autoCandidateState","MODE_CENTER","toLowerCase","Error","extend","constructor","baseConstructor","trait","instance","traitConstructor","thing","traitInstance","HasGridCells","gridCells","addCell","cell","push","getCells","getCell","number","find","getCellNumber","undefined","getCellValues","map","getValue","filter","checkDuplicateCellValues","cellValues","cellValue","cells","length","setErrorState","containsValue","hasValue","GridRow","rowNumber","_rowNumber","getCellNumbers","numbers","rowIndex","GridColumn","columnNumber","_columnNumber","j","GridBox","boxNumber","_boxNumber","boxIndex","topLeftNumber","Math","floor","GridCellEventHandler","gridCell","_gridCell","register","_registerMouseDownEvent","_registerMouseEnterEvent","_registerMouseUpEvent","getElement","controls","ctrlKeyIsPressed","setSelectedState","isSelected","grid","deselectAllCells","mouseIsPressed","setLastNavigatedCell","GridCell","cellNumber","_cellNumber","_element","_gridRow","_gridColumn","_gridBox","_value","_cornerMarks","_centerMarks","_autoCandidates","_isSelected","_isHighlighted","getElementById","isPrefilled","getColorNumber","setDigit","digit","inputMode","setValue","setCornerMark","setCenterMark","setCornerMarks","setCenterMarks","_showMarks","getElementsByClassName","innerText","gridCellHighlighter","highlightRelatedCells","determineCandidates","getCornerMarks","cornerMarks","existingIndex","indexOf","splice","MAX_CORNER_MARKS","fillCornerMarks","allElements","sort","a","b","item","index","toString","hasCornerMark","getCenterMarks","getAutoCandidates","centerMarks","MAX_CENTER_MARKS","asAutoCandidate","fillCenterMarks","join","hasCenterMark","show","toggleMethod","classList","selected","addSelectedCell","isHighlighted","setHighlightedState","highlighted","addHighlightedCell","getRow","setRow","row","getColumn","setColumn","column","getBox","setBox","box","on","getState","Command","execute","UndoableCommand","undo","ChangeDigitCommand","currentMode","state","_digit","_cells","getSelectedCells","_inputMode","_cellsState","autoErrorCheckingState","checkForErrors","TogglableCommand","toggle","CloseAllModalsCommand","_pauseGameCommand","PauseGameCommand","modal","showBackdrop","modals","remove","openState","Modal","_backdropElement","_openState","_currentModalId","_closeCommand","_enableOpening","_enableClosing","currentModalId","modalId","close","openButtons","OpenModalCommand","target","dataset","closeButtons","_modalId","_modalElement","PAUSE_MODAL_ID","add","_bodyElement","clock","pause","unpause","ShowClockCommand","clockState","_clockElement","_toggleCheckbox","AutoErrorCheckingCommand","_errorCheckingButton","HighlightRowCommand","highlightRowState","HighlightColumnCommand","highlightColumnState","HighlightBoxCommand","highlightBoxState","HighlightValueCommand","highlightValueState","HighlightPencilMarksCommand","highlightPencilMarksState","AutoCandidateModeCommand","_inputModeCenterLabel","getElementsByTagName","disabled","removeCandidates","usesMacOs","navigator","userAgent","match","window","_clockState","_autoErrorCheckingState","_highlightRowState","_highlightColumnState","_highlightBoxState","_highlightValueState","_highlightPencilMarksState","_autoCandidateState","localStorage","getItem","setItem","JSON","stringify","_fromLocalStorage","_applySettings","parse","autoErrorChecking","highlightRow","highlightColumn","highlightBox","highlightValue","highlightPencilMarks","_toLocalStorage","removeAllErrors","history","_past","_future","command","clearFuture","pop","redo","meta","appName","getAttribute","titleElements","titleField","descriptionField","title","_enableTextFields","titleCallback","pageTitle","trim","descriptionCallback","_mousePressed","_ctrlKeyPressed","_shiftKeyPressed","_arrowKeys","up","down","left","right","_arrowKeysConcatenated","concat","_numberKeys","_deleteKeys","_keyUpDownCallback","_keyDownCallback","_registerClickDisabling","closest","preventDefault","cancelKeyboardEvent","nodeName","metaKey","ctrlKey","shiftKey","shiftKeyIsPressed","isNumberKey","keyCode","isDeleteKey","isArrowKey","direction","_highlightedCells","getHighlightedCells","dehighlightAllCells","cellNumbers","sameDigitCellNumbers","_gridRows","_gridColumns","_gridBoxes","_selectedCells","_lastNavigatedCell","_collectCells","getLastNavigatedCell","getTotalElapsedMs","_initialMs","_startMoment","_timeElement","_timeInterval","_paused","start","showTime","Date","getElapsedMsSinceStart","isPaused","getTime","getElapsedTimeString","totalSeconds","hours","minutes","seconds","padStart","setInterval","clearInterval","documentEventHandler","_registerKeyboardEvents","_registerMouseEvents","pauseGameCommand","newCellIndex","newCell","settingsEventHandler","_enableClockToggling","_enableAutoErrorCheckingToggling","_enableHighlightingToggling","showClockCommand","autoErrorCheckingCommand","highlightRowCommand","highlightColumnCommand","highlightBoxCommand","highlightValueCommand","highlightPencilMarksCommand","actionsEventHandler","_registerCheckErrorsEvent","_registerAutoCandidateModeEvent"],"mappings":"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","file":"app_a3b9165a1f32c387863f.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Indicates whether the visitor's OS is macOS\n * @type {boolean}\n * @static\n */\nVisitor.usesMacOs = (navigator.userAgent.toLowerCase().match(/macintosh/) !== null);\n\nexport default function Visitor() {\n    const self = this;\n}\n","/**\n * Several input modes, to be used as constants\n * @type {number}\n * @static\n */\nInputMode.MODE_VALUE = 1;\nInputMode.MODE_CORNER = 2;\nInputMode.MODE_CENTER = 3;\n\nexport default function InputMode() {\n    const self = this;\n\n    /**\n     * The current mode\n     * @type {number}\n     * @private\n     */\n    let _mode = InputMode.MODE_VALUE;\n\n    /**\n     * The radio buttons that can change the mode\n     * @type {NodeListOf<HTMLElement>}\n     * @private\n     */\n    const _radioButtons = document.getElementsByName('input_mode');\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        _selectCurrentRadioButton();\n        _registerEventListeners();\n    };\n\n    /**\n     * Make the radio button of the current input mode checked\n     * @return {void}\n     * @private\n     */\n    const _selectCurrentRadioButton = () => {\n        _radioButtons.forEach(radioButton => {\n            if (parseInt(radioButton.value, 10) === self.getMode()) {\n                radioButton.checked = true;\n            }\n        });\n    };\n\n    /**\n     * Enable toggling the mode with radio buttons\n     * @return {void}\n     * @private\n     */\n    const _registerEventListeners = () => {\n        _radioButtons.forEach(radioButton => {\n            radioButton.addEventListener('change', () => {\n                self.setMode(parseInt(radioButton.value, 10));\n            });\n        });\n\n        document.addEventListener('keydown', event => {\n            switch (event.code) {\n                case 'Space':\n                    self.changeMode();\n                    break;\n                case 'KeyI':\n                    self.setMode(InputMode.MODE_VALUE);\n                    break;\n                case 'KeyO':\n                    self.setMode(InputMode.MODE_CORNER);\n                    break;\n                case 'KeyP':\n                    if (! Sudoku.settings.autoCandidateState()) {\n                        self.setMode(InputMode.MODE_CENTER);\n                    }\n                    break;\n            }\n        });\n    };\n\n    /**\n     * @param {number} mode\n     * @return {void}\n     */\n    self.setMode = mode => {\n        // Wrap around, when max number is reached\n        if (mode > InputMode.MODE_CENTER) {\n            mode = InputMode.MODE_VALUE;\n        }\n\n        if (Sudoku.settings.autoCandidateState() === true) {\n            // Center-marks are disabled in auto-candidate mode\n            if (mode > InputMode.MODE_CORNER) {\n                mode = InputMode.MODE_VALUE;\n            }\n        }\n\n        if ((typeof mode).toLowerCase() !== 'number') {\n            throw new Error(`Expected a number, got ${typeof mode}`);\n        }\n\n        if (mode < InputMode.MODE_VALUE || mode > InputMode.MODE_CENTER) {\n            throw new Error('Invalid input mode number given, please use InputMode constants');\n        }\n\n        _mode = mode;\n        _selectCurrentRadioButton();\n    };\n\n    /**\n     * Change the mode number incrementally\n     * @return {void}\n     */\n    self.changeMode = () => {\n        // Increase the mode number\n        self.setMode(_mode + 1);\n    }\n\n    /**\n     * @return {number}\n     */\n    self.getMode = () => _mode;\n}\n","/**\n * Extend a base constructor\n * @param {function} constructor\n * @param {function} baseConstructor\n * @return {void}\n */\nexport function extend(constructor, baseConstructor) {\n    // Check the constructor types\n    if ((typeof constructor).toLowerCase() !== 'function') {\n        throw new Error(`Constructor needs to be a function, got ${typeof constructor} instead`);\n    }\n\n    if ((typeof baseConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Base constructor needs to be a function, got ${typeof baseConstructor} instead`);\n    }\n\n    constructor.prototype = new baseConstructor();\n    constructor.prototype.constructor = constructor;\n};\n\n/**\n * Add code from a trait to an object\n * @param {object} instance\n * @param {function} traitConstructor\n * @return {void}\n */\nexport function trait(instance, traitConstructor) {\n    // Check the instance type\n    if ((typeof instance).toLowerCase() !== 'object') {\n        throw new Error(`Instance needs to be an object, got ${typeof instance} instead`);\n    }\n\n    // Check the constructor type\n    if ((typeof traitConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Trait constructor needs to be a function, got ${typeof traitConstructor} instead`);\n    }\n\n    // Create a new instance of the trait\n    const traitInstance = new traitConstructor();\n    // A property or method of the trait\n    let thing;\n\n    // Set the properties/methods in the calling object\n    for (thing in traitInstance) {\n        instance[thing] = traitInstance[thing];\n    }\n};\n","import GridCell from '../Grid/GridCell';\n\nexport default function HasGridCells() {\n    const self = this;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getCells = () => self.gridCells;\n\n    /**\n     * Get a cell by its cell number\n     * @param {number} number A 1-based cell number\n     * @return {GridCell|null}\n     */\n    self.getCell = number => {\n        const cell = self.gridCells.find(cell => cell.getCellNumber() === number);\n        return (cell === undefined) ? null : cell;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.checkDuplicateCellValues = () => {\n        // Pairs of value:gridCell[]\n        // Arrays of cells that have a certain value\n        const cellValues = {};\n\n        self.gridCells.forEach(cell => {\n            // Get the filled in value of the cell\n            const cellValue = cell.getValue();\n\n            // A value is needed for checking\n            if (cellValue === null) {\n                return;\n            }\n\n            // Get the cells that have that value and add the cell\n            const cells = cellValues[cellValue] || [];\n            cells.push(cell);\n            cellValues[cellValue] = cells;\n\n            // Set an error status on all duplicate cells, if there are any\n            if (cells.length > 1) {\n                cells.forEach(cell => cell.setErrorState(true));\n            }\n        });\n    };\n\n    /**\n     * See if any of the cells contain a value\n     * @param {Number} value\n     * @return {boolean}\n     */\n    self.containsValue = value => {\n        value = parseInt(value, 10);\n        const cells = self.getCells();\n\n        for (let i = 0; i < cells.length; i++) {\n            if (cells[i].hasValue(value)) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _rowNumber = rowNumber;\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        const rowIndex = _rowNumber - 1;\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + (rowIndex * 9));\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _columnNumber = columnNumber;\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = _columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 8 numbers, each incremented by 9\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     * @private\n     */\n    let _boxNumber = boxNumber;\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = _boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n}\n","import GridCell from '../Grid/GridCell';\n\n/**\n * @param {GridCell} gridCell\n * @constructor\n */\nexport default function GridCellEventHandler(gridCell) {\n    const self = this;\n\n    /**\n     * The cell to register event handlers for\n     * @type {GridCell}\n     * @private\n     */\n    const _gridCell = gridCell;\n\n    /**\n     * Register event handlers for a grid cell\n     * @return {void}\n     */\n    self.register = () => {\n        _registerMouseDownEvent();\n        _registerMouseEnterEvent();\n        _registerMouseUpEvent();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseDownEvent = () => {\n        _gridCell.getElement().addEventListener('mousedown', () => {\n            if (Sudoku.controls.ctrlKeyIsPressed()) {\n                // Toggle the selected status when clicked, if the ctrl key is pressed\n                _gridCell.setSelectedState(! _gridCell.isSelected());\n            } else {\n                // Select only this cell, if the ctrl key is not pressed\n                Sudoku.grid.deselectAllCells();\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseEnterEvent = () => {\n        _gridCell.getElement().addEventListener('mouseenter', () => {\n            // Allow multiple cells to be selected\n            if (Sudoku.controls.mouseIsPressed()) {\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseUpEvent = () => {\n        // On mouse up, this is the last selected cell\n        _gridCell.getElement().addEventListener(\n            'mouseup',\n            () => Sudoku.grid.setLastNavigatedCell(_gridCell)\n        );\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport GridCellEventHandler from '../EventHandlers/GridCellEventHandler';\nimport InputMode from '../InputMode';\n\n/**\n * The maximum amount of pencil marks\n * @type {number}\n * @static\n */\nGridCell.MAX_CORNER_MARKS = 8;\nGridCell.MAX_CENTER_MARKS = 5;\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     * @private\n     */\n    const _cellNumber = cellNumber;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLLIElement|null}\n     * @private\n     */\n    let _element = null;\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     * @private\n     */\n    let _gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     * @private\n     */\n    let _gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     * @private\n     */\n    let _gridBox = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     * @private\n     */\n    let _isPrefilled = false;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     * @private\n     */\n    let _colorNumber = 1;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    let _value = null;\n\n    /**\n     * The pencil mark values (corner mode)\n     * @type {number[]}\n     * @private\n     */\n    let _cornerMarks = [];\n\n    /**\n     * The pencil mark values (center mode)\n     * @type {number[]}\n     * @private\n     */\n    let _centerMarks = [];\n\n    /**\n     * Automatically filled in candidates\n     * @type {number[]}\n     * @private\n     */\n    let _autoCandidates = [];\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    let _isSelected = false;\n\n    /**\n     * Whether the cell is currently highlighted\n     * @type {boolean}\n     * @private\n     */\n    let _isHighlighted = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        // Get the HTML cell element\n        _element = document.getElementById(`grid-cell-${self.getCellNumber()}`);\n        if (_element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.getCellNumber()}' not found`);\n        }\n\n        // Register event handlers\n        const eventHandler = new GridCellEventHandler(self);\n        eventHandler.register();\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getCellNumber = () => _cellNumber;\n\n    /**\n     * @return {HTMLLIElement|null}\n     */\n    self.getElement = () => _element;\n\n    /**\n     * @return {boolean}\n     */\n    self.isPrefilled = () => _isPrefilled;\n\n    /**\n     * @return {number}\n     */\n    self.getColorNumber = () => _colorNumber;\n\n    /**\n     * Wrapper for value, corner-marks and center-marks setting\n     * @param {number|null} digit\n     * @param {number|null} mode The input mode, uses current mode by default\n     * @return {void}\n     * @see InputMode for the mode constants\n     */\n    self.setDigit = (digit, mode = null) => {\n        // Use the current input mode, if null\n        if (mode === null) {\n            mode = Sudoku.inputMode.getMode();\n        }\n\n        // Null means deleting\n        if (digit === null) {\n            // Remove the marks only if no value is filled in\n            if (self.getValue() === null) {\n                self.setCornerMarks([]);\n                if (! Sudoku.settings.autoCandidateState()) {\n                    self.setCenterMarks([]);\n                }\n            } else {\n                self.setValue(null);\n            }\n\n            return;\n        }\n\n        switch (mode) {\n            case InputMode.MODE_VALUE:\n                self.setValue(digit);\n                break;\n            case InputMode.MODE_CORNER:\n                self.setCornerMark(digit);\n                break;\n            case InputMode.MODE_CENTER:\n                self.setCenterMark(digit);\n                break;\n        }\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => _value;\n\n    /**\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setValue = digit => {\n        // Remove the value, if the same digit is entered\n        if (digit === self.getValue()) {\n            digit = null;\n        }\n\n        // Show or hide the pencil marks\n        _showMarks(digit === null);\n\n        // Show the value on screen\n        self.getElement().getElementsByClassName('cell-value')[0].innerText = digit;\n\n        _value = digit;\n\n        // Highlight other cells\n        Sudoku.gridCellHighlighter.highlightRelatedCells();\n\n        // Show possible candidates if needed\n        if (Sudoku.settings.autoCandidateState() === true) {\n            Sudoku.grid.determineCandidates();\n        }\n    };\n\n    /**\n     * Check if the cell has a value\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasValue = (digit = null) => {\n        // Check if the cell has any value\n        if (digit === null) {\n            return (self.getValue() !== null);\n        }\n\n        // Or check for a specific value\n        return (self.getValue() === digit);\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCornerMarks = () => _cornerMarks;\n\n    /**\n     * Add or remove a digit from the corner marks\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setCornerMark = digit => {\n        // Don't set a corner mark, if a value is filled in\n        if (self.getValue() !== null) {\n            return;\n        }\n\n        const cornerMarks = self.getCornerMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = cornerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            cornerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && cornerMarks.length < GridCell.MAX_CORNER_MARKS) {\n                cornerMarks.push(digit);\n            }\n        }\n\n        self.setCornerMarks(cornerMarks);\n    };\n\n    /**\n     * @param {number[]} cornerMarks\n     * @return {void}\n     */\n    self.setCornerMarks = cornerMarks => {\n        // Don't set pencil marks, if there are too many\n        if (cornerMarks.length > GridCell.MAX_CORNER_MARKS) {\n            return;\n        }\n\n        _cornerMarks = cornerMarks;\n        self.fillCornerMarks();\n    };\n\n    /**\n     * Fill corner marks in the cell\n     * @return {void}\n     */\n    self.fillCornerMarks = () => {\n        // Clear all corner marks first\n        const allElements = self.getElement().getElementsByClassName('corner-mark');\n        for (let i = 0; i < allElements.length; i++) {\n            allElements[i].innerText = null;\n        }\n\n        // Show the corner marks\n        self.getCornerMarks()\n            .sort((a, b) => a - b)\n            .forEach((item, index) => {\n                document.getElementById(`corner-mark-${self.getCellNumber()}-${index + 1}`)\n                    .innerText = item.toString(10);\n            });\n    };\n\n    /**\n     * Check if the cell has a corner mark\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasCornerMark = (digit = null) => {\n        // Check if the cell has any corner mark\n        if (digit === null) {\n            return (self.getCornerMarks().length > 0);\n        }\n\n        // Or check for a specific value\n        return (self.getCornerMarks().indexOf(digit) > -1);\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCenterMarks = () => _centerMarks;\n\n    /**\n     * @return {number[]}\n     */\n    self.getAutoCandidates = () => _autoCandidates;\n\n    /**\n     * Add or remove a digit from the center marks\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setCenterMark = digit => {\n        // Setting center marks is disabled in auto-candidate mode\n        if (Sudoku.settings.autoCandidateState() === true) {\n            return;\n        }\n\n        // Don't set a center mark, if a value is filled in\n        if (self.getValue() !== null) {\n            return;\n        }\n\n        const centerMarks = self.getCenterMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = centerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            centerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && centerMarks.length < GridCell.MAX_CENTER_MARKS) {\n                centerMarks.push(digit);\n            }\n        }\n\n        self.setCenterMarks(centerMarks);\n    };\n\n    /**\n     * @param {number[]} centerMarks\n     * @param {boolean} asAutoCandidate\n     * @return {void}\n     */\n    self.setCenterMarks = (centerMarks, asAutoCandidate = false) => {\n        // Empty the candidates, if there are too many\n        if (asAutoCandidate === true && centerMarks.length > GridCell.MAX_CENTER_MARKS) {\n            centerMarks = [];\n        }\n\n        // Don't set pencil marks, if there are too many\n        if (centerMarks.length > GridCell.MAX_CENTER_MARKS) {\n            return;\n        }\n\n        (asAutoCandidate === true)\n            ? _autoCandidates = centerMarks\n            : _centerMarks = centerMarks;\n\n        self.fillCenterMarks(asAutoCandidate);\n    };\n\n    /**\n     * Fill corner marks in the cell\n     * @param {boolean} asAutoCandidate\n     * @return {void}\n     */\n    self.fillCenterMarks = (asAutoCandidate = false) => {\n        let centerMarks = (asAutoCandidate === true)\n            ? self.getAutoCandidates()\n            : self.getCenterMarks();\n\n        centerMarks = centerMarks\n            // Sort ascending\n            .sort((a, b) => a - b)\n            // Concatenate the numbers\n            .join('');\n\n        // Show the pencil marks\n        self.getElement()\n            .getElementsByClassName('center-marks')[0]\n            .innerText = centerMarks;\n    };\n\n    /**\n     * Check if the cell has a center mark\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasCenterMark = (digit = null) => {\n        const centerMarks = (Sudoku.settings.autoCandidateState() === true)\n            ? self.getAutoCandidates()\n            : self.getCenterMarks();\n\n        // Check if the cell has any center mark\n        if (digit === null) {\n            return (centerMarks.length > 0);\n        }\n\n        // Or check for a specific value\n        return (centerMarks.indexOf(digit) > -1);\n    };\n\n    /**\n     * Toggle the visibility of the pencil marks\n     * @param {boolean} show\n     * @private\n     */\n    const _showMarks = show => {\n        const toggleMethod = show ? 'remove' : 'add';\n\n        // Toggle the corner marks\n        for (let i = 1; i < 9; i++) {\n            document.getElementById(`corner-mark-${self.getCellNumber()}-${i}`)\n                .classList[toggleMethod]('hide');\n        }\n\n        // Toggle the center marks\n        self.getElement().getElementsByClassName('center-marks')[0]\n            .classList[toggleMethod]('hide');\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isSelected = () => _isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setSelectedState = selected => {\n        const toggleMethod = selected ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-selected');\n\n        // Don't add duplicates to the list\n        if (selected && ! self.isSelected()) {\n            Sudoku.grid.addSelectedCell(self);\n        }\n\n        _isSelected = selected;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isHighlighted = () => _isHighlighted;\n\n    /**\n     * @param {boolean} highlighted\n     * @return {void}\n     */\n    self.setHighlightedState = highlighted => {\n        const toggleMethod = highlighted ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-highlighted');\n\n        // Don't add duplicates to the list\n        if (highlighted && ! self.isHighlighted()) {\n            Sudoku.gridCellHighlighter.addHighlightedCell(self);\n        }\n\n        _isHighlighted = highlighted;\n    };\n\n    /**\n     * @return {GridRow|null}\n     */\n    self.getRow = () => _gridRow;\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => _gridRow = row;\n\n    /**\n     * @return {GridColumn|null}\n     */\n    self.getColumn = () => _gridColumn;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => _gridColumn = column;\n\n    /**\n     * @return {GridBox|null}\n     */\n    self.getBox = () => _gridBox;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => _gridBox = box;\n\n    /**\n     * Set the error status of the element\n     * @param {boolean} on\n     * @return {void}\n     */\n    self.setErrorState = on => {\n        const toggleMethod = on ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('has-error');\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.getCellNumber()\n        + (self.isPrefilled() ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.getColorNumber()\n        + 'cr' + self.getCornerMarks().join('')\n        + 'cn' + self.getCenterMarks().join('');\n}\n","export default function Command() {\n    const self = this;\n\n    /**\n     * Execute the command\n     * @return {void}\n     */\n    self.execute = () => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../functions';\nimport Command from './Command';\n\nextend(UndoableCommand, Command);\n\nexport default function UndoableCommand() {\n    const self = this;\n    Command.call(self);\n\n    /**\n     * Undo the command\n     * @return {void}\n     */\n    self.undo = () => {\n        throw new Error(\"'undo' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../../functions';\nimport UndoableCommand from '../UndoableCommand';\nimport InputMode from '../../InputMode';\n\nextend(ChangeDigitCommand, UndoableCommand);\n\n/**\n * @param {number|null} digit\n * @constructor\n */\nexport default function ChangeDigitCommand(digit) {\n    const self = this;\n    UndoableCommand.call(self);\n\n    /**\n     * The digit to apply to cell(s)\n     * @type {number|null}\n     * @private\n     */\n    const _digit = digit;\n\n    /**\n     * The cells to apply the digit to\n     * @type {GridCell[]}\n     * @private\n     */\n    const _cells = Sudoku.grid.getSelectedCells();\n\n    /**\n     * The input mode for the digit\n     * @type {number}\n     * @private\n     */\n    const _inputMode = (() => {\n        const currentMode = Sudoku.inputMode.getMode();\n\n        // When more than 1 cell is selected,\n        // switch to pencil mark notation if the input mode is 'value'\n        return (_cells.length > 1 && currentMode === InputMode.MODE_VALUE)\n            ? InputMode.MODE_CORNER\n            : currentMode;\n    })();\n\n    /**\n     * Contains the state of cells, before changing the digit\n     * @type {object}\n     * @private\n     */\n    const _cellsState = (() => {\n        // Pairs of cellNumber:{value, cornerMarks, centerMarks}\n        const state = {};\n\n        // Collect the state of all cells\n        _cells.forEach(cell => {\n            state[cell.getCellNumber()] = {\n                value: cell.getValue(),\n                // Copy the array, because they go by reference\n                cornerMarks: cell.getCornerMarks().map(item => item),\n                centerMarks: cell.getCenterMarks().map(item => item),\n            };\n        });\n\n        return state;\n    })();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        _cells.forEach(cell => cell.setDigit(_digit, _inputMode));\n\n        if (Sudoku.settings.autoErrorCheckingState()) {\n            Sudoku.grid.checkForErrors();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    self.undo = () => {\n        // Apply the previous values to the cell(s)\n        _cells.forEach(cell => {\n            const state = _cellsState[cell.getCellNumber()];\n\n            cell.setValue(state.value);\n            // Copy the array, because they go by reference\n            cell.setCornerMarks(state.cornerMarks.map(item => item));\n            cell.setCenterMarks(state.centerMarks.map(item => item));\n        });\n\n        if (Sudoku.settings.autoErrorCheckingState()) {\n            Sudoku.grid.checkForErrors();\n        }\n    };\n}\n","import {extend} from '../functions';\nimport Command from './Command';\n\nextend(TogglableCommand, Command);\n\nexport default function TogglableCommand() {\n    const self = this;\n    Command.call(self);\n\n    /**\n     * The current state of the command\n     * @type {boolean|function|null}\n     * @private\n     */\n    self.state = null;\n\n    /**\n     * @inheritDoc\n     * @param {boolean} state\n     */\n    self.execute = state => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n\n    /**\n     * Toggle between states of the command\n     * @return {void}\n     */\n    self.toggle = () => {\n        const state = ((typeof self.state) === 'function')\n            ? self.state()\n            : self.state;\n\n        if (state === null) {\n            throw new Error('The command needs an (initial) true/false state');\n        }\n\n        self.execute(! state);\n    };\n}\n","import {extend} from '../../functions';\nimport Command from '../Command';\nimport PauseGameCommand from '../PauseGameCommand';\n\nextend(CloseAllModalsCommand, Command);\n\n/**\n * @constructor\n */\nexport default function CloseAllModalsCommand() {\n    const self = this;\n    Command.call(self);\n\n    /**\n     * @type {PauseGameCommand}\n     * @private\n     */\n    const _pauseGameCommand = new PauseGameCommand();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        _pauseGameCommand.execute(false);\n\n        Sudoku.modal.showBackdrop(false);\n\n        // Close all the modals\n        const modals = document.getElementsByClassName('modal');\n        for (let i = 0; i < modals.length; i++) {\n            modals[i].classList.remove('show');\n        }\n\n        Sudoku.modal.openState(false);\n    };\n}\n","import CloseAllModalsCommand from './Commands/Modal/CloseAllModalsCommand';\nimport OpenModalCommand from './Commands/Modal/OpenModalCommand';\n\n/**\n * The ID of the modal dialog for pausing the game\n * @type {string}\n * @static\n */\nModal.PAUSE_MODAL_ID = 'pause-modal';\n\nexport default function Modal() {\n    const self = this;\n\n    /**\n     * The modal dialog backdrop\n     * @type {HTMLElement}\n     * @private\n     */\n    const _backdropElement = document.getElementById('modal-backdrop');\n\n    /**\n     * Indicates whether a modal is currently open\n     * @type {boolean}\n     * @private\n     */\n    let _openState = false;\n\n    /**\n     * The ID of the currently opened modal\n     * @type {string|null}\n     * @private\n     */\n    let _currentModalId = null;\n\n    /**\n     * Reusable close command, for all modals\n     * @type {CloseAllModalsCommand}\n     * @private\n     */\n    const _closeCommand = new CloseAllModalsCommand();\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableOpening();\n        _enableClosing();\n    };\n\n    /**\n     * Show or hide the modal backdrop\n     * @param {boolean} show\n     */\n    self.showBackdrop = show => {\n        const toggleMethod = show ? 'add' : 'remove';\n        _backdropElement.classList[toggleMethod]('show');\n    };\n\n    /**\n     * @param {boolean|null} state\n     * @return {boolean}\n     */\n    self.openState = (state = null) => {\n        if (state !== null) {\n            _openState = state;\n        }\n\n        return _openState;\n    };\n\n    /**\n     * @param {string|null} modalId\n     * @return {string|null}\n     */\n    self.currentModalId = (modalId = null) => {\n        if (modalId !== null) {\n            _currentModalId = modalId;\n        }\n\n        return _currentModalId;\n    };\n\n    /**\n     * Close an open modal dialog, if there is any\n     * @return {void}\n     */\n    self.close = () => _closeCommand.execute();\n\n    /**\n     * Enable opening of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableOpening = () => {\n        const openButtons = document.getElementsByClassName('open-modal');\n\n        for (let i = 0; i < openButtons.length; i++) {\n            openButtons[i].addEventListener('click', event => {\n                // Open the modal dialog\n                const modalId = event.target.dataset.modalId;\n                const command = new OpenModalCommand(modalId);\n                command.execute();\n            });\n        }\n    };\n\n    /**\n     * Enable closing of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableClosing = () => {\n        // Enable close buttons of the modal dialogs\n        const closeButtons = document.getElementsByClassName('close-modal');\n        for (let i = 0; i < closeButtons.length; i++) {\n            closeButtons[i].addEventListener('click', self.close);\n        }\n\n        // Clicking the backdrop also closes modal dialogs\n        _backdropElement.addEventListener('click', self.close);\n    };\n}\n","import {extend} from '../../functions';\nimport Command from '../Command';\nimport PauseGameCommand from '../PauseGameCommand';\nimport Modal from '../../Modal';\n\nextend(OpenModalCommand, Command);\n\n/**\n * @param {string} modalId ID of the modal dialog to open\n * @constructor\n */\nexport default function OpenModalCommand(modalId) {\n    const self = this;\n    Command.call(self);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    const _modalId = modalId;\n\n    /**\n     * The modal dialog to show\n     * @type {HTMLElement}\n     * @private\n     */\n    const _modalElement = document.getElementById(_modalId);\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        Sudoku.modal.currentModalId(_modalId);\n\n        // Prevent recursive calls\n        if (_modalId !== Modal.PAUSE_MODAL_ID) {\n            const pauseGameCommand = new PauseGameCommand();\n            pauseGameCommand.execute(true);\n        }\n\n        Sudoku.modal.openState(true);\n        Sudoku.modal.showBackdrop(true);\n        _modalElement.classList.add('show');\n    };\n}\n","import {extend} from '../functions';\nimport TogglableCommand from './TogglableCommand';\nimport OpenModalCommand from './Modal/OpenModalCommand';\nimport Modal from '../Modal';\n\nextend(PauseGameCommand, TogglableCommand);\n\nexport default function PauseGameCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = false;\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    const _bodyElement = document.getElementById('page-body');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        if (state === true) {\n            Sudoku.clock.pause();\n            _bodyElement.classList.add('is-paused');\n\n            const openModalCommand = new OpenModalCommand(Modal.PAUSE_MODAL_ID);\n            openModalCommand.execute();\n        } else {\n            // Prevent recursive calls\n            if (Sudoku.modal.currentModalId() !== Modal.PAUSE_MODAL_ID) {\n                Sudoku.modal.close();\n            }\n\n            Sudoku.clock.unpause();\n            _bodyElement.classList.remove('is-paused');\n        }\n\n        self.state = state;\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommand from '../TogglableCommand';\n\nextend(ShowClockCommand, TogglableCommand);\n\nexport default function ShowClockCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.clockState();\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    const _clockElement = document.getElementById('clock-wrapper');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-show-clock');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'remove' : 'add';\n        _clockElement.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.clockState(state);\n        self.state = state;\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommand from '../TogglableCommand';\n\nextend(AutoErrorCheckingCommand, TogglableCommand);\n\nexport default function AutoErrorCheckingCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoErrorCheckingState;\n\n    /**\n     * The manual error checking button\n     * @type {HTMLElement}\n     * @private\n     */\n    const _errorCheckingButton = document.getElementById('check-errors');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-auto-error-checking');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'add' : 'remove';\n        _errorCheckingButton.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.autoErrorCheckingState(state);\n        self.state = state;\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommand from '../TogglableCommand';\n\nextend(HighlightRowCommand, TogglableCommand);\n\nexport default function HighlightRowCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightRowState;\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-row');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.highlightRowState(state);\n        self.state = state;\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommand from '../TogglableCommand';\n\nextend(HighlightColumnCommand, TogglableCommand);\n\nexport default function HighlightColumnCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightColumnState;\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-column');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.highlightColumnState(state);\n        self.state = state;\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommand from '../TogglableCommand';\n\nextend(HighlightBoxCommand, TogglableCommand);\n\nexport default function HighlightBoxCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightBoxState;\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-box');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.highlightBoxState(state);\n        self.state = state;\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommand from '../TogglableCommand';\n\nextend(HighlightValueCommand, TogglableCommand);\n\nexport default function HighlightValueCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightValueState;\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-value');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.highlightValueState(state);\n        self.state = state;\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommand from '../TogglableCommand';\n\nextend(HighlightPencilMarksCommand, TogglableCommand);\n\nexport default function HighlightPencilMarksCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightPencilMarksState;\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-pencil-marks');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.highlightPencilMarksState(state);\n        self.state = state;\n    };\n};\n","import {extend} from '../functions';\nimport TogglableCommand from './TogglableCommand';\nimport InputMode from '../InputMode';\n\nextend(AutoCandidateModeCommand, TogglableCommand);\n\nexport default function AutoCandidateModeCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = false;\n\n    /**\n     * The label containing the checkbox for the 'center marks' input mode\n     * @type {HTMLElement}\n     * @private\n     */\n    const _inputModeCenterLabel = document.getElementById('input-mode-center-label');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        if (state === true) {\n            Sudoku.grid.determineCandidates();\n\n            // Disable the input mode checkbox\n            _inputModeCenterLabel.classList.add('strike-through');\n            _inputModeCenterLabel.getElementsByTagName('input')[0].disabled = true;\n\n            // Don't leave the disabled input mode in an active state\n            if (Sudoku.inputMode.getMode() === InputMode.MODE_CENTER) {\n                Sudoku.inputMode.setMode(InputMode.MODE_VALUE);\n            }\n        } else {\n            Sudoku.grid.removeCandidates();\n\n            // Enable the input mode checkbox\n            _inputModeCenterLabel.classList.remove('strike-through');\n            _inputModeCenterLabel.getElementsByTagName('input')[0].disabled = false;\n        }\n\n        Sudoku.settings.autoCandidateState(state);\n        self.state = state;\n    };\n}\n","import Controls from './Controls';\nimport InputMode from './InputMode';\nimport Grid from './Grid/Grid';\nimport Clock from './Clock';\nimport DocumentEventHandler from './EventHandlers/DocumentEventHandler';\nimport CommandHistory from './Commands/CommandHistory';\nimport Meta from './Meta';\nimport Modal from './Modal';\nimport Settings from './Settings';\nimport SettingsEventHandler from './EventHandlers/SettingsEventHandler';\nimport ActionsEventHandler from './EventHandlers/ActionsEventHandler';\nimport GridCellHighlighter from './Grid/GridCellHighlighter';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    settings: new Settings(),\n    history: new CommandHistory(),\n    meta: new Meta(),\n    controls: new Controls(),\n    inputMode: new InputMode(),\n    gridCellHighlighter: new GridCellHighlighter(),\n    grid: new Grid(),\n    clock: new Clock(),\n    modal: new Modal(),\n    documentEventHandler: new DocumentEventHandler(),\n    settingsEventHandler: new SettingsEventHandler(),\n    actionsEventHandler: new ActionsEventHandler(),\n};\n\nSudoku.settings.init();\nSudoku.settingsEventHandler.init();\nSudoku.clock.init();\nSudoku.modal.init();\nSudoku.meta.init();\nSudoku.inputMode.init();\nSudoku.controls.init();\nSudoku.grid.init();\nSudoku.documentEventHandler.init();\nSudoku.actionsEventHandler.init();\n\n/*\nconst LZString = require('lz-string');\n\nfunction logResults(state, label = null) {\n    const result1 = LZString.compress(state);\n    const result2 = LZString.compressToEncodedURIComponent(state);\n\n    console.group(label || 'Compression result');\n    console.log('Original state', state.length, state);\n    console.log('Compressed state', result1.length, result1);\n    console.log('URL-encoded compressed state', result2.length, result2);\n    console.groupEnd();\n}\n\n// The state from the application\n// logResults(JSON.stringify(Sudoku.grid.getState()), 'App');\n\n// 3 digits per cell: 2 digits for cell number, 1 for value\nconst threeDigits = '038149156382416811295104457093378472567629123781806';\nlogResults(threeDigits, '3 digits per cell');\n\n// 81 numbers, representing every cell value (0 = empty)\nconst eightyOneNumbers = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nlogResults(eightyOneNumbers, '81 numbers');\n\n// A 1 as a counter, so the the digit 2 is '11', and 7 is '1111111' (delimited by a comma)\nconst csvOnes = eightyOneNumbers.split('')\n    .map(number => {\n        number = parseInt(number, 10);\n        return '1'.repeat(number);\n    })\n    .join(',');\nlogResults(csvOnes, 'CSV, counting with ones');\n\n// Grid cells state\nconst cellsState = ('n' + '1'.repeat(23) // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v' + '1'.repeat(7) // Cell value\n    + 'c' + '1'.repeat(4) // Color number 4\n    + 'cr' + [3, 4, 6, 8].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Center pencil marks\n).repeat(81) // For 81 cells\n// 366 length compressed, 975 length URL-encoded compressed\nlogResults(cellsState, 'Cells state v1');\n\n// Grid cells state, normal way\nconst cellsState2 = ('n23' // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v7' // Cell value\n    + 'c4' // Color number 4\n    + 'cr' + [3, 4, 6, 8].join('') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].join('') // Center pencil marks\n).repeat(81) // For 81 cells\n// 118 length compressed, 315 length URL-encoded compressed\nlogResults(cellsState2, 'Cells state v2');\n//*/\n","import ShowClockCommand from './Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from './Commands/Settings/AutoErrorCheckingCommand';\nimport HighlightRowCommand from './Commands/Settings/HighlightRowCommand';\nimport HighlightColumnCommand from './Commands/Settings/HighlightColumnCommand';\nimport HighlightBoxCommand from './Commands/Settings/HighlightBoxCommand';\nimport HighlightValueCommand from './Commands/Settings/HighlightValueCommand';\nimport HighlightPencilMarksCommand from './Commands/Settings/HighlightPencilMarksCommand';\n\nexport default function Settings() {\n    const self = this;\n\n    /**\n     * Indicates whether the clock is shown\n     * @type {boolean}\n     * @private\n     */\n    let _clockState;\n\n    /**\n     * Indicates whether automatic error checking is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _autoErrorCheckingState;\n\n    /**\n     * Indicates whether highlighting rows is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightRowState;\n\n    /**\n     * Indicates whether highlighting columns is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightColumnState;\n\n    /**\n     * Indicates whether highlighting 3x3 boxes is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightBoxState;\n\n    /**\n     * Indicates whether highlighting cells with the same value is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightValueState;\n\n    /**\n     * Indicates whether highlighting cells with the same value (pencil marks) is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightPencilMarksState;\n\n    /**\n     * Indicates whether auto-candidate mode is on\n     * @type {boolean}\n     * @private\n     */\n    let _autoCandidateState = false;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        // Initialize the settings in local storage if needed\n        if (localStorage.getItem('settings') === null) {\n            localStorage.setItem('settings', JSON.stringify({}));\n        }\n\n        _fromLocalStorage();\n        _applySettings();\n    };\n\n    /**\n     * Get settings stored in local storage\n     * @return {void}\n     * @private\n     */\n    const _fromLocalStorage = () => {\n        const settings = JSON.parse(localStorage.getItem('settings'));\n\n        _clockState = (settings.clock !== undefined)\n            ? settings.clock\n            : true;\n\n        _autoErrorCheckingState = (settings.autoErrorChecking !== undefined)\n            ? settings.autoErrorChecking\n            : true;\n\n        _highlightRowState = (settings.highlightRow !== undefined)\n            ? settings.highlightRow\n            : true;\n\n        _highlightColumnState = (settings.highlightColumn !== undefined)\n            ? settings.highlightColumn\n            : true;\n\n        _highlightBoxState = (settings.highlightBox !== undefined)\n            ? settings.highlightBox\n            : true;\n\n        _highlightValueState = (settings.highlightValue !== undefined)\n            ? settings.highlightValue\n            : true;\n\n        _highlightPencilMarksState = (settings.highlightPencilMarks !== undefined)\n            ? settings.highlightPencilMarks\n            : true;\n    };\n\n    /**\n     * Export settings to local storage\n     * @return {void}\n     * @private\n     */\n    const _toLocalStorage = () => {\n        localStorage.setItem('settings', JSON.stringify({\n            clock: self.clockState(),\n            autoErrorChecking: self.autoErrorCheckingState(),\n            highlightRow: self.highlightRowState(),\n            highlightColumn: self.highlightColumnState(),\n            highlightBox: self.highlightBoxState(),\n            highlightValue: self.highlightValueState(),\n            highlightPencilMarks: self.highlightPencilMarksState(),\n        }));\n    };\n\n    /**\n     * Apply the stored settings\n     * @return {void}\n     * @private\n     */\n    const _applySettings = () => {\n        (new ShowClockCommand()).execute(self.clockState());\n        (new AutoErrorCheckingCommand()).execute(self.autoErrorCheckingState());\n        (new HighlightRowCommand()).execute(self.highlightRowState());\n        (new HighlightColumnCommand()).execute(self.highlightColumnState());\n        (new HighlightBoxCommand()).execute(self.highlightBoxState());\n        (new HighlightValueCommand()).execute(self.highlightValueState());\n        (new HighlightPencilMarksCommand()).execute(self.highlightPencilMarksState());\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.clockState = (state = null) => {\n        if (state !== null) {\n            _clockState = state;\n            _toLocalStorage();\n        }\n\n        return _clockState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoErrorCheckingState = (state = null) => {\n        if (state !== null) {\n            _autoErrorCheckingState = state;\n            _toLocalStorage();\n\n            // Check or remove errors\n            (state === true)\n                ? Sudoku.grid.checkForErrors()\n                : Sudoku.grid.removeAllErrors();\n        }\n\n        return _autoErrorCheckingState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightRowState = (state = null) => {\n        if (state !== null) {\n            _highlightRowState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightRowState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightColumnState = (state = null) => {\n        if (state !== null) {\n            _highlightColumnState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightColumnState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightBoxState = (state = null) => {\n        if (state !== null) {\n            _highlightBoxState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightBoxState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightValueState = (state = null) => {\n        if (state !== null) {\n            _highlightValueState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightValueState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightPencilMarksState = (state = null) => {\n        if (state !== null) {\n            _highlightPencilMarksState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightPencilMarksState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoCandidateState = (state = null) => {\n        if (state !== null) {\n            _autoCandidateState = state;\n        }\n\n        return _autoCandidateState;\n    }\n}\n","import UndoableCommand from './UndoableCommand';\n\nexport default function CommandHistory() {\n    const self = this;\n\n    /**\n     * The list of commands that have been executed\n     * @type {UndoableCommand[]}\n     * @private\n     */\n    let _past = [];\n\n    /**\n     * The list of commands to redo\n     * @type {UndoableCommand[]}\n     * @private\n     */\n    let _future = [];\n\n    /**\n     * Add a command to be executed\n     * @param {UndoableCommand} command\n     * @param {boolean} clearFuture Whether to clear the future (redo) stack\n     * @return {number}\n     */\n    self.execute = (command, clearFuture = true) => {\n        if (! (command instanceof UndoableCommand)) {\n            throw new Error('Command needs to have UndoableCommand in its prototype chain');\n        }\n\n        command.execute();\n        _past.push(command);\n\n        // Clear the future (redo) list if needed\n        if (clearFuture) {\n            _future = [];\n        }\n    };\n\n    /**\n     * Undo the most recent command\n     * @return {void}\n     */\n    self.undo = () => {\n        // A command needs to exist\n        if (_past.length < 1) {\n            return;\n        }\n\n        // Undo the command\n        const command = _past.pop();\n        command.undo();\n\n        // Put the command in the future stack, for redoing\n        _future.push(command);\n    };\n\n    /**\n     * Execute the most recent command from the future stack\n     * @return {void}\n     */\n    self.redo = () => {\n        // A command needs to exist\n        if (_future.length < 1) {\n            return;\n        }\n\n        // Redo the command\n        const command = _future.pop();\n        self.execute(command, false);\n    };\n}\n","export default function Meta() {\n    const self = this;\n\n    /**\n     * The name of the application\n     * @type {string}\n     */\n    const appName = document.getElementById('meta-app-name').getAttribute('content');\n\n    /**\n     * The page title element\n     * @type {HTMLCollectionOf<HTMLElement>}\n     */\n    const titleElements = document.getElementsByClassName('page-title');\n\n    /**\n     * The title input field\n     * @type {HTMLInputElement}\n     */\n    const titleField = document.getElementById('puzzle-title');\n\n    /**\n     * The description input field\n     * @type {HTMLTextAreaElement}\n     */\n    const descriptionField = document.getElementById('puzzle-description');\n\n    /**\n     * An optional title for the sudoku\n     * @type {string|null}\n     */\n    let title = null;\n\n    /**\n     * An optional description for the sudoku\n     * @type {string|null}\n     */\n    let description = null;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableTextFields();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableTextFields = () => {\n        const titleCallback = () => {\n            title = titleField.value.trim();\n\n            // Update the page title\n            const pageTitle = (title !== '')\n                ? `${title} - ${appName}`\n                : appName;\n\n            for (let i = 0; i < titleElements.length; i++) {\n                titleElements[i].innerText = pageTitle;\n            }\n        };\n\n        titleField.addEventListener('change', titleCallback);\n        titleField.addEventListener('keyup', titleCallback);\n        titleField.addEventListener('paste', titleCallback);\n\n        const descriptionCallback = () => description = descriptionField.value;\n\n        descriptionField.addEventListener('change', descriptionCallback);\n        descriptionField.addEventListener('keyup', descriptionCallback);\n        descriptionField.addEventListener('paste', descriptionCallback);\n    };\n}\n","import Visitor from './Utilities/Visitor';\n\nexport default function Controls() {\n    const self = this;\n\n    /**\n     * Indicates whether a mouse button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _mousePressed = false;\n\n    /**\n     * Indicates whether a ctrl button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _ctrlKeyPressed = false;\n\n    /**\n     * Indicates whether a shift button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _shiftKeyPressed = false;\n\n    /**\n     * Arrow key codes\n     * @type {object}\n     * @private\n     */\n    const _arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Arrow key codes, as 1 array\n     * @type {string[]}\n     * @private\n     */\n    const _arrowKeysConcatenated = _arrowKeys.up\n        .concat(_arrowKeys.down)\n        .concat(_arrowKeys.left)\n        .concat(_arrowKeys.right);\n\n    /**\n     * Number key codes\n     * @type {string[]}\n     * @private\n     */\n    const _numberKeys = [\n        'Digit1', 'Numpad1', 'Digit2', 'Numpad2', 'Digit3', 'Numpad3',\n        'Digit4', 'Numpad4', 'Digit5', 'Numpad5', 'Digit6', 'Numpad6',\n        'Digit7', 'Numpad7', 'Digit8', 'Numpad8', 'Digit9', 'Numpad9',\n    ];\n\n    /**\n     * Delete key codes\n     * @type {string[]}\n     * @private\n     */\n    const _deleteKeys = ['Delete', 'Backspace'];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => _mousePressed = true);\n        document.addEventListener('mouseup', () => _mousePressed = false);\n        document.addEventListener('keyup', _keyUpDownCallback);\n        document.addEventListener('keydown', _keyUpDownCallback);\n        document.addEventListener('keydown', _keyDownCallback);\n        _registerClickDisabling();\n    };\n\n    /**\n     * Disable click events for certain elements\n     * @return {void}\n     * @private\n     */\n    const _registerClickDisabling = () => {\n        document.addEventListener('click', event => {\n            if (event.target.closest('.click-prevent') !== null) {\n                event.preventDefault();\n            }\n        });\n    };\n\n    /**\n     * Decide whether to cancel a keyboard listener\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.cancelKeyboardEvent = event => {\n        const nodeName = event.target.nodeName.toLowerCase();\n\n        // Don't use custom listener on input elements\n        return (['input', 'textarea'].indexOf(nodeName) > -1);\n    };\n\n    /**\n     * Callback for keydown and keyup\n     * @param {Event} event\n     * @return {void}\n     * @private\n     */\n    const _keyUpDownCallback = event => {\n        _ctrlKeyPressed = Visitor.usesMacOs ? event.metaKey : event.ctrlKey;\n        _shiftKeyPressed = event.shiftKey;\n    };\n\n    /**\n     * @param {Event} event\n     * @return {void}\n     * @private\n     */\n    const _keyDownCallback = event => {\n        // Prevent browser keyboard actions\n        if (! self.cancelKeyboardEvent(event)) {\n            if ([\n                'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown',\n                'Space'\n            ].indexOf(event.code) > -1) {\n                event.preventDefault();\n            }\n\n            if (_ctrlKeyPressed) {\n                if (event.code === 'KeyY') {\n                    event.preventDefault();\n                }\n            }\n        }\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.mouseIsPressed = () => _mousePressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.ctrlKeyIsPressed = () => _ctrlKeyPressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.shiftKeyIsPressed = () => _shiftKeyPressed;\n\n    /**\n     * Checks whether a keycode is a number key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isNumberKey = keyCode => (_numberKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is a delete key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isDeleteKey = keyCode => (_deleteKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is an arrow key\n     * @param {string} keyCode\n     * @param {string} direction (any or up/down/left/right)\n     * @return {boolean}\n     */\n    self.isArrowKey = (keyCode, direction = 'any') => {\n        // Check for any arrow key\n        if (direction === 'any') {\n            return (_arrowKeysConcatenated.indexOf(keyCode) > -1);\n        }\n\n        // Check for a specific arrow key\n        return (\n            _arrowKeys[direction]\n            && _arrowKeys[direction].indexOf(keyCode) > -1\n        );\n    };\n}\n","import GridCell from './GridCell';\n\nexport default function GridCellHighlighter() {\n    const self = this;\n\n    /**\n     * A list of currently highlighted cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _highlightedCells = [];\n\n    /**\n     * Add a cell to the list of highlighted cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addHighlightedCell = cell => _highlightedCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getHighlightedCells = () => _highlightedCells;\n\n    /**\n     * Highlight all cells that are related to selected cell(s)\n     * @return {void}\n     */\n    self.highlightRelatedCells = () => {\n        self.dehighlightAllCells();\n\n        let cellNumbers = [];\n\n        // Add the cell numbers of the row, column and box that the cell is in\n        Sudoku.grid.getSelectedCells().forEach(cell => {\n            if (Sudoku.settings.highlightRowState()) {\n                cellNumbers = cellNumbers.concat(cell.getRow().getCellNumbers());\n            }\n\n            if (Sudoku.settings.highlightColumnState()) {\n                cellNumbers = cellNumbers.concat(cell.getColumn().getCellNumbers());\n            }\n\n            if (Sudoku.settings.highlightBoxState()) {\n                cellNumbers = cellNumbers.concat(cell.getBox().getCellNumbers());\n            }\n\n            // See if value highlighting is needed or possible\n            const cellValue = cell.getValue();\n            if (cellValue === null\n                || (! Sudoku.settings.highlightValueState()\n                    && ! Sudoku.settings.highlightPencilMarksState())\n            ) {\n                return;\n            }\n\n            // Add the cell numbers of cells that contain the same digit\n            const sameDigitCellNumbers = Sudoku.grid.getCells()\n                .filter(cell => {\n                    // Filter by cell value\n                    if (Sudoku.settings.highlightValueState() && cell.hasValue(cellValue)) {\n                        return true;\n                    }\n\n                    // Filter by pencil marks\n                    if (Sudoku.settings.highlightPencilMarksState()\n                        && (cell.hasCornerMark(cellValue)\n                            || cell.hasCenterMark(cellValue))\n                    ) {\n                        return true;\n                    }\n                })\n                .map(cell => cell.getCellNumber());\n\n            cellNumbers = cellNumbers.concat(sameDigitCellNumbers);\n        });\n\n        cellNumbers\n            // Remove duplicates\n            .filter((value, index, numbers) => {\n                return numbers.indexOf(value) === index;\n            })\n            // Highlight the cells\n            .forEach(cellNumber => {\n                Sudoku.grid.getCell(cellNumber).setHighlightedState(true);\n            });\n    };\n\n    /**\n     * De-highlight all the highlighted cells\n     * @return {void}\n     */\n    self.dehighlightAllCells = () => {\n        self.getHighlightedCells()\n            .forEach(cell => cell.setHighlightedState(false));\n\n        _highlightedCells = [];\n    };\n}\n","import {trait} from '../functions';\nimport GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport HasGridCells from '../Traits/HasGridCells';\n\nexport default function Grid() {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     * @private\n     */\n    const _gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     * @private\n     */\n    const _gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     * @private\n     */\n    const _gridBoxes = [];\n\n    /**\n     * A list of currently selected cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _selectedCells = [];\n\n    /**\n     * The cell that is last navigated to\n     * @type {GridCell|null}\n     * @private\n     */\n    let _lastNavigatedCell = null;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        _collectCells();\n    };\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     * @private\n     */\n    const _collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            _gridRows.push(new GridRow(i));\n            _gridColumns.push(new GridColumn(i));\n            _gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n            self.addCell(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (_gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridRows[j].addCell(gridCell);\n                    gridCell.setRow(_gridRows[j]);\n                }\n\n                if (_gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(_gridColumns[j]);\n                }\n\n                if (_gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(_gridBoxes[j]);\n                }\n            }\n        }\n\n        self.setLastNavigatedCell(null);\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getSelectedCells = () => _selectedCells;\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    self.addSelectedCell = cell => {\n        _selectedCells.push(cell);\n\n        // Highlight related cells after selecting\n        Sudoku.gridCellHighlighter.highlightRelatedCells();\n    };\n\n    /**\n     * Deselect all the selected cells\n     * @return {void}\n     */\n    self.deselectAllCells = () => {\n        self.getSelectedCells().forEach(cell => cell.setSelectedState(false));\n        _selectedCells = [];\n    };\n\n    /**\n     * @return {GridCell|null}\n     */\n    self.getLastNavigatedCell = () => _lastNavigatedCell;\n\n    /**\n     * @param {GridCell|null} cell\n     * @return {null}\n     */\n    self.setLastNavigatedCell = cell => {\n        // The default last navigated cell is the center one\n        if (cell === null) {\n            _lastNavigatedCell = self.getCell(41);\n        } else {\n            _lastNavigatedCell = cell;\n        }\n    };\n\n    /**\n     * Check for errors in the grid\n     * @return {void}\n     */\n    self.checkForErrors = () => {\n        self.removeAllErrors();\n\n        _gridRows.forEach(row => row.checkDuplicateCellValues());\n        _gridColumns.forEach(column => column.checkDuplicateCellValues());\n        _gridBoxes.forEach(box => box.checkDuplicateCellValues());\n    };\n\n    /**\n     * Remove the error status of all cells\n     * @return {void}\n     */\n    self.removeAllErrors = () => {\n        self.getCells().forEach(cell => cell.setErrorState(false));\n    };\n\n    /**\n     * Show all possible candidates\n     * @return {void}\n     */\n    self.determineCandidates = () => {\n        self.getCells()\n            // Only cells that don't have a value\n            .filter(cell => cell.getValue() === null)\n            .forEach(cell => {\n                // Get corner marks to show\n                const centerMarks = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n                    .filter(number => {\n                        // If the value exists, filter out the number\n                        if (cell.getRow().containsValue(number)) {\n                            return false;\n                        } else if (cell.getColumn().containsValue(number)) {\n                            return false;\n                        } else if (cell.getBox().containsValue(number)) {\n                            return false;\n                        }\n\n                        return true;\n                    });\n\n                // Apply the pencil marks\n                cell.setCenterMarks(centerMarks, true);\n            });\n    };\n\n    /**\n     * Remove all automatically shown candidates\n     * @return {void}\n     */\n    self.removeCandidates = () => {\n        self.getCells().forEach(cell => {\n            // Remove the auto-candidates\n            cell.setCenterMarks([], true);\n\n            // Show the user-filled center marks\n            cell.fillCenterMarks();\n        });\n    };\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () =>\n        // Application version\n        'a1'\n        // Elapsed milliseconds\n        + 't' + Sudoku.clock.getTotalElapsedMs()\n        // Cells state\n        + self.getCells().map(cell => cell.getState()).join('');\n}\n","export default function Clock() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     * @private\n     */\n    let _initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     * @private\n     */\n    let _startMoment = null;\n\n    /**\n     * The element that shows the elapsed time\n     * @type {HTMLSpanElement}\n     * @private\n     */\n    const _timeElement = document.getElementById('elapsed-time');\n\n    /**\n     * The interval for showing the time on screen\n     * @type {number|null}\n     * @private\n     */\n    let _timeInterval = null;\n\n    /**\n     * Indicates whether the clock is paused\n     * @type {boolean}\n     * @private\n     */\n    let _paused = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        self.start();\n        self.showTime();\n    };\n\n    /**\n     * Set the start/unpause moment for calculating elapsed time\n     * @return {void}\n     */\n    self.start = self.unpause = () => {\n        _startMoment = new Date();\n        _paused = false;\n    };\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        _initialMs += self.getElapsedMsSinceStart();\n        _startMoment = null;\n        _paused = true;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isPaused = () => _paused;\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (_startMoment !== null)\n            ? (new Date()).getTime() - _startMoment.getTime()\n            : 0;\n    };\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => _initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n\n    /**\n     * Decide whether to show the elapsed time on screen\n     * @param {boolean} show\n     * @return {void}\n     */\n    self.showTime = (show = true) => {\n        if (show) {\n            _timeInterval = setInterval(() => {\n                _timeElement.innerText = self.getElapsedTimeString();\n            }, 1000);\n        } else {\n            clearInterval(_timeInterval);\n        }\n    };\n}\n","import ChangeDigitCommand from '../Commands/Grid/ChangeDigitCommand';\nimport PauseGameCommand from '../Commands/PauseGameCommand';\n\nexport default function DocumentEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _registerKeyboardEvents();\n        _registerMouseEvents();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerKeyboardEvents = () => {\n        const pauseGameCommand = new PauseGameCommand();\n\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.cancelKeyboardEvent(event)) {\n                return;\n            }\n\n            if (Sudoku.controls.isArrowKey(event.code)) {\n                // Deselect all cells, if the ctrl key is not pressed\n                if (! Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.grid.deselectAllCells();\n                }\n\n                let newCellIndex = Sudoku.grid.getLastNavigatedCell().getCellNumber() - 1;\n                let newCell = null;\n\n                // Then navigate to the intended cell\n                // Wrap around if needed\n                if (Sudoku.controls.isArrowKey(event.code, 'up')) {\n                    if ((newCellIndex -= 9) < 0) {\n                        newCellIndex = 81 + newCellIndex;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'down')) {\n                    if ((newCellIndex += 9) > 80) {\n                        newCellIndex = newCellIndex - 81;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'left')) {\n                    if ((--newCellIndex + 1) % 9 === 0) {\n                        newCellIndex += 9;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'right')) {\n                    if (++newCellIndex % 9 === 0) {\n                        newCellIndex -= 9;\n                    }\n                }\n\n                // Make the new cell the active one\n                newCell = Sudoku.grid.getCell(newCellIndex + 1);\n                newCell.setSelectedState(true);\n                Sudoku.grid.setLastNavigatedCell(newCell);\n            }\n\n            if (Sudoku.controls.isNumberKey(event.code)) {\n                // Set a number value\n                const digit = parseInt(event.key, 10);\n                Sudoku.history.execute(new ChangeDigitCommand(digit));\n            } else if (Sudoku.controls.isDeleteKey(event.code)) {\n                // Remove a value\n                Sudoku.history.execute(new ChangeDigitCommand(null));\n            } else if (event.code === 'KeyZ') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    // Redo or undo an action\n                    if (Sudoku.controls.shiftKeyIsPressed()) {\n                        Sudoku.history.redo();\n                    } else {\n                        Sudoku.history.undo();\n                    }\n                }\n            } else if (event.code === 'KeyY') {\n                // Redo an action\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.history.redo();\n                }\n            } else if (event.code === 'Escape') {\n                (Sudoku.modal.openState() === true)\n                    // Close a modal dialog\n                    ? Sudoku.modal.close()\n                    // Pause / unpause the game\n                    : pauseGameCommand.toggle();\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseEvents = () => {\n        document.addEventListener('mousedown', event => {\n            // Deselect all cells, when clicking outside the grid\n            if (event.target.closest('.grid-cell') === null) {\n                Sudoku.grid.deselectAllCells();\n                Sudoku.gridCellHighlighter.dehighlightAllCells();\n            }\n        });\n    };\n}\n","import ShowClockCommand from '../Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from '../Commands/Settings/AutoErrorCheckingCommand';\nimport HighlightRowCommand from '../Commands/Settings/HighlightRowCommand';\nimport HighlightColumnCommand from '../Commands/Settings/HighlightColumnCommand';\nimport HighlightBoxCommand from '../Commands/Settings/HighlightBoxCommand';\nimport HighlightValueCommand from '../Commands/Settings/HighlightValueCommand';\nimport HighlightPencilMarksCommand from '../Commands/Settings/HighlightPencilMarksCommand';\n\nexport default function SettingsEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableClockToggling();\n        _enableAutoErrorCheckingToggling();\n        _enableHighlightingToggling();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableClockToggling = () => {\n        const showClockCommand = new ShowClockCommand();\n\n        document.getElementById('setting-show-clock')\n            .addEventListener('change', event => {\n                showClockCommand.execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableAutoErrorCheckingToggling = () => {\n        const autoErrorCheckingCommand = new AutoErrorCheckingCommand();\n\n        document.getElementById('setting-auto-error-checking')\n            .addEventListener('change', event => {\n                autoErrorCheckingCommand.execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableHighlightingToggling = () => {\n        const highlightRowCommand = new HighlightRowCommand();\n        const highlightColumnCommand = new HighlightColumnCommand();\n        const highlightBoxCommand = new HighlightBoxCommand();\n        const highlightValueCommand = new HighlightValueCommand();\n        const highlightPencilMarksCommand = new HighlightPencilMarksCommand();\n\n        // Row highlighting\n        document.getElementById('setting-highlight-row')\n            .addEventListener('change', event => {\n                highlightRowCommand.execute(event.target.checked);\n            });\n\n        // Column highlighting\n        document.getElementById('setting-highlight-column')\n            .addEventListener('change', event => {\n                highlightColumnCommand.execute(event.target.checked);\n            });\n\n        // 3x3 box highlighting\n        document.getElementById('setting-highlight-box')\n            .addEventListener('change', event => {\n                highlightBoxCommand.execute(event.target.checked);\n            });\n\n        // Same value highlighting\n        document.getElementById('setting-highlight-value')\n            .addEventListener('change', event => {\n                highlightValueCommand.execute(event.target.checked);\n            });\n\n        // Same value highlighting\n        document.getElementById('setting-highlight-pencil-marks')\n            .addEventListener('change', event => {\n                highlightPencilMarksCommand.execute(event.target.checked);\n            });\n    };\n}\n","import AutoCandidateModeCommand from '../Commands/AutoCandidateModeCommand';\n\nexport default function ActionsEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _registerCheckErrorsEvent();\n        _registerAutoCandidateModeEvent();\n    };\n\n    /**\n     * @private\n     */\n    const _registerCheckErrorsEvent = () => {\n        document.getElementById('check-errors')\n            .addEventListener('click', Sudoku.grid.checkForErrors);\n    };\n\n    /**\n     * @private\n     */\n    const _registerAutoCandidateModeEvent = () => {\n        document.getElementById('setting-auto-candidate')\n            .addEventListener('change', event => {\n                const command = new AutoCandidateModeCommand();\n                command.execute(event.target.checked);\n            });\n    };\n}\n"],"sourceRoot":""}