{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/Utilities/Visitor.js","webpack:///./assets/js/app.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/EntryMode.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Timer.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","GridRow","rowNumber","self","this","gridCells","addCell","cell","push","getCellNumbers","numbers","getCellValues","map","getValue","filter","hasDuplicateCellValues","cellValues","Set","size","length","GridColumn","columnNumber","number","j","GridBox","boxNumber","boxIndex","topLeftNumber","Math","floor","GridCell","cellNumber","gridRow","gridColumn","gridBox","element","isPrefilled","_value","colorNumber","cornerMarks","centerMarks","_isSelected","document","getElementById","Error","Sudoku","controls","registerCell","init","registerEventHandlers","setValue","getElementsByClassName","innerText","getIsSelected","setIsSelected","selected","classList","add","grid","addSelectedCell","remove","setRow","row","setColumn","column","setBox","box","addEventListener","mouseDown","getState","join","Visitor","usesMacOs","navigator","userAgent","match","window","ctrlKeys","arrowKeys","up","down","left","right","numberKeys","entryMode","MODE_VALUE","MODE_CORNER","MODE_CENTER","setMode","gridRows","gridColumns","gridBoxes","selectedCells","collectCells","gridCell","indexOf","timer","initialMs","startMoment","start","Date","pause","getElapsedMsSinceStart","unpause","getTime","getTotalElapsedMs","getElapsedTimeString","totalSeconds","hours","minutes","seconds","toString","padStart"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,SAIjBlC,EAAoBA,EAAoBmC,EAAI,G,sFC5EtC,SAASC,EAAQC,GAC5B,IAAMC,EAAOC,KAMbD,EAAKD,UAAYA,EAMjBC,EAAKE,UAAY,GAOjBF,EAAKG,QAAU,SAAAC,GAAI,OAAIJ,EAAKE,UAAUG,KAAKD,IAM3CJ,EAAKM,eAAiB,WAGlB,IAFA,IAAMC,EAAU,GAEPzC,EAAI,EAAGA,EAAI,GAAIA,IACpByC,EAAQF,KAAKvC,EAA4B,GAAtBkC,EAAKD,UAAY,IAGxC,OAAOQ,GAOXP,EAAKQ,cAAgB,kBAAMR,EAAKE,UAC3BO,KAAI,SAAAL,GAAI,OAAIA,EAAKM,cACjBC,QAAO,SAAA5B,GAAK,OAAc,OAAVA,MAMrBiB,EAAKY,uBAAyB,WAC1B,IAAMC,EAAab,EAAKQ,gBACxB,OAAQ,IAAIM,IAAID,GAAaE,OAASF,EAAWG,QClD1C,SAASC,EAAWC,GAC/B,IAAMlB,EAAOC,KAMbD,EAAKkB,aAAeA,EAMpBlB,EAAKE,UAAY,GAOjBF,EAAKG,QAAU,SAAAC,GAAI,OAAIJ,EAAKE,UAAUG,KAAKD,IAM3CJ,EAAKM,eAAiB,WAClB,IAAMC,EAAU,GACZY,EAASnB,EAAKkB,aAGlBX,EAAQF,KAAKc,GAGb,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,GAAU,EACVZ,EAAQF,KAAKc,GAGjB,OAAOZ,GAOXP,EAAKQ,cAAgB,kBAAMR,EAAKE,UAC3BO,KAAI,SAAAL,GAAI,OAAIA,EAAKM,cACjBC,QAAO,SAAA5B,GAAK,OAAc,OAAVA,MAMrBiB,EAAKY,uBAAyB,WAC1B,IAAMC,EAAab,EAAKQ,gBACxB,OAAQ,IAAIM,IAAID,GAAaE,OAASF,EAAWG,QCxD1C,SAASK,EAAQC,GAC5B,IAAMtB,EAAOC,KAMbD,EAAKsB,UAAYA,EAMjBtB,EAAKE,UAAY,GAOjBF,EAAKG,QAAU,SAAAC,GAAI,OAAIJ,EAAKE,UAAUG,KAAKD,IAM3CJ,EAAKM,eAAiB,WAClB,IAAMiB,EAAWvB,EAAKsB,UAAY,EAK9BE,EAA2B,EAAXD,EACpBC,GAA+B,GAJXC,KAAKC,MAAMH,EAAW,GAM1CC,IAKA,IADA,IAAMjB,EAAU,GACPzC,EAAI,EAAGA,EAAI,EAAGA,IACnByC,EAAQF,KAAKmB,GACbjB,EAAQF,OAAOmB,GACfjB,EAAQF,OAAOmB,GACfA,GAAiB,EAGrB,OAAOjB,GAOXP,EAAKQ,cAAgB,kBAAMR,EAAKE,UAC3BO,KAAI,SAAAL,GAAI,OAAIA,EAAKM,cACjBC,QAAO,SAAA5B,GAAK,OAAc,OAAVA,MAMrBiB,EAAKY,uBAAyB,WAC1B,IAAMC,EAAab,EAAKQ,gBACxB,OAAQ,IAAIM,IAAID,GAAaE,OAASF,EAAWG,QC9D1C,SAASW,EAASC,GAC7B,IAAM5B,EAAOC,KAMbD,EAAK4B,WAAaA,EAMlB5B,EAAK6B,QAAU,KAMf7B,EAAK8B,WAAa,KAMlB9B,EAAK+B,QAAU,KAMf/B,EAAKgC,QAAU,KAMfhC,EAAKiC,aAAc,EAOnBjC,EAAKkC,OAAS,KAMdlC,EAAKmC,YAAc,EAMnBnC,EAAKoC,YAAc,GAMnBpC,EAAKqC,YAAc,GAOnBrC,EAAKsC,aAAc,EAEnB,WAGI,GADAtC,EAAKgC,QAAUO,SAASC,eAAT,oBAAqCxC,EAAK4B,aACpC,OAAjB5B,EAAKgC,QACL,MAAM,IAAIS,MAAJ,0CAA6CzC,EAAK4B,WAAlD,gBAIVc,OAAOC,SAASC,aAAa5C,GARjC,GAeAA,EAAK6C,KAAO,WACR7C,EAAK8C,yBAMT9C,EAAKU,SAAW,kBAAMV,EAAKkC,QAM3BlC,EAAK+C,SAAW,SAAAhE,GACZiB,EAAKkC,OAASnD,EAGdiB,EAAKgC,QAAQgB,uBAAuB,cAAc,GAAGC,UAAYlE,GAMrEiB,EAAKkD,cAAgB,kBAAMlD,EAAKsC,aAMhCtC,EAAKmD,cAAgB,SAAAC,GACbA,GACApD,EAAKgC,QAAQqB,UAAUC,IAAI,YAGrBtD,EAAKkD,iBACPR,OAAOa,KAAKC,gBAAgBxD,IAKhCA,EAAKgC,QAAQqB,UAAUI,OAAO,YAGlCzD,EAAKsC,YAAcc,GAOvBpD,EAAK0D,OAAS,SAAAC,GAAG,OAAI3D,EAAK6B,QAAU8B,GAMpC3D,EAAK4D,UAAY,SAAAC,GAAM,OAAI7D,EAAK8B,WAAa+B,GAM7C7D,EAAK8D,OAAS,SAAAC,GAAG,OAAI/D,EAAK+B,QAAUgC,GAMpC/D,EAAK8C,sBAAwB,WACzB9C,EAAKgC,QAAQgC,iBAAiB,aAAa,WACvChE,EAAKmD,eAAc,MAGvBnD,EAAKgC,QAAQgC,iBAAiB,cAAc,WACpCtB,OAAOC,SAASsB,WAChBjE,EAAKmD,eAAc,OAS/BnD,EAAKkE,SAAW,iBAAM,IAAMlE,EAAK4B,YAC1B5B,EAAKiC,YAAc,IAAM,IAC1B,IAAMjC,EAAKU,WACX,IAAMV,EAAKmC,YACX,KAAOnC,EAAKoC,YAAY+B,KAAK,IAC7B,KAAOnE,EAAKqC,YAAY8B,KAAK,KChLxB,SAASC,K,OAFxBA,EAAQC,UAAY,kBAAkD,OAA3CC,UAAUC,UAAUC,MAAM,cCGrDC,OAAO/B,OAAS,CACZC,SAAU,ICNC,WACX,IAAM3C,EAAOC,KAMbD,EAAKE,UAAY,GAMjBF,EAAKiE,WAAY,EAMbG,EAAQC,YACRrE,EAAK0E,SAAW,CAAC,WAAY,aAE7B1E,EAAK0E,SAAW,CAAC,cAAe,gBAOpC1E,EAAK2E,UAAY,CACbC,GAAI,CAAC,UAAW,QAChBC,KAAM,CAAC,YAAa,QACpBC,KAAM,CAAC,YAAa,QACpBC,MAAO,CAAC,aAAc,SAO1B/E,EAAKgF,WAAa,CACd,SAAU,UAAW,SAAU,UAAW,SAAU,UACpD,SAAU,UAAW,SAAU,UAAW,SAAU,UACpD,SAAU,UAAW,SAAU,UAAW,SAAU,WAOxDhF,EAAK6C,KAAO,WACRN,SAASyB,iBAAiB,aAAa,WACnChE,EAAKiE,WAAY,KAGrB1B,SAASyB,iBAAiB,WAAW,WACjChE,EAAKiE,WAAY,MASzBjE,EAAK4C,aAAe,SAAAxC,GAAI,OAAIJ,EAAKE,UAAUG,KAAKD,KD1DhD6E,UAAW,IEVA,WACX,IAAMjF,EAAOC,KAMbD,EAAKkF,WAAa,QAMlBlF,EAAKmF,YAAc,SAMnBnF,EAAKoF,YAAc,SAMnBpF,EAAKf,KAAOe,EAAKkF,WAOjBlF,EAAKqF,QAAU,SAAApG,GAAI,OAAIe,EAAKf,KAAOA,IFrBnCsE,KAAM,IGNK,WACX,IAAMvD,EAAOC,KAMbD,EAAKE,UAAY,GAMjBF,EAAKsF,SAAW,GAMhBtF,EAAKuF,YAAc,GAMnBvF,EAAKwF,UAAY,GAMjBxF,EAAKyF,cAAgB,GAMrBzF,EAAK0F,aAAe,WAEhB,IAAK,IAAI5H,EAAI,EAAGA,EAAI,GAAIA,IACpBkC,EAAKsF,SAASjF,KAAK,IAAIP,EAAQhC,IAC/BkC,EAAKuF,YAAYlF,KAAK,IAAIY,EAAWnD,IACrCkC,EAAKwF,UAAUnF,KAAK,IAAIgB,EAAQvD,IAKpC,IADA,IAAI6H,EACK7H,EAAI,EAAGA,EAAI,GAAIA,IAAK,EACzB6H,EAAW,IAAIhE,EAAS7D,IACf+E,OAGT7C,EAAKE,UAAUG,KAAKsF,GAIpB,IAAK,IAAIvE,EAAI,EAAGA,EAAI,EAAGA,KACmC,IAAlDpB,EAAKsF,SAASlE,GAAGd,iBAAiBsF,QAAQ9H,KAC1CkC,EAAKsF,SAASlE,GAAGjB,QAAQwF,GACzBA,EAASjC,OAAO1D,EAAKsF,SAASlE,MAGuB,IAArDpB,EAAKuF,YAAYnE,GAAGd,iBAAiBsF,QAAQ9H,KAC7CkC,EAAKuF,YAAYnE,GAAGjB,QAAQwF,GAC5BA,EAAS/B,UAAU5D,EAAKuF,YAAYnE,MAGe,IAAnDpB,EAAKwF,UAAUpE,GAAGd,iBAAiBsF,QAAQ9H,KAC3CkC,EAAKwF,UAAUpE,GAAGjB,QAAQwF,GAC1BA,EAAS7B,OAAO9D,EAAKwF,UAAUpE,OAW/CpB,EAAKwD,gBAAkB,SAAApD,GAAI,OAAIJ,EAAKyF,cAAcpF,KAAKD,IAMvDJ,EAAKkE,SAAW,iBAAM,OAASlE,EAAKE,UAAUO,KAAI,SAAAL,GAAI,OAAIA,EAAK8D,cAAYC,KAAK,MH/EhF0B,MAAO,IIZI,WACX,IAAM7F,EAAOC,KAObD,EAAK8F,UAAY,EAMjB9F,EAAK+F,YAAc,KAMnB/F,EAAKgG,MAAQ,kBAAMhG,EAAK+F,YAAc,IAAIE,MAM1CjG,EAAKkG,MAAQ,WAETlG,EAAK8F,WAAa9F,EAAKmG,yBACvBnG,EAAK+F,YAAc,MAOvB/F,EAAKoG,QAAU,kBAAMpG,EAAKgG,SAM1BhG,EAAKmG,uBAAyB,WAC1B,OAA6B,OAArBnG,EAAK+F,aACN,IAAIE,MAAQI,UAAYrG,EAAK+F,YAAYM,UAC1C,GAOVrG,EAAKsG,kBAAoB,kBAAMtG,EAAK8F,UAAY9F,EAAKmG,0BAOrDnG,EAAKuG,qBAAuB,WACxB,IAAMC,EAAe/E,KAAKC,MAAM1B,EAAKsG,oBAAsB,KAGrDG,EAAQhF,KAAKC,MAAM8E,EAAe,MACpCE,EAAUjF,KAAKC,MAAO8E,EAAe,KAAQ,IAE3CG,GAAWH,EAAe,IAAII,SAAS,IAAIC,SAAS,EAAG,KAG7D,OAAIJ,EAAQ,GACRC,EAAUA,EAAQE,WAAWC,SAAS,EAAG,KACzC,UAAUJ,EAAV,YAAmBC,EAAnB,YAA8BC,IAGlC,UAAUD,EAAV,YAAqBC,MJ3D7BjE,OAAOmD,MAAMG,QACbtD,OAAOC,SAASE,OAChBH,OAAOa,KAAKmC","file":"app_f15066a12a7fe996ccf8.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import GridCell from './GridCell';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     */\n    self.rowNumber = rowNumber;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + ((self.rowNumber - 1) * 9));\n        }\n\n        return numbers;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.hasDuplicateCellValues = () => {\n        const cellValues = self.getCellValues();\n        return (new Set(cellValues)).size !== cellValues.length;\n    };\n}\n","import GridCell from './GridCell';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     */\n    self.columnNumber = columnNumber;\n\n    /**\n     * Cells in the column\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the column\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = self.columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 9 to the number 8 times\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.hasDuplicateCellValues = () => {\n        const cellValues = self.getCellValues();\n        return (new Set(cellValues)).size !== cellValues.length;\n    };\n}\n","import GridCell from './GridCell';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     */\n    self.boxNumber = boxNumber;\n\n    /**\n     * Cells in the box\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the box\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = self.boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.hasDuplicateCellValues = () => {\n        const cellValues = self.getCellValues();\n        return (new Set(cellValues)).size !== cellValues.length;\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     */\n    self.cellNumber = cellNumber;\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     */\n    self.gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     */\n    self.gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     */\n    self.gridBox = null;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLElement|null}\n     */\n    self.element = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     */\n    self.isPrefilled = false;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    self._value = null;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     */\n    self.colorNumber = 1;\n\n    /**\n     * The pencil mark values (corner mode)\n     * @type {number[]}\n     */\n    self.cornerMarks = [];\n\n    /**\n     * The pencil mark values (center mode)\n     * @type {number[]}\n     */\n    self.centerMarks = [];\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    self._isSelected = false;\n\n    (() => {\n        // The HTML cell element\n        self.element = document.getElementById(`grid-cell-${self.cellNumber}`);\n        if (self.element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.cellNumber}' not found`);\n        }\n\n        // Register self cell to the controls object\n        Sudoku.controls.registerCell(self);\n    })();\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        self.registerEventHandlers();\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => self._value;\n\n    /**\n     * @param {number} value\n     * @return {void}\n     */\n    self.setValue = value => {\n        self._value = value;\n\n        // Show the value on screen\n        self.element.getElementsByClassName('cell-value')[0].innerText = value;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.getIsSelected = () => self._isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setIsSelected = selected => {\n        if (selected) {\n            self.element.classList.add('selected');\n\n            // Don't add duplicates to the list of selected cells\n            if (! self.getIsSelected()) {\n                Sudoku.grid.addSelectedCell(self);\n            }\n        }\n\n        else {\n            self.element.classList.remove('selected');\n        }\n\n        self._isSelected = selected;\n    };\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => self.gridRow = row;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => self.gridColumn = column;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => self.gridBox = box;\n\n    /**\n     * Handle events that happen on/for the cell\n     * @return {void}\n     */\n    self.registerEventHandlers = () => {\n        self.element.addEventListener('mousedown', () => {\n            self.setIsSelected(true);\n        });\n\n        self.element.addEventListener('mouseenter', () => {\n            if (Sudoku.controls.mouseDown) {\n                self.setIsSelected(true);\n            }\n        });\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.cellNumber\n        + (self.isPrefilled ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.colorNumber\n        + 'cr' + self.cornerMarks.join('')\n        + 'cn' + self.centerMarks.join('');\n}\n","/**\n * See if the visitor's OS is macOS\n * @return {boolean}\n * @static\n */\nVisitor.usesMacOs = () => (navigator.userAgent.match(/Macintosh/) !== null);\n\nexport default function Visitor() {\n    const self = this;\n}\n","'use strict';\n\nimport Grid from './Grid/Grid';\nimport Controls from './Controls';\nimport EntryMode from './EntryMode';\nimport Timer from './Timer';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    controls: new Controls(),\n    entryMode: new EntryMode(),\n    grid: new Grid(),\n    timer: new Timer(),\n};\n\nSudoku.timer.start();\nSudoku.controls.init();\nSudoku.grid.collectCells();\n\n/*\nconst LZString = require('lz-string');\nconst state = JSON.stringify(Sudoku.grid.getState());\n// Pairs of 2-digits (cell number) and value (1 number)\n// const state = '038149156382416811295104457093378472567629123781806';\n// 81 numbers, representing every cell value (0 = empty)\n// const state = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nconst c1 = LZString.compress(state);\nconst c2 = LZString.compressToEncodedURIComponent(state);\n\nconsole.log(\n    state.length,\n    state,\n    c1.length,\n    c1,\n    c2.length,\n    c2\n);\n//*/\n","import GridCell from './Grid/GridCell';\nimport Visitor from './Utilities/Visitor';\n\nexport default function Controls() {\n    const self = this;\n\n    /**\n     * The collection of grid cells\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Indicates whether a mouse button is currently held down\n     * @type {boolean}\n     */\n    self.mouseDown = false;\n\n    /**\n     * Ctrl/Cmd key codes for Windows/Linux/macOS\n     * @type {string[]}\n     */\n    if (Visitor.usesMacOs()) {\n        self.ctrlKeys = ['MetaLeft', 'MetaRight'];\n    } else {\n        self.ctrlKeys = ['ControlLeft', 'ControlRight'];\n    }\n\n    /**\n     * Arrow key codes\n     * @type {Object}\n     */\n    self.arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Number key codes\n     * @type {string[]}\n     */\n    self.numberKeys = [\n        'Digit1', 'Numpad1', 'Digit2', 'Numpad2', 'Digit3', 'Numpad3',\n        'Digit4', 'Numpad4', 'Digit5', 'Numpad5', 'Digit6', 'Numpad6',\n        'Digit7', 'Numpad7', 'Digit8', 'Numpad8', 'Digit9', 'Numpad9',\n    ];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => {\n            self.mouseDown = true;\n        });\n\n        document.addEventListener('mouseup', () => {\n            self.mouseDown = false;\n        });\n    };\n\n    /**\n     * Add a grid cell to the collection\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.registerCell = cell => self.gridCells.push(cell);\n}\n","export default function EntryMode() {\n    const self = this;\n\n    /**\n     * Normal value entry\n     * @type {string}\n     */\n    self.MODE_VALUE = 'value';\n\n    /**\n     * Corner pencil mark entry\n     * @type {string}\n     */\n    self.MODE_CORNER = 'corner';\n\n    /**\n     * Center pencil mark entry\n     * @type {string}\n     */\n    self.MODE_CENTER = 'center';\n\n    /**\n     * The current mode\n     * @type {string}\n     */\n    self.mode = self.MODE_VALUE;\n\n    /**\n     * Change the mode\n     * @param {string} mode\n     * @return {string}\n     */\n    self.setMode = mode => self.mode = mode;\n}\n","import GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\n\nexport default function Grid() {\n    const self = this;\n    \n    /**\n     * All the cells in the grid\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     */\n    self.gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     */\n    self.gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     */\n    self.gridBoxes = [];\n\n    /**\n     * A list of currently selected (highlighted) cells\n     * @type {GridCell[]}\n     */\n    self.selectedCells = [];\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     */\n    self.collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            self.gridRows.push(new GridRow(i));\n            self.gridColumns.push(new GridColumn(i));\n            self.gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n\n            // Add the cell\n            self.gridCells.push(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (self.gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    self.gridRows[j].addCell(gridCell);\n                    gridCell.setRow(self.gridRows[j]);\n                }\n\n                if (self.gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    self.gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(self.gridColumns[j]);\n                }\n\n                if (self.gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    self.gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(self.gridBoxes[j]);\n                }\n            }\n        }\n    };\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addSelectedCell = cell => self.selectedCells.push(cell);\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () => 'ver1' + self.gridCells.map(cell => cell.getState()).join('');\n}\n","export default function Timer() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     */\n    self.initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     */\n    self.startMoment = null;\n\n    /**\n     * Set the start moment for calculating elapsed time\n     * @return {Date}\n     */\n    self.start = () => self.startMoment = new Date();\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        self.initialMs += self.getElapsedMsSinceStart();\n        self.startMoment = null;\n    };\n\n    /**\n     * Resume the timer after pausing\n     * @return {Date}\n     */\n    self.unpause = () => self.start();\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (self.startMoment !== null)\n            ? (new Date()).getTime() - self.startMoment.getTime()\n            : 0;\n    }\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => self.initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n}\n"],"sourceRoot":""}