{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/Utilities/Visitor.js","webpack:///./assets/js/InputMode.js","webpack:///./assets/js/functions.js","webpack:///./assets/js/Traits/HasGridCells.js","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/EventHandlers/GridCellEventHandler.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/Commands/Command.js","webpack:///./assets/js/Commands/UndoableCommand.js","webpack:///./assets/js/Commands/Grid/ChangeDigitCommand.js","webpack:///./assets/js/Commands/TogglableCommand.js","webpack:///./assets/js/Commands/Modal/CloseAllModalsCommand.js","webpack:///./assets/js/Modal.js","webpack:///./assets/js/Commands/Modal/OpenModalCommand.js","webpack:///./assets/js/Commands/PauseGameCommand.js","webpack:///./assets/js/Commands/Settings/ShowClockCommand.js","webpack:///./assets/js/Commands/Settings/AutoErrorCheckingCommand.js","webpack:///./assets/js/app.js","webpack:///./assets/js/Settings.js","webpack:///./assets/js/Commands/CommandHistory.js","webpack:///./assets/js/Meta.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Clock.js","webpack:///./assets/js/EventHandlers/DocumentEventHandler.js","webpack:///./assets/js/EventHandlers/SettingsEventHandler.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visitor","InputMode","self","this","_mode","MODE_VALUE","_radioButtons","document","getElementsByName","init","selectCurrentRadioButton","registerEventListeners","forEach","radioButton","parseInt","getMode","checked","addEventListener","setMode","event","code","changeMode","MODE_CORNER","MODE_CENTER","toLowerCase","Error","extend","constructor","baseConstructor","trait","instance","traitConstructor","thing","traitInstance","HasGridCells","gridCells","addCell","cell","push","getCells","getCell","number","find","getCellNumber","undefined","getCellValues","map","getValue","filter","checkDuplicateCellValues","cellValues","cellValue","cells","length","setErrorState","GridRow","rowNumber","_rowNumber","getCellNumbers","numbers","rowIndex","GridColumn","columnNumber","_columnNumber","j","GridBox","boxNumber","_boxNumber","boxIndex","topLeftNumber","Math","floor","GridCellEventHandler","gridCell","_gridCell","register","registerMouseDownEvent","registerMouseEnterEvent","registerMouseUpEvent","getElement","Sudoku","controls","ctrlKeyIsPressed","setSelectedState","isSelected","grid","deselectAllCells","mouseIsPressed","setLastNavigatedCell","GridCell","cellNumber","_cellNumber","_element","_gridRow","_gridColumn","_gridBox","_value","_cornerMarks","_centerMarks","_isSelected","_isHighlighted","getElementById","isPrefilled","getColorNumber","setDigit","digit","inputMode","setValue","setCornerMark","setCenterMark","setCornerMarks","setCenterMarks","showMarks","getElementsByClassName","innerText","highlightRelatedCells","hasValue","getCornerMarks","cornerMarks","existingIndex","indexOf","splice","fillCornerMarks","allElements","sort","a","b","item","index","toString","hasCornerMark","getCenterMarks","centerMarks","fillCenterMarks","join","hasCenterMark","show","toggleMethod","classList","selected","addSelectedCell","isHighlighted","setHighlightedState","highlighted","addHighlightedCell","getRow","setRow","row","getColumn","setColumn","column","getBox","setBox","box","on","getState","Command","execute","UndoableCommand","undo","ChangeDigitCommand","currentMode","state","_digit","_cells","getSelectedCells","_inputMode","_cellsState","settings","autoErrorCheckingState","removeAllErrors","checkForErrors","TogglableCommand","toggle","CloseAllModalsCommand","_pauseGameCommand","PauseGameCommand","modal","showBackdrop","modals","remove","openState","Modal","_backdropElement","_openState","_currentModalId","_closeCommand","_enableOpening","_enableClosing","currentModalId","modalId","close","openButtons","OpenModalCommand","target","dataset","closeButtons","_modalId","_modalElement","PAUSE_MODAL_ID","add","clock","pause","unpause","ShowClockCommand","clockState","_clockElement","_toggleCheckbox","AutoErrorCheckingCommand","_errorCheckingButton","usesMacOs","navigator","userAgent","match","window","_clockState","_autoErrorCheckingState","localStorage","getItem","setItem","JSON","stringify","_fromLocalStorage","_applySettings","parse","autoErrorChecking","_toLocalStorage","history","_past","_future","command","clearFuture","pop","redo","meta","titleElement","getElementsByTagName","appName","titleField","descriptionField","title","enableTextFields","titleCallback","trim","descriptionCallback","_mousePressed","_ctrlKeyPressed","_shiftKeyPressed","_arrowKeys","up","down","left","right","_arrowKeysConcatenated","concat","_numberKeys","_deleteKeys","registerClickDisabling","keyPressCallback","closest","preventDefault","cancelKeyboardEvent","nodeName","metaKey","ctrlKey","shiftKey","shiftKeyIsPressed","isNumberKey","keyCode","isDeleteKey","isArrowKey","direction","_gridRows","_gridColumns","_gridBoxes","_selectedCells","_highlightedCells","_lastNavigatedCell","collectCells","getHighlightedCells","dehighlightAllCells","cellNumbers","sameDigitCellNumbers","getLastNavigatedCell","getTotalElapsedMs","_initialMs","_startMoment","_timeElement","_timeInterval","_paused","start","showTime","Date","getElapsedMsSinceStart","isPaused","getTime","getElapsedTimeString","totalSeconds","hours","minutes","seconds","padStart","setInterval","clearInterval","documentEventHandler","registerKeyboardNavigation","registerValueSetting","registerCellsDeselecting","newCellIndex","newCell","settingsEventHandler","_showClockCommand","_autoErrorCheckingCommand","_enableClockToggling","_enableAutoErrorCheckingToggling","_enableHighlightingToggling"],"mappings":"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","file":"app_1be6831d8d9ac2b07b16.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Indicates whether the visitor's OS is macOS\n * @type {boolean}\n * @static\n */\nVisitor.usesMacOs = (navigator.userAgent.toLowerCase().match(/macintosh/) !== null);\n\nexport default function Visitor() {\n    const self = this;\n}\n","/**\n * Several input modes, to be used as constants\n * @type {number}\n */\nInputMode.MODE_VALUE = 1;\nInputMode.MODE_CORNER = 2;\nInputMode.MODE_CENTER = 3;\n\nexport default function InputMode() {\n    const self = this;\n\n    /**\n     * The current mode\n     * @type {number}\n     * @private\n     */\n    let _mode = InputMode.MODE_VALUE;\n\n    /**\n     * The radio buttons that can change the mode\n     * @type {NodeListOf<HTMLElement>}\n     * @private\n     */\n    const _radioButtons = document.getElementsByName('input_mode');\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        selectCurrentRadioButton();\n        registerEventListeners();\n    };\n\n    /**\n     * Make the radio button of the current input mode checked\n     * @return {void}\n     */\n    const selectCurrentRadioButton = () => {\n        _radioButtons.forEach(radioButton => {\n            if (parseInt(radioButton.value, 10) === self.getMode()) {\n                radioButton.checked = true;\n            }\n        });\n    };\n\n    /**\n     * Enable toggling the mode with radio buttons\n     * @return {void}\n     */\n    const registerEventListeners = () => {\n        _radioButtons.forEach(radioButton => {\n            radioButton.addEventListener('change', () => {\n                self.setMode(parseInt(radioButton.value, 10));\n            });\n        });\n\n        document.addEventListener('keydown', event => {\n            switch (event.code) {\n                case 'Space':\n                    self.changeMode();\n                    break;\n                case 'KeyI':\n                    self.setMode(InputMode.MODE_VALUE);\n                    break;\n                case 'KeyO':\n                    self.setMode(InputMode.MODE_CORNER);\n                    break;\n                case 'KeyP':\n                    self.setMode(InputMode.MODE_CENTER);\n                    break;\n            }\n\n            selectCurrentRadioButton();\n        });\n    };\n\n    /**\n     * @param {number} mode\n     * @return {void}\n     */\n    self.setMode = mode => {\n        if ((typeof mode).toLowerCase() !== 'number') {\n            throw new Error(`Expected a number, got ${typeof mode}`);\n        }\n\n        if (mode < InputMode.MODE_VALUE || mode > InputMode.MODE_CENTER) {\n            throw new Error('Invalid input mode number given, please use InputMode constants');\n        }\n\n        _mode = mode;\n    };\n\n    /**\n     * Change the mode number incrementally\n     * @return {void}\n     */\n    self.changeMode = () => {\n        // Increase the mode number\n        // Wrap around, when max number is reached\n        if (++_mode > InputMode.MODE_CENTER) {\n            _mode = InputMode.MODE_VALUE;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    self.getMode = () => _mode;\n}\n","/**\n * Extend a base constructor\n * @param {function} constructor\n * @param {function} baseConstructor\n * @return {void}\n */\nexport function extend(constructor, baseConstructor) {\n    // Check the constructor types\n    if ((typeof constructor).toLowerCase() !== 'function') {\n        throw new Error(`Constructor needs to be a function, got ${typeof constructor} instead`);\n    }\n\n    if ((typeof baseConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Base constructor needs to be a function, got ${typeof baseConstructor} instead`);\n    }\n\n    constructor.prototype = new baseConstructor();\n    constructor.prototype.constructor = constructor;\n};\n\n/**\n * Add code from a trait to an object\n * @param {object} instance\n * @param {function} traitConstructor\n * @return {void}\n */\nexport function trait(instance, traitConstructor) {\n    // Check the instance type\n    if ((typeof instance).toLowerCase() !== 'object') {\n        throw new Error(`Instance needs to be an object, got ${typeof instance} instead`);\n    }\n\n    // Check the constructor type\n    if ((typeof traitConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Trait constructor needs to be a function, got ${typeof traitConstructor} instead`);\n    }\n\n    // Create a new instance of the trait\n    const traitInstance = new traitConstructor();\n    // A property or method of the trait\n    let thing;\n\n    // Set the properties/methods in the calling object\n    for (thing in traitInstance) {\n        instance[thing] = traitInstance[thing];\n    }\n};\n","import GridCell from '../Grid/GridCell';\n\nexport default function HasGridCells() {\n    const self = this;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getCells = () => self.gridCells;\n\n    /**\n     * Get a cell by its cell number\n     * @param {number} number A 1-based cell number\n     * @return {GridCell|null}\n     */\n    self.getCell = number => {\n        const cell = self.gridCells.find(cell => cell.getCellNumber() === number);\n        return (cell === undefined) ? null : cell;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.checkDuplicateCellValues = () => {\n        // Pairs of value:gridCell[]\n        // Arrays of cells that have a certain value\n        const cellValues = {};\n\n        self.gridCells.forEach(cell => {\n            // Get the filled in value of the cell\n            const cellValue = cell.getValue();\n\n            // A value is needed for checking\n            if (cellValue === null) {\n                return;\n            }\n\n            // Get the cells that have that value an add the cell\n            const cells = cellValues[cellValue] || [];\n            cells.push(cell);\n            cellValues[cellValue] = cells;\n\n            // Set an error status on all duplicate cells, if there are any\n            if (cells.length > 1) {\n                cells.forEach(cell => cell.setErrorState(true));\n            }\n        });\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _rowNumber = rowNumber;\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        const rowIndex = _rowNumber - 1;\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + (rowIndex * 9));\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _columnNumber = columnNumber;\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = _columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 8 numbers, each incremented by 9\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     * @private\n     */\n    let _boxNumber = boxNumber;\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = _boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n}\n","import GridCell from '../Grid/GridCell';\n\n/**\n * @param {GridCell} gridCell\n * @constructor\n */\nexport default function GridCellEventHandler(gridCell) {\n    const self = this;\n\n    /**\n     * The cell to register event handlers for\n     * @type {GridCell}\n     * @private\n     */\n    const _gridCell = gridCell;\n\n    /**\n     * Register event handlers for a grid cell\n     * @return {void}\n     */\n    self.register = () => {\n        registerMouseDownEvent();\n        registerMouseEnterEvent();\n        registerMouseUpEvent();\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseDownEvent = () => {\n        _gridCell.getElement().addEventListener('mousedown', () => {\n            if (Sudoku.controls.ctrlKeyIsPressed()) {\n                // Toggle the selected status when clicked, if the ctrl key is pressed\n                _gridCell.setSelectedState(! _gridCell.isSelected());\n            } else {\n                // Select only this cell, if the ctrl key is not pressed\n                Sudoku.grid.deselectAllCells();\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseEnterEvent = () => {\n        _gridCell.getElement().addEventListener('mouseenter', () => {\n            // Allow multiple cells to be selected\n            if (Sudoku.controls.mouseIsPressed()) {\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseUpEvent = () => {\n        // On mouse up, this is the last selected cell\n        _gridCell.getElement().addEventListener(\n            'mouseup',\n            () => Sudoku.grid.setLastNavigatedCell(_gridCell)\n        );\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport GridCellEventHandler from '../EventHandlers/GridCellEventHandler';\nimport InputMode from '../InputMode';\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     * @private\n     */\n    const _cellNumber = cellNumber;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLLIElement|null}\n     * @private\n     */\n    let _element = null;\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     * @private\n     */\n    let _gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     * @private\n     */\n    let _gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     * @private\n     */\n    let _gridBox = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     * @private\n     */\n    let _isPrefilled = false;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     * @private\n     */\n    let _colorNumber = 1;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    let _value = null;\n\n    /**\n     * The pencil mark values (corner mode)\n     * @type {number[]}\n     * @private\n     */\n    let _cornerMarks = [];\n\n    /**\n     * The pencil mark values (center mode)\n     * @type {number[]}\n     * @private\n     */\n    let _centerMarks = [];\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    let _isSelected = false;\n\n    /**\n     * Whether the cell is currently highlighted\n     * @type {boolean}\n     * @private\n     */\n    let _isHighlighted = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        // Get the HTML cell element\n        _element = document.getElementById(`grid-cell-${self.getCellNumber()}`);\n        if (_element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.getCellNumber()}' not found`);\n        }\n\n        // Register event handlers\n        const eventHandler = new GridCellEventHandler(self);\n        eventHandler.register();\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getCellNumber = () => _cellNumber;\n\n    /**\n     * @return {HTMLLIElement|null}\n     */\n    self.getElement = () => _element;\n\n    /**\n     * @return {boolean}\n     */\n    self.isPrefilled = () => _isPrefilled;\n\n    /**\n     * @return {number}\n     */\n    self.getColorNumber = () => _colorNumber;\n\n    /**\n     * Wrapper for value, corner-marks and center-marks setting\n     * @param {number|null} digit\n     * @param {number|null} mode The input mode, uses current mode by default\n     * @return {void}\n     * @see InputMode for the mode constants\n     */\n    self.setDigit = (digit, mode = null) => {\n        // Use the current input mode, if null\n        if (mode === null) {\n            mode = Sudoku.inputMode.getMode();\n        }\n\n        // Null means deleting\n        if (digit === null) {\n            // Remove the marks only if no value is filled in\n            if (self.getValue() === null) {\n                self.setCornerMarks([]);\n                self.setCenterMarks([]);\n            } else {\n                self.setValue(null);\n            }\n\n            return;\n        }\n\n        switch (mode) {\n            case InputMode.MODE_VALUE:\n                self.setValue(digit);\n                break;\n            case InputMode.MODE_CORNER:\n                self.setCornerMark(digit);\n                break;\n            case InputMode.MODE_CENTER:\n                self.setCenterMark(digit);\n                break;\n        }\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => _value;\n\n    /**\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setValue = digit => {\n        // Remove the value, if the same digit is entered\n        if (digit === self.getValue()) {\n            digit = null;\n        }\n\n        // Show or hide the pencil marks\n        showMarks(digit === null);\n\n        // Show the value on screen\n        self.getElement().getElementsByClassName('cell-value')[0].innerText = digit;\n\n        _value = digit;\n\n        // Highlight other cells, also when the value is removed\n        Sudoku.grid.highlightRelatedCells();\n    };\n\n    /**\n     * Check if the cell has a value\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasValue = (digit = null) => {\n        // Check if the cell has any value\n        if (digit === null) {\n            return (self.getValue() !== null);\n        }\n\n        // Or check for a specific value\n        return (self.getValue() === digit);\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCornerMarks = () => _cornerMarks;\n\n    /**\n     * Add or remove a digit from the corner marks\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setCornerMark = digit => {\n        // Don't set a corner mark, if a value is filled in\n        if (self.getValue() !== null) {\n            return;\n        }\n\n        const cornerMarks = self.getCornerMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = cornerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            cornerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && cornerMarks.length < 8) {\n                cornerMarks.push(digit);\n            }\n        }\n\n        self.setCornerMarks(cornerMarks);\n    };\n\n    /**\n     * @param {number[]} cornerMarks\n     * @return {number[]}\n     */\n    self.setCornerMarks = cornerMarks => {\n        _cornerMarks = cornerMarks;\n        fillCornerMarks();\n    };\n\n    /**\n     * Fill corner marks in the cell\n     * @return {void}\n     */\n    const fillCornerMarks = () => {\n        // Clear all corner marks first\n        const allElements = self.getElement().getElementsByClassName('corner-mark');\n        for (let i = 0; i < allElements.length; i++) {\n            allElements[i].innerText = null;\n        }\n\n        // Show the corner marks\n        self.getCornerMarks()\n            .sort((a, b) => a - b)\n            .forEach((item, index) => {\n                document.getElementById(`corner-mark-${self.getCellNumber()}-${index + 1}`)\n                    .innerText = item.toString(10);\n            });\n    };\n\n    /**\n     * Check if the cell has a corner mark\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasCornerMark = (digit = null) => {\n        // Check if the cell has any corner mark\n        if (digit === null) {\n            return (self.getCornerMarks().length > 0);\n        }\n\n        // Or check for a specific value\n        return (self.getCornerMarks().indexOf(digit) > -1);\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCenterMarks = () => _centerMarks;\n\n    /**\n     * Add or remove a digit from the center marks\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setCenterMark = digit => {\n        // Don't set a center mark, if a value is filled in\n        if (self.getValue() !== null) {\n            return;\n        }\n\n        const centerMarks = self.getCenterMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = centerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            centerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && centerMarks.length < 5) {\n                centerMarks.push(digit);\n            }\n        }\n\n        self.setCenterMarks(centerMarks);\n    };\n\n    /**\n     * @param {number[]} centerMarks\n     * @return {number[]}\n     */\n    self.setCenterMarks = centerMarks => {\n        _centerMarks = centerMarks;\n        fillCenterMarks();\n    };\n\n    /**\n     * Fill corner marks in the cell\n     * @return {void}\n     */\n    const fillCenterMarks = () => {\n        const centerMarks = self.getCenterMarks().sort((a, b) => a - b).join('');\n        self.getElement().getElementsByClassName('center-marks')[0].innerText = centerMarks;\n    };\n\n    /**\n     * Check if the cell has a center mark\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasCenterMark = (digit = null) => {\n        // Check if the cell has any center mark\n        if (digit === null) {\n            return (self.getCenterMarks().length > 0);\n        }\n\n        // Or check for a specific value\n        return (self.getCenterMarks().indexOf(digit) > -1);\n    };\n\n    /**\n     * Toggle the visibility of the pencil marks\n     * @param {boolean} show\n     */\n    const showMarks = show => {\n        const toggleMethod = show ? 'remove' : 'add';\n\n        // Toggle the corner marks\n        for (let i = 1; i < 9; i++) {\n            document.getElementById(`corner-mark-${self.getCellNumber()}-${i}`)\n                .classList[toggleMethod]('hide');\n        }\n\n        // Toggle the center marks\n        self.getElement().getElementsByClassName('center-marks')[0]\n            .classList[toggleMethod]('hide');\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isSelected = () => _isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setSelectedState = selected => {\n        const toggleMethod = selected ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-selected');\n\n        // Don't add duplicates to the list\n        if (selected && ! self.isSelected()) {\n            Sudoku.grid.addSelectedCell(self);\n        }\n\n        _isSelected = selected;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isHighlighted = () => _isHighlighted;\n\n    /**\n     * @param {boolean} highlighted\n     * @return {void}\n     */\n    self.setHighlightedState = highlighted => {\n        const toggleMethod = highlighted ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-highlighted');\n\n        // Don't add duplicates to the list\n        if (highlighted && ! self.isHighlighted()) {\n            Sudoku.grid.addHighlightedCell(self);\n        }\n\n        _isHighlighted = highlighted;\n    };\n\n    /**\n     * @return {GridRow|null}\n     */\n    self.getRow = () => _gridRow;\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => _gridRow = row;\n\n    /**\n     * @return {GridColumn|null}\n     */\n    self.getColumn = () => _gridColumn;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => _gridColumn = column;\n\n    /**\n     * @return {GridBox|null}\n     */\n    self.getBox = () => _gridBox;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => _gridBox = box;\n\n    /**\n     * Set the error status of the element\n     * @param {boolean} on\n     * @return {void}\n     */\n    self.setErrorState = on => {\n        const toggleMethod = on ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('has-error');\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.getCellNumber()\n        + (self.isPrefilled() ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.getColorNumber()\n        + 'cr' + self.getCornerMarks().join('')\n        + 'cn' + self.getCenterMarks().join('');\n}\n","export default function Command() {\n    const self = this;\n\n    /**\n     * Execute the command\n     * @return {void}\n     */\n    self.execute = () => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../functions';\nimport Command from './Command';\n\nextend(UndoableCommand, Command);\n\nexport default function UndoableCommand() {\n    const self = this;\n    Command.call(self);\n\n    /**\n     * Undo the command\n     * @return {void}\n     */\n    self.undo = () => {\n        throw new Error(\"'undo' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../../functions';\nimport UndoableCommand from '../UndoableCommand';\nimport InputMode from '../../InputMode';\n\nextend(ChangeDigitCommand, UndoableCommand);\n\n/**\n * @param {number|null} digit\n * @constructor\n */\nexport default function ChangeDigitCommand(digit) {\n    const self = this;\n    UndoableCommand.call(self);\n\n    /**\n     * The digit to apply to cell(s)\n     * @type {number|null}\n     * @private\n     */\n    const _digit = digit;\n\n    /**\n     * The cells to apply the digit to\n     * @type {GridCell[]}\n     * @private\n     */\n    const _cells = Sudoku.grid.getSelectedCells();\n\n    /**\n     * The input mode for the digit\n     * @type {number}\n     * @private\n     */\n    const _inputMode = (() => {\n        const currentMode = Sudoku.inputMode.getMode();\n\n        // When more than 1 cell is selected,\n        // switch to pencil mark notation if the input mode is 'value'\n        return (_cells.length > 1 && currentMode === InputMode.MODE_VALUE)\n            ? InputMode.MODE_CORNER\n            : currentMode;\n    })();\n\n    /**\n     * Contains the state of cells, before changing the digit\n     * @type {object}\n     * @private\n     */\n    const _cellsState = (() => {\n        // Pairs of cellNumber:{value, cornerMarks, centerMarks}\n        const state = {};\n\n        // Collect the state of all cells\n        _cells.forEach(cell => {\n            state[cell.getCellNumber()] = {\n                value: cell.getValue(),\n                // Copy the array, because they go by reference\n                cornerMarks: cell.getCornerMarks().map(item => item),\n                centerMarks: cell.getCenterMarks().map(item => item),\n            };\n        });\n\n        return state;\n    })();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        if (Sudoku.settings.autoErrorCheckingState()) {\n            Sudoku.grid.removeAllErrors();\n        }\n\n        _cells.forEach(cell => cell.setDigit(_digit, _inputMode));\n\n        if (Sudoku.settings.autoErrorCheckingState()) {\n            Sudoku.grid.checkForErrors();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    self.undo = () => {\n        if (Sudoku.settings.autoErrorCheckingState()) {\n            Sudoku.grid.removeAllErrors();\n        }\n\n        // Apply the previous values to the cell(s)\n        _cells.forEach(cell => {\n            const state = _cellsState[cell.getCellNumber()];\n\n            cell.setValue(state.value);\n            // Copy the array, because they go by reference\n            cell.setCornerMarks(state.cornerMarks.map(item => item));\n            cell.setCenterMarks(state.centerMarks.map(item => item));\n        });\n\n        if (Sudoku.settings.autoErrorCheckingState()) {\n            Sudoku.grid.checkForErrors();\n        }\n    };\n}\n","import {extend} from '../functions';\nimport Command from './Command';\n\nextend(TogglableCommand, Command);\n\nexport default function TogglableCommand() {\n    const self = this;\n    Command.call(self);\n\n    /**\n     * The current state of the command\n     * @type {boolean|function|null}\n     * @private\n     */\n    self.state = null;\n\n    /**\n     * @inheritDoc\n     * @param {boolean} state\n     */\n    self.execute = state => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n\n    /**\n     * Toggle between states of the command\n     * @return {void}\n     */\n    self.toggle = () => {\n        const state = ((typeof self.state) === 'function')\n            ? self.state()\n            : self.state;\n\n        if (state === null) {\n            throw new Error('The command needs an (initial) true/false state');\n        }\n\n        self.execute(! state);\n    };\n}\n","import {extend} from '../../functions';\nimport Command from '../Command';\nimport PauseGameCommand from '../PauseGameCommand';\n\nextend(CloseAllModalsCommand, Command);\n\n/**\n * @constructor\n */\nexport default function CloseAllModalsCommand() {\n    const self = this;\n    Command.call(self);\n\n    /**\n     * @type {PauseGameCommand}\n     * @private\n     */\n    const _pauseGameCommand = new PauseGameCommand();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        _pauseGameCommand.execute(false);\n\n        Sudoku.modal.showBackdrop(false);\n\n        // Close all the modals\n        const modals = document.getElementsByClassName('modal');\n        for (let i = 0; i < modals.length; i++) {\n            modals[i].classList.remove('show');\n        }\n\n        Sudoku.modal.openState(false);\n    };\n}\n","import CloseAllModalsCommand from './Commands/Modal/CloseAllModalsCommand';\nimport OpenModalCommand from './Commands/Modal/OpenModalCommand';\n\n/**\n * The ID of the modal dialog for pausing the game\n * @type {string}\n * @static\n */\nModal.PAUSE_MODAL_ID = 'pause-modal';\n\nexport default function Modal() {\n    const self = this;\n\n    /**\n     * The modal dialog backdrop\n     * @type {HTMLElement}\n     * @private\n     */\n    const _backdropElement = document.getElementById('modal-backdrop');\n\n    /**\n     * Indicates whether a modal is currently open\n     * @type {boolean}\n     * @private\n     */\n    let _openState = false;\n\n    /**\n     * The ID of the currently opened modal\n     * @type {string|null}\n     * @private\n     */\n    let _currentModalId = null;\n\n    /**\n     * Reusable close command, for all modals\n     * @type {CloseAllModalsCommand}\n     * @private\n     */\n    const _closeCommand = new CloseAllModalsCommand();\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableOpening();\n        _enableClosing();\n    };\n\n    /**\n     * Show or hide the modal backdrop\n     * @param {boolean} show\n     */\n    self.showBackdrop = show => {\n        const toggleMethod = show ? 'add' : 'remove';\n        _backdropElement.classList[toggleMethod]('show');\n    };\n\n    /**\n     * @param {boolean|null} state\n     * @return {boolean}\n     */\n    self.openState = (state = null) => {\n        if (state !== null) {\n            _openState = state;\n        }\n\n        return _openState;\n    };\n\n    /**\n     * @param {string|null} modalId\n     * @return {string|null}\n     */\n    self.currentModalId = (modalId = null) => {\n        if (modalId !== null) {\n            _currentModalId = modalId;\n        }\n\n        return _currentModalId;\n    };\n\n    /**\n     * Close an open modal dialog, if there is any\n     * @return {void}\n     */\n    self.close = () => _closeCommand.execute();\n\n    /**\n     * Enable opening of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableOpening = () => {\n        const openButtons = document.getElementsByClassName('open-modal');\n\n        for (let i = 0; i < openButtons.length; i++) {\n            openButtons[i].addEventListener('click', event => {\n                // Open the modal dialog\n                const modalId = event.target.dataset.modalId;\n                const command = new OpenModalCommand(modalId);\n                command.execute();\n            });\n        }\n    };\n\n    /**\n     * Enable closing of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableClosing = () => {\n        // Enable close buttons of the modal dialogs\n        const closeButtons = document.getElementsByClassName('close-modal');\n        for (let i = 0; i < closeButtons.length; i++) {\n            closeButtons[i].addEventListener('click', self.close);\n        }\n\n        // Clicking the backdrop also closes modal dialogs\n        _backdropElement.addEventListener('click', self.close);\n    };\n}\n","import {extend} from '../../functions';\nimport Command from '../Command';\nimport PauseGameCommand from '../PauseGameCommand';\nimport Modal from '../../Modal';\n\nextend(OpenModalCommand, Command);\n\n/**\n * @param {string} modalId ID of the modal dialog to open\n * @constructor\n */\nexport default function OpenModalCommand(modalId) {\n    const self = this;\n    Command.call(self);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    const _modalId = modalId;\n\n    /**\n     * The modal dialog to show\n     * @type {HTMLElement}\n     * @private\n     */\n    const _modalElement = document.getElementById(_modalId);\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        Sudoku.modal.currentModalId(_modalId);\n\n        // Prevent recursive calls\n        if (_modalId !== Modal.PAUSE_MODAL_ID) {\n            const pauseGameCommand = new PauseGameCommand();\n            pauseGameCommand.execute(true);\n        }\n\n        Sudoku.modal.openState(true);\n        Sudoku.modal.showBackdrop(true);\n        _modalElement.classList.add('show');\n    };\n}\n","import {extend} from '../functions';\nimport TogglableCommand from './TogglableCommand';\nimport OpenModalCommand from './Modal/OpenModalCommand';\nimport Modal from '../Modal';\n\nextend(PauseGameCommand, TogglableCommand);\n\nexport default function PauseGameCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => false;\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        if (state === true) {\n            Sudoku.clock.pause();\n\n            const openModalCommand = new OpenModalCommand(Modal.PAUSE_MODAL_ID);\n            openModalCommand.execute();\n        } else {\n            // Prevent recursive calls\n            if (Sudoku.modal.currentModalId() !== Modal.PAUSE_MODAL_ID) {\n                Sudoku.modal.close();\n            }\n\n            Sudoku.clock.unpause();\n        }\n\n        self.state = state;\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommand from '../TogglableCommand';\n\nextend(ShowClockCommand, TogglableCommand);\n\nexport default function ShowClockCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.clockState();\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    const _clockElement = document.getElementById('clock-wrapper');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-show-clock');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'remove' : 'add';\n        _clockElement.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.clockState(state);\n        self.state = state;\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommand from '../TogglableCommand';\n\nextend(AutoErrorCheckingCommand, TogglableCommand);\n\nexport default function AutoErrorCheckingCommand() {\n    const self = this;\n    TogglableCommand.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoErrorCheckingState;\n\n    /**\n     * The manual error checking button\n     * @type {HTMLElement}\n     * @private\n     */\n    const _errorCheckingButton = document.getElementById('check-errors');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-auto-error-checking');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'add' : 'remove';\n        _errorCheckingButton.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.autoErrorCheckingState(state);\n        self.state = state;\n    };\n}\n","import Controls from './Controls';\nimport InputMode from './InputMode';\nimport Grid from './Grid/Grid';\nimport Clock from './Clock';\nimport DocumentEventHandler from './EventHandlers/DocumentEventHandler';\nimport CommandHistory from './Commands/CommandHistory';\nimport Meta from './Meta';\nimport Modal from './Modal';\nimport Settings from './Settings';\nimport SettingsEventHandler from './EventHandlers/SettingsEventHandler';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    settings: new Settings(),\n    history: new CommandHistory(),\n    meta: new Meta(),\n    controls: new Controls(),\n    inputMode: new InputMode(),\n    grid: new Grid(),\n    clock: new Clock(),\n    modal: new Modal(),\n    documentEventHandler: new DocumentEventHandler(),\n    settingsEventHandler: new SettingsEventHandler(),\n};\n\nSudoku.settings.init();\nSudoku.settingsEventHandler.init();\nSudoku.clock.init();\nSudoku.modal.init();\nSudoku.meta.init();\nSudoku.inputMode.init();\nSudoku.controls.init();\nSudoku.grid.init();\nSudoku.documentEventHandler.register();\n\n/*\nconst LZString = require('lz-string');\n\nfunction logResults(state, label = null) {\n    const result1 = LZString.compress(state);\n    const result2 = LZString.compressToEncodedURIComponent(state);\n\n    console.group(label || 'Compression result');\n    console.log('Original state', state.length, state);\n    console.log('Compressed state', result1.length, result1);\n    console.log('URL-encoded compressed state', result2.length, result2);\n    console.groupEnd();\n}\n\n// The state from the application\n// logResults(JSON.stringify(Sudoku.grid.getState()), 'App');\n\n// 3 digits per cell: 2 digits for cell number, 1 for value\nconst threeDigits = '038149156382416811295104457093378472567629123781806';\nlogResults(threeDigits, '3 digits per cell');\n\n// 81 numbers, representing every cell value (0 = empty)\nconst eightyOneNumbers = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nlogResults(eightyOneNumbers, '81 numbers');\n\n// A 1 as a counter, so the the digit 2 is '11', and 7 is '1111111' (delimited by a comma)\nconst csvOnes = eightyOneNumbers.split('')\n    .map(number => {\n        number = parseInt(number, 10);\n        return '1'.repeat(number);\n    })\n    .join(',');\nlogResults(csvOnes, 'CSV, counting with ones');\n\n// Grid cells state\nconst cellsState = ('n' + '1'.repeat(23) // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v' + '1'.repeat(7) // Cell value\n    + 'c' + '1'.repeat(4) // Color number 4\n    + 'cr' + [3, 4, 6, 8].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Center pencil marks\n).repeat(81) // For 81 cells\n// 366 length compressed, 975 length URL-encoded compressed\nlogResults(cellsState, 'Cells state v1');\n\n// Grid cells state, normal way\nconst cellsState2 = ('n23' // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v7' // Cell value\n    + 'c4' // Color number 4\n    + 'cr' + [3, 4, 6, 8].join('') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].join('') // Center pencil marks\n).repeat(81) // For 81 cells\n// 118 length compressed, 315 length URL-encoded compressed\nlogResults(cellsState2, 'Cells state v2');\n//*/\n","import ShowClockCommand from './Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from './Commands/Settings/AutoErrorCheckingCommand';\n\nexport default function Settings() {\n    const self = this;\n\n    /**\n     * Indicates whether the clock is shown\n     * @type {boolean}\n     * @private\n     */\n    let _clockState;\n\n    /**\n     * Indicates whether automatic error checking is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _autoErrorCheckingState;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        // Initialize the settings in local storage if needed\n        if (localStorage.getItem('settings') === null) {\n            localStorage.setItem('settings', JSON.stringify({}));\n        }\n\n        _fromLocalStorage();\n        _applySettings();\n    };\n\n    /**\n     * Get settings stored in local storage\n     * @return {void}\n     * @private\n     */\n    const _fromLocalStorage = () => {\n        const settings = JSON.parse(localStorage.getItem('settings'));\n\n        _clockState = (settings.clock !== undefined)\n            ? settings.clock\n            : true;\n\n        _autoErrorCheckingState = (settings.autoErrorChecking !== undefined)\n            ? settings.autoErrorChecking\n            : true;\n    };\n\n    /**\n     * Export settings to local storage\n     * @return {void}\n     * @private\n     */\n    const _toLocalStorage = () => {\n        localStorage.setItem('settings', JSON.stringify({\n            clock: self.clockState(),\n            autoErrorChecking: self.autoErrorCheckingState(),\n        }));\n    };\n\n    /**\n     * Apply the stored settings\n     * @return {void}\n     * @private\n     */\n    const _applySettings = () => {\n        const showClockCommand = new ShowClockCommand();\n        showClockCommand.execute(self.clockState());\n\n        const autoErrorCheckingCommand = new AutoErrorCheckingCommand();\n        autoErrorCheckingCommand.execute(self.autoErrorCheckingState());\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.clockState = (state = null) => {\n        if (state !== null) {\n            _clockState = state;\n            _toLocalStorage();\n        }\n\n        return _clockState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoErrorCheckingState = (state = null) => {\n        if (state !== null) {\n            _autoErrorCheckingState = state;\n            _toLocalStorage();\n        }\n\n        return _autoErrorCheckingState;\n    };\n}\n","import UndoableCommand from './UndoableCommand';\n\nexport default function CommandHistory() {\n    const self = this;\n\n    /**\n     * The list of commands that have been executed\n     * @type {UndoableCommand[]}\n     * @private\n     */\n    let _past = [];\n\n    /**\n     * The list of commands to redo\n     * @type {UndoableCommand[]}\n     * @private\n     */\n    let _future = [];\n\n    /**\n     * Add a command to be executed\n     * @param {UndoableCommand} command\n     * @param {boolean} clearFuture Whether to clear the future (redo) stack\n     * @return {number}\n     */\n    self.execute = (command, clearFuture = true) => {\n        if (! (command instanceof UndoableCommand)) {\n            throw new Error('Command needs to have UndoableCommand in its prototype chain');\n        }\n\n        command.execute();\n        _past.push(command);\n\n        // Clear the future (redo) list if needed\n        if (clearFuture) {\n            _future = [];\n        }\n    };\n\n    /**\n     * Undo the most recent command\n     * @return {void}\n     */\n    self.undo = () => {\n        // A command needs to exist\n        if (_past.length < 1) {\n            return;\n        }\n\n        // Undo the command\n        const command = _past.pop();\n        command.undo();\n\n        // Put the command in the future stack, for redoing\n        _future.push(command);\n    };\n\n    /**\n     * Execute the most recent command from the future stack\n     * @return {void}\n     */\n    self.redo = () => {\n        // A command needs to exist\n        if (_future.length < 1) {\n            return;\n        }\n\n        // Redo the command\n        const command = _future.pop();\n        self.execute(command, false);\n    };\n}\n","export default function Meta() {\n    const self = this;\n\n    /**\n     * The page title element\n     * @type {HTMLTitleElement}\n     */\n    const titleElement = document.getElementsByTagName('title')[0];\n\n    /**\n     * The name of the application\n     * @type {string}\n     */\n    const appName = titleElement.innerText;\n\n    /**\n     * The title input field\n     * @type {HTMLInputElement}\n     */\n    const titleField = document.getElementById('puzzle-title');\n\n    /**\n     * The description input field\n     * @type {HTMLTextAreaElement}\n     */\n    const descriptionField = document.getElementById('puzzle-description');\n\n    /**\n     * An optional title for the sudoku\n     * @type {string|null}\n     */\n    let title = null;\n\n    /**\n     * An optional description for the sudoku\n     * @type {string|null}\n     */\n    let description = null;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        enableTextFields();\n    };\n\n    /**\n     * @return {void}\n     */\n    const enableTextFields = () => {\n        const titleCallback = () => {\n            title = titleField.value.trim();\n\n            // Update the page title\n            titleElement.innerText = (title !== '')\n                ? `${title} - ${appName}`\n                : appName;\n        };\n\n        titleField.addEventListener('change', titleCallback);\n        titleField.addEventListener('keyup', titleCallback);\n        titleField.addEventListener('paste', titleCallback);\n\n        const descriptionCallback = () => description = descriptionField.value;\n\n        descriptionField.addEventListener('change', descriptionCallback);\n        descriptionField.addEventListener('keyup', descriptionCallback);\n        descriptionField.addEventListener('paste', descriptionCallback);\n    };\n}\n","import Visitor from './Utilities/Visitor';\n\nexport default function Controls() {\n    const self = this;\n\n    /**\n     * Indicates whether a mouse button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _mousePressed = false;\n\n    /**\n     * Indicates whether a ctrl button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _ctrlKeyPressed = false;\n\n    /**\n     * Indicates whether a shift button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _shiftKeyPressed = false;\n\n    /**\n     * Arrow key codes\n     * @type {object}\n     * @private\n     */\n    const _arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Arrow key codes, as 1 array\n     * @type {string[]}\n     * @private\n     */\n    const _arrowKeysConcatenated = _arrowKeys.up\n        .concat(_arrowKeys.down)\n        .concat(_arrowKeys.left)\n        .concat(_arrowKeys.right);\n\n    /**\n     * Number key codes\n     * @type {string[]}\n     * @private\n     */\n    const _numberKeys = [\n        'Digit1', 'Numpad1', 'Digit2', 'Numpad2', 'Digit3', 'Numpad3',\n        'Digit4', 'Numpad4', 'Digit5', 'Numpad5', 'Digit6', 'Numpad6',\n        'Digit7', 'Numpad7', 'Digit8', 'Numpad8', 'Digit9', 'Numpad9',\n    ];\n\n    /**\n     * Delete key codes\n     * @type {string[]}\n     * @private\n     */\n    const _deleteKeys = ['Delete', 'Backspace'];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => _mousePressed = true);\n        document.addEventListener('mouseup', () => _mousePressed = false);\n        registerClickDisabling();\n        document.addEventListener('keydown', keyPressCallback);\n    };\n\n    /**\n     * Disable click events for certain elements\n     * @return {void}\n     */\n    const registerClickDisabling = () => {\n        document.addEventListener('click', event => {\n            if (event.target.closest('.click-prevent') !== null) {\n                event.preventDefault();\n            }\n        });\n    };\n\n    /**\n     * Decide whether to cancel a keyboard listener\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.cancelKeyboardEvent = event => {\n        const nodeName = event.target.nodeName.toLowerCase();\n\n        // Don't use custom listener on input elements\n        return (['input', 'textarea'].indexOf(nodeName) > -1);\n    };\n\n    /**\n     * Callback for keydown and keyup\n     * @param {Event} event\n     * @return {void}\n     */\n    const keyPressCallback = event => {\n        _ctrlKeyPressed = Visitor.usesMacOs ? event.metaKey : event.ctrlKey;\n\n        // Prevent browser keyboard shortcut\n        if (! self.cancelKeyboardEvent(event)) {\n            // Browser navigation\n            const arrowKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n            if (arrowKeys.indexOf(event.code) > -1) {\n                event.preventDefault();\n            }\n\n            if (_ctrlKeyPressed) {\n                // Browser history\n                if (event.code === 'KeyY') {\n                    event.preventDefault();\n                }\n            }\n        }\n\n        _shiftKeyPressed = event.shiftKey;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.mouseIsPressed = () => _mousePressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.ctrlKeyIsPressed = () => _ctrlKeyPressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.shiftKeyIsPressed = () => _shiftKeyPressed;\n\n    /**\n     * Checks whether a keycode is a number key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isNumberKey = keyCode => (_numberKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is a delete key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isDeleteKey = keyCode => (_deleteKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is an arrow key\n     * @param {string} keyCode\n     * @param {string} direction (any or up/down/left/right)\n     * @return {boolean}\n     */\n    self.isArrowKey = (keyCode, direction = 'any') => {\n        // Check for any arrow key\n        if (direction === 'any') {\n            return (_arrowKeysConcatenated.indexOf(keyCode) > -1);\n        }\n\n        // Check for a specific arrow key\n        return (\n            _arrowKeys[direction]\n            && _arrowKeys[direction].indexOf(keyCode) > -1\n        );\n    };\n}\n","import {trait} from '../functions';\nimport GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport HasGridCells from '../Traits/HasGridCells';\n\nexport default function Grid() {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     * @private\n     */\n    const _gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     * @private\n     */\n    const _gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     * @private\n     */\n    const _gridBoxes = [];\n\n    /**\n     * A list of currently selected cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _selectedCells = [];\n\n    /**\n     * A list of currently highlighted cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _highlightedCells = [];\n\n    /**\n     * The cell that is last navigated to\n     * @type {GridCell|null}\n     * @private\n     */\n    let _lastNavigatedCell = null;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        collectCells();\n    };\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     */\n    const collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            _gridRows.push(new GridRow(i));\n            _gridColumns.push(new GridColumn(i));\n            _gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n            self.addCell(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (_gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridRows[j].addCell(gridCell);\n                    gridCell.setRow(_gridRows[j]);\n                }\n\n                if (_gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(_gridColumns[j]);\n                }\n\n                if (_gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(_gridBoxes[j]);\n                }\n            }\n        }\n\n        self.setLastNavigatedCell(null);\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getSelectedCells = () => _selectedCells;\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    self.addSelectedCell = cell => {\n        _selectedCells.push(cell);\n\n        // Highlight related cells after selecting\n        self.highlightRelatedCells();\n    };\n\n    /**\n     * Deselect all the selected cells\n     * @return {void}\n     */\n    self.deselectAllCells = () => {\n        self.getSelectedCells().forEach(cell => cell.setSelectedState(false));\n        _selectedCells = [];\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getHighlightedCells = () => _highlightedCells;\n\n    /**\n     * Add a cell to the list of highlighted cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addHighlightedCell = cell => _highlightedCells.push(cell);\n\n    /**\n     * De-highlight all the highlighted cells\n     * @return {void}\n     */\n    self.dehighlightAllCells = () => {\n        self.getHighlightedCells().forEach(cell => cell.setHighlightedState(false));\n        _highlightedCells = [];\n    };\n\n    /**\n     * Highlight all cells that are related to selected cell(s)\n     * @return {void}\n     */\n    self.highlightRelatedCells = () => {\n        self.dehighlightAllCells();\n\n        let cellNumbers = [];\n\n        // Add the cell numbers of the row, column and box that the cell is in\n        self.getSelectedCells().forEach(cell => {\n            cellNumbers = cellNumbers.concat(cell.getRow().getCellNumbers())\n                .concat(cell.getColumn().getCellNumbers())\n                .concat(cell.getBox().getCellNumbers());\n\n            // See if the cell has a value, for further highlighting\n            const cellValue = cell.getValue();\n            if (cellValue === null) {\n                return;\n            }\n\n            // Add the cell numbers of cells that contain the same digit\n            const sameDigitCellNumbers = self.getCells()\n                .filter(cell => {\n                    return (cell.hasValue(cellValue)\n                        || cell.hasCornerMark(cellValue)\n                        || cell.hasCenterMark(cellValue));\n                })\n                .map(cell => cell.getCellNumber());\n\n            cellNumbers = cellNumbers.concat(sameDigitCellNumbers);\n        });\n\n        cellNumbers\n            // Remove duplicates\n            .filter((value, index, numbers) => {\n                return numbers.indexOf(value) === index;\n            })\n            // Highlight the cells\n            .forEach(cellNumber => {\n                self.getCell(cellNumber).setHighlightedState(true);\n            });\n    };\n\n    /**\n     * @return {GridCell|null}\n     */\n    self.getLastNavigatedCell = () => _lastNavigatedCell;\n\n    /**\n     * @param {GridCell|null} cell\n     * @return {null}\n     */\n    self.setLastNavigatedCell = cell => {\n        // The default last navigated cell is the center one\n        if (cell === null) {\n            _lastNavigatedCell = self.getCell(41);\n        } else {\n            _lastNavigatedCell = cell;\n        }\n    };\n\n    /**\n     * Check for errors in the grid\n     * @return {void}\n     */\n    self.checkForErrors = () => {\n        _gridRows.forEach(row => row.checkDuplicateCellValues());\n        _gridColumns.forEach(column => column.checkDuplicateCellValues());\n        _gridBoxes.forEach(box => box.checkDuplicateCellValues());\n    };\n\n    /**\n     * Remove the error status of all cells\n     * @return {void}\n     */\n    self.removeAllErrors = () => {\n        self.getCells().forEach(cell => cell.setErrorState(false));\n    };\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () =>\n        // Application version\n        'a1'\n        // Elapsed milliseconds\n        + 't' + Sudoku.clock.getTotalElapsedMs()\n        // Cells state\n        + self.getCells().map(cell => cell.getState()).join('');\n}\n","export default function Clock() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     * @private\n     */\n    let _initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     * @private\n     */\n    let _startMoment = null;\n\n    /**\n     * The element that shows the elapsed time\n     * @type {HTMLSpanElement}\n     * @private\n     */\n    const _timeElement = document.getElementById('elapsed-time');\n\n    /**\n     * The interval for showing the time on screen\n     * @type {number|null}\n     * @private\n     */\n    let _timeInterval = null;\n\n    /**\n     * Indicates whether the clock is paused\n     * @type {boolean}\n     * @private\n     */\n    let _paused = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        self.start();\n        self.showTime();\n    };\n\n    /**\n     * Set the start/unpause moment for calculating elapsed time\n     * @return {void}\n     */\n    self.start = self.unpause = () => {\n        _startMoment = new Date();\n        _paused = false;\n    };\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        _initialMs += self.getElapsedMsSinceStart();\n        _startMoment = null;\n        _paused = true;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isPaused = () => _paused;\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (_startMoment !== null)\n            ? (new Date()).getTime() - _startMoment.getTime()\n            : 0;\n    };\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => _initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n\n    /**\n     * Decide whether to show the elapsed time on screen\n     * @param {boolean} show\n     * @return {void}\n     */\n    self.showTime = (show = true) => {\n        if (show) {\n            _timeInterval = setInterval(() => {\n                _timeElement.innerText = self.getElapsedTimeString();\n            }, 1000);\n        } else {\n            clearInterval(_timeInterval);\n        }\n    };\n}\n","import ChangeDigitCommand from '../Commands/Grid/ChangeDigitCommand';\nimport PauseGameCommand from '../Commands/PauseGameCommand';\n\nexport default function DocumentEventHandler() {\n    const self = this;\n\n    /**\n     * @type {PauseGameCommand}\n     * @private\n     */\n    const _pauseGameCommand = new PauseGameCommand();\n\n    /**\n     * Register event handlers for the document\n     * @return {void}\n     */\n    self.register = () => {\n        registerKeyboardNavigation();\n        registerValueSetting();\n        registerCellsDeselecting();\n    };\n\n    /**\n     * Register keyboard navigation events\n     * @return {void}\n     */\n    const registerKeyboardNavigation = () => {\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.cancelKeyboardEvent(event)) {\n                return;\n            }\n\n            if (Sudoku.controls.isArrowKey(event.code)) {\n                // Deselect all cells, if the ctrl key is not pressed\n                if (! Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.grid.deselectAllCells();\n                }\n\n                let newCellIndex = Sudoku.grid.getLastNavigatedCell().getCellNumber() - 1;\n                let newCell = null;\n\n                // Then navigate to the intended cell\n                // Wrap around if needed\n                if (Sudoku.controls.isArrowKey(event.code, 'up')) {\n                    if ((newCellIndex -= 9) < 0) {\n                        newCellIndex = 81 + newCellIndex;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'down')) {\n                    if ((newCellIndex += 9) > 80) {\n                        newCellIndex = newCellIndex - 81;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'left')) {\n                    if ((--newCellIndex + 1) % 9 === 0) {\n                        newCellIndex += 9;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'right')) {\n                    if (++newCellIndex % 9 === 0) {\n                        newCellIndex -= 9;\n                    }\n                }\n\n                // Make the new cell the active one\n                newCell = Sudoku.grid.getCell(newCellIndex + 1);\n                newCell.setSelectedState(true);\n                Sudoku.grid.setLastNavigatedCell(newCell);\n            }\n        });\n    };\n\n    /**\n     * Register setting of values\n     * @return {void}\n     */\n    const registerValueSetting = () => {\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.cancelKeyboardEvent(event)) {\n                return;\n            }\n\n            if (Sudoku.controls.isNumberKey(event.code)) {\n                // Set a number value\n                const digit = parseInt(event.key, 10);\n                Sudoku.history.execute(new ChangeDigitCommand(digit));\n            } else if (Sudoku.controls.isDeleteKey(event.code)) {\n                // Remove the value\n                Sudoku.history.execute(new ChangeDigitCommand(null));\n            } else if (event.code === 'KeyZ') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    if (Sudoku.controls.shiftKeyIsPressed()) {\n                        Sudoku.history.redo();\n                    } else {\n                        Sudoku.history.undo();\n                    }\n                }\n            } else if (event.code === 'KeyY') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.history.redo();\n                }\n            } else if (event.code === 'Escape') {\n                if (Sudoku.modal.openState() === true) {\n                    // Close a modal dialog\n                    Sudoku.modal.close();\n                } else {\n                    // Pause / unpause the game\n                    _pauseGameCommand.toggle();\n                }\n            }\n        });\n    };\n\n    /**\n     * Deselect all cells when clicking outside the grid\n     * @return {void}\n     */\n    const registerCellsDeselecting = () => {\n        document.addEventListener('mousedown', event => {\n            if (event.target.closest('.grid-cell') === null) {\n                Sudoku.grid.deselectAllCells();\n                Sudoku.grid.dehighlightAllCells();\n            }\n        });\n    };\n}\n","import ShowClockCommand from '../Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from '../Commands/Settings/AutoErrorCheckingCommand';\n\nexport default function SettingsEventHandler() {\n    const self = this;\n\n    /**\n     * @type {ShowClockCommand}\n     * @private\n     */\n    const _showClockCommand = new ShowClockCommand();\n\n    /**\n     * @type {AutoErrorCheckingCommand}\n     * @private\n     */\n    const _autoErrorCheckingCommand = new AutoErrorCheckingCommand();\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableClockToggling();\n        _enableAutoErrorCheckingToggling();\n        _enableHighlightingToggling();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableClockToggling = () => {\n        document.getElementById('setting-show-clock')\n            .addEventListener('change', event => {\n                _showClockCommand.execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableAutoErrorCheckingToggling = () => {\n        document.getElementById('setting-auto-error-checking')\n            .addEventListener('change', event => {\n                _autoErrorCheckingCommand.execute(event.target.checked);\n            });\n    };\n\n    const _enableHighlightingToggling = () => {\n        // Row, column and box, same digit (value and pencil mark)\n    };\n}\n"],"sourceRoot":""}