{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/Utilities/Visitor.js","webpack:///./assets/js/InputMode.js","webpack:///./assets/js/functions.js","webpack:///./assets/js/Traits/HasGridCells.js","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/EventHandlers/GridCellEventHandler.js","webpack:///./assets/js/Grid/PencilMarks/PencilMarksInterface.js","webpack:///./assets/js/Grid/PencilMarks/CornerMarks.js","webpack:///./assets/js/Grid/PencilMarks/CenterMarks.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/Commands/CommandInterface.js","webpack:///./assets/js/Commands/UndoableCommandInterface.js","webpack:///./assets/js/Commands/Grid/ChangeDigitCommand.js","webpack:///./assets/js/Commands/TogglableCommandInterface.js","webpack:///./assets/js/Commands/Modal/OpenModalCommand.js","webpack:///./assets/js/Commands/PauseGameCommand.js","webpack:///./assets/js/Commands/Modal/CloseAllModalsCommand.js","webpack:///./assets/js/Commands/Settings/ShowClockCommand.js","webpack:///./assets/js/Commands/Settings/AutoErrorCheckingCommand.js","webpack:///./assets/js/Commands/Settings/AutoRemovePencilMarksCommand.js","webpack:///./assets/js/Commands/Settings/HighlightRowCommand.js","webpack:///./assets/js/Commands/Settings/HighlightColumnCommand.js","webpack:///./assets/js/Commands/Settings/HighlightBoxCommand.js","webpack:///./assets/js/Commands/Settings/HighlightValueCommand.js","webpack:///./assets/js/Commands/Settings/HighlightPencilMarksCommand.js","webpack:///./assets/js/Commands/AutoCandidateModeCommand.js","webpack:///./assets/js/app.js","webpack:///./assets/js/Game.js","webpack:///./assets/js/Settings.js","webpack:///./assets/js/Commands/CommandHistory.js","webpack:///./assets/js/Meta.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/Grid/GridCellHighlighter.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Clock.js","webpack:///./assets/js/Modal.js","webpack:///./assets/js/EventHandlers/DocumentEventHandler.js","webpack:///./assets/js/EventHandlers/SettingsEventHandler.js","webpack:///./assets/js/EventHandlers/ActionsEventHandler.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visitor","InputMode","self","this","_mode","MODE_VALUE","_radioButtons","document","getElementsByName","_inputModeCenterLabel","getElementById","init","_selectCurrentRadioButton","_registerEventListeners","forEach","radioButton","parseInt","getMode","checked","addEventListener","setMode","event","code","changeMode","MODE_CORNER","Sudoku","settings","autoCandidateState","MODE_CENTER","toLowerCase","Error","triggerAutoCandidateActions","state","classList","add","getElementsByTagName","disabled","remove","extend","constructor","baseConstructor","trait","instance","traitConstructor","thing","traitInstance","HasGridCells","gridCells","addCell","cell","push","getCells","getCell","number","find","getCellNumber","undefined","getCellValues","map","getValue","filter","checkDuplicateCellValues","cellValues","cellValue","cells","length","setErrorState","containsValue","hasValue","GridRow","rowNumber","_rowNumber","getCellNumbers","numbers","rowIndex","GridColumn","columnNumber","_columnNumber","j","GridBox","boxNumber","_boxNumber","boxIndex","topLeftNumber","Math","floor","GridCellEventHandler","gridCell","_gridCell","register","_registerMouseDownEvent","_registerMouseEnterEvent","_registerMouseUpEvent","getElement","controls","ctrlKeyIsPressed","setSelectedState","isSelected","grid","deselectAllCells","mouseIsPressed","setLastNavigatedCell","PencilMarksInterface","digits","toggleDigit","digit","setDigits","has","indexOf","hasAny","show","CornerMarks","cornerMarks","existingIndex","splice","GridCell","MAX_CORNER_MARKS","allElements","getElementsByClassName","innerText","sort","a","b","item","index","toString","CenterMarks","_autoCandidates","getAutoCandidates","centerMarks","MAX_CENTER_MARKS","useAutoCandidates","join","cellNumber","_cellNumber","_element","_cornerMarks","_centerMarks","_gridRow","_gridColumn","_gridBox","_value","_isSelected","_isHighlighted","isPrefilled","getColorNumber","setDigit","autoErrorCheckingState","inputMode","toggleValue","getCornerMarks","getCenterMarks","_toggleMarksVisibility","gridCellHighlighter","highlightRelatedCells","autoRemovePencilMarksState","_removeRelatedPencilMarks","determineCandidates","removePencilMark","type","pencilMarksObject","pencilMarks","digitIndex","getRow","concat","getColumn","getBox","toggleMethod","selected","addSelectedCell","isHighlighted","setHighlightedState","highlighted","addHighlightedCell","setRow","row","setColumn","column","setBox","box","on","getState","CommandInterface","execute","UndoableCommandInterface","undo","ChangeDigitCommand","_digit","_cells","getSelectedCells","_inputMode","_cellsState","checkForErrors","TogglableCommandInterface","toggle","currentState","OpenModalCommand","modalId","_modalId","_modalElement","modal","setCurrentModalId","PauseGameCommand","game","isPaused","_bodyElement","pauseIcon","resumeIcon","clock","pause","openState","unpause","setPausedState","CloseAllModalsCommand","_pauseGameCommand","modals","ShowClockCommand","clockState","_clockElement","_toggleCheckbox","AutoErrorCheckingCommand","_errorCheckingButton","removeAllErrors","AutoRemovePencilMarksCommand","HighlightRowCommand","highlightRowState","HighlightColumnCommand","highlightColumnState","HighlightBoxCommand","highlightBoxState","HighlightValueCommand","highlightValueState","HighlightPencilMarksCommand","highlightPencilMarksState","AutoCandidateModeCommand","removeCandidates","usesMacOs","navigator","userAgent","match","window","_isPaused","_clockState","_autoErrorCheckingState","_highlightRowState","_highlightColumnState","_highlightBoxState","_highlightValueState","_highlightPencilMarksState","_autoRemovePencilMarksState","_autoCandidateState","localStorage","getItem","setItem","JSON","stringify","_fromLocalStorage","_applySettings","parse","autoErrorChecking","autoRemovePencilMarks","highlightRow","highlightColumn","highlightBox","highlightValue","highlightPencilMarks","_toLocalStorage","history","_past","_future","command","clearFuture","pop","redo","meta","appName","getAttribute","titleElements","titleField","descriptionField","title","_enableTextFields","titleCallback","pageTitle","trim","descriptionCallback","_mousePressed","_ctrlKeyPressed","_shiftKeyPressed","_arrowKeys","up","down","left","right","_arrowKeysConcatenated","_numberKeys","_deleteKeys","_keyUpDownCallback","_keyDownCallback","_registerClickDisabling","target","closest","preventDefault","cancelKeyboardEvent","nodeName","metaKey","ctrlKey","shiftKey","shiftKeyIsPressed","isNumberKey","keyCode","isDeleteKey","isArrowKey","direction","_highlightedCells","getHighlightedCells","dehighlightAllCells","cellNumbers","sameDigitCellNumbers","_gridRows","_gridColumns","_gridBoxes","_selectedCells","_lastNavigatedCell","_collectCells","getLastNavigatedCell","getTotalElapsedMs","_initialMs","_startMoment","_timeElement","_timeInterval","_paused","start","showTime","Date","getElapsedMsSinceStart","getTime","getElapsedTimeString","totalSeconds","hours","minutes","seconds","padStart","setInterval","clearInterval","_backdropElement","_openState","_currentModalId","_closeCommand","_enableOpening","_enableClosing","getCurrentModalId","close","openButtons","dataset","closeButtons","documentEventHandler","_registerKeyboardEvents","_registerMouseEvents","pauseGameCommand","newCellIndex","newCell","settingsEventHandler","_enableClockToggling","_enableAutoErrorCheckingToggling","_enableAutoRemovePencilMarksToggling","_enableHighlightingToggling","actionsEventHandler","_registerPauseResumeEvent","_registerCheckErrorsEvent","_registerAutoCandidateModeEvent"],"mappings":"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","file":"app_b066f34842fe542c8dcf.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Indicates whether the visitor's OS is macOS\n * @type {boolean}\n * @static\n */\nVisitor.usesMacOs = (navigator.userAgent.toLowerCase().match(/macintosh/) !== null);\n\nexport default function Visitor() {\n    const self = this;\n}\n","/**\n * Several input modes, to be used as constants\n * @type {number}\n * @static\n */\nInputMode.MODE_VALUE = 1;\nInputMode.MODE_CORNER = 2;\nInputMode.MODE_CENTER = 3;\n\nexport default function InputMode() {\n    const self = this;\n\n    /**\n     * The current mode\n     * @type {number}\n     * @private\n     */\n    let _mode = InputMode.MODE_VALUE;\n\n    /**\n     * The radio buttons that can change the mode\n     * @type {NodeListOf<HTMLElement>}\n     * @private\n     */\n    const _radioButtons = document.getElementsByName('input_mode');\n\n    /**\n     * The label containing the checkbox for the 'center marks' input mode\n     * @type {HTMLElement}\n     * @private\n     */\n    const _inputModeCenterLabel = document.getElementById('input-mode-center-label');\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        _selectCurrentRadioButton();\n        _registerEventListeners();\n    };\n\n    /**\n     * Make the radio button of the current input mode checked\n     * @return {void}\n     * @private\n     */\n    const _selectCurrentRadioButton = () => {\n        _radioButtons.forEach(radioButton => {\n            if (parseInt(radioButton.value, 10) === self.getMode()) {\n                radioButton.checked = true;\n            }\n        });\n    };\n\n    /**\n     * Enable toggling the mode with radio buttons\n     * @return {void}\n     * @private\n     */\n    const _registerEventListeners = () => {\n        _radioButtons.forEach(radioButton => {\n            radioButton.addEventListener('change', () => {\n                self.setMode(parseInt(radioButton.value, 10));\n            });\n        });\n\n        document.addEventListener('keydown', event => {\n            switch (event.code) {\n                case 'Space':\n                    self.changeMode();\n                    break;\n                case 'KeyI':\n                    self.setMode(InputMode.MODE_VALUE);\n                    break;\n                case 'KeyO':\n                    self.setMode(InputMode.MODE_CORNER);\n                    break;\n                case 'KeyP':\n                    if (! Sudoku.settings.autoCandidateState()) {\n                        self.setMode(InputMode.MODE_CENTER);\n                    }\n                    break;\n            }\n        });\n    };\n\n    /**\n     * @param {number} mode\n     * @return {void}\n     */\n    self.setMode = mode => {\n        if ((typeof mode).toLowerCase() !== 'number') {\n            throw new Error(`Expected a number, got ${typeof mode}`);\n        }\n\n        const maxModeNumber = (Sudoku.settings.autoCandidateState() === true)\n            // Center-marks are disabled in auto-candidate mode\n            ? InputMode.MODE_CORNER\n            : InputMode.MODE_CENTER;\n\n        // Wrap around, when max number is reached\n        if (mode > maxModeNumber) {\n            mode = InputMode.MODE_VALUE;\n        }\n\n        _mode = mode;\n        _selectCurrentRadioButton();\n    };\n\n    /**\n     * Change the mode number incrementally\n     * @return {void}\n     */\n    self.changeMode = () => {\n        // Increase the mode number\n        self.setMode(_mode + 1);\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getMode = () => _mode;\n\n    /**\n     * Perform actions based on whether auto-candidate mode is on\n     * @param {boolean} state\n     * @return {void}\n     */\n    self.triggerAutoCandidateActions = state => {\n        if (state === true) {\n            // Disable the input mode checkbox\n            _inputModeCenterLabel.classList.add('strike-through');\n            _inputModeCenterLabel.getElementsByTagName('input')[0].disabled = true;\n\n            // Trigger any restrictions on the current input mode\n            self.setMode(self.getMode());\n        } else {\n            // Enable the input mode checkbox\n            _inputModeCenterLabel.classList.remove('strike-through');\n            _inputModeCenterLabel.getElementsByTagName('input')[0].disabled = false;\n        }\n    };\n}\n","/**\n * Extend a base constructor\n * @param {function} constructor\n * @param {function} baseConstructor\n * @return {void}\n */\nexport function extend(constructor, baseConstructor) {\n    // Check the constructor types\n    if ((typeof constructor).toLowerCase() !== 'function') {\n        throw new Error(`Constructor needs to be a function, got ${typeof constructor} instead`);\n    }\n\n    if ((typeof baseConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Base constructor needs to be a function, got ${typeof baseConstructor} instead`);\n    }\n\n    constructor.prototype = new baseConstructor();\n    constructor.prototype.constructor = constructor;\n};\n\n/**\n * Add code from a trait to an object\n * @param {object} instance\n * @param {function} traitConstructor\n * @return {void}\n */\nexport function trait(instance, traitConstructor) {\n    // Check the instance type\n    if ((typeof instance).toLowerCase() !== 'object') {\n        throw new Error(`Instance needs to be an object, got ${typeof instance} instead`);\n    }\n\n    // Check the constructor type\n    if ((typeof traitConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Trait constructor needs to be a function, got ${typeof traitConstructor} instead`);\n    }\n\n    // Create a new instance of the trait\n    const traitInstance = new traitConstructor();\n    // A property or method of the trait\n    let thing;\n\n    // Set the properties/methods in the calling object\n    for (thing in traitInstance) {\n        instance[thing] = traitInstance[thing];\n    }\n};\n","import GridCell from '../Grid/GridCell';\n\nexport default function HasGridCells() {\n    const self = this;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getCells = () => self.gridCells;\n\n    /**\n     * Get a cell by its cell number\n     * @param {number} number A 1-based cell number\n     * @return {GridCell|null}\n     */\n    self.getCell = number => {\n        const cell = self.gridCells.find(cell => cell.getCellNumber() === number);\n        return (cell === undefined) ? null : cell;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.checkDuplicateCellValues = () => {\n        // Pairs of value:gridCell[]\n        // Arrays of cells that have a certain value\n        const cellValues = {};\n\n        self.gridCells.forEach(cell => {\n            // Get the filled in value of the cell\n            const cellValue = cell.getValue();\n\n            // A value is needed for checking\n            if (cellValue === null) {\n                return;\n            }\n\n            // Get the cells that have that value and add the cell\n            const cells = cellValues[cellValue] || [];\n            cells.push(cell);\n            cellValues[cellValue] = cells;\n\n            // Set an error status on all duplicate cells, if there are any\n            if (cells.length > 1) {\n                cells.forEach(cell => cell.setErrorState(true));\n            }\n        });\n    };\n\n    /**\n     * See if any of the cells contain a value\n     * @param {Number} value\n     * @return {boolean}\n     */\n    self.containsValue = value => {\n        value = parseInt(value, 10);\n        const cells = self.getCells();\n\n        for (let i = 0; i < cells.length; i++) {\n            if (cells[i].hasValue(value)) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _rowNumber = rowNumber;\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        const rowIndex = _rowNumber - 1;\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + (rowIndex * 9));\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _columnNumber = columnNumber;\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = _columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 8 numbers, each incremented by 9\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     * @private\n     */\n    let _boxNumber = boxNumber;\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = _boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n}\n","import GridCell from '../Grid/GridCell';\n\n/**\n * @param {GridCell} gridCell\n * @constructor\n */\nexport default function GridCellEventHandler(gridCell) {\n    const self = this;\n\n    /**\n     * The cell to register event handlers for\n     * @type {GridCell}\n     * @private\n     */\n    const _gridCell = gridCell;\n\n    /**\n     * Register event handlers for a grid cell\n     * @return {void}\n     */\n    self.register = () => {\n        _registerMouseDownEvent();\n        _registerMouseEnterEvent();\n        _registerMouseUpEvent();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseDownEvent = () => {\n        _gridCell.getElement().addEventListener('mousedown', () => {\n            if (Sudoku.controls.ctrlKeyIsPressed()) {\n                // Toggle the selected status when clicked, if the ctrl key is pressed\n                _gridCell.setSelectedState(! _gridCell.isSelected());\n            } else {\n                // Select only this cell, if the ctrl key is not pressed\n                Sudoku.grid.deselectAllCells();\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseEnterEvent = () => {\n        _gridCell.getElement().addEventListener('mouseenter', () => {\n            // Allow multiple cells to be selected\n            if (Sudoku.controls.mouseIsPressed()) {\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseUpEvent = () => {\n        // On mouse up, this is the last selected cell\n        _gridCell.getElement().addEventListener(\n            'mouseup',\n            () => Sudoku.grid.setLastNavigatedCell(_gridCell)\n        );\n    };\n}\n","import GridCell from '../GridCell';\n\n/**\n * @param {GridCell} cell\n * @constructor\n */\nexport default function PencilMarksInterface(cell) {\n    const self = this;\n\n    /**\n     * The cell to apply pencil marks to\n     * @type {GridCell}\n     */\n    self.cell = cell;\n\n    /**\n     * The pencil mark digits\n     * @type {number[]}\n     */\n    self.digits = [];\n\n    /**\n     * @return {number[]}\n     */\n    self.get = () => self.digits;\n\n    /**\n     * Add or remove one 1 digit\n     * @param {number} digit\n     * @return {void}\n     */\n    self.toggleDigit = digit => {\n        throw new Error(\"'toggleDigit' method is not implemented in the pencil marks object\");\n    };\n\n    /**\n     * Replace all digits\n     * @param {number[]} digits\n     * @return {void}\n     */\n    self.setDigits = digits => {\n        throw new Error(\"'setDigits' method is not implemented in the pencil marks object\");\n    };\n\n    /**\n     * See if a pencil mark exists\n     * @param {number} digit\n     * @return {boolean}\n     */\n    self.has = digit => (self.get().indexOf(digit) > -1);\n\n    /**\n     * See if any pencil marks exist\n     * @return {boolean}\n     */\n    self.hasAny = () => (self.get().length > 0);\n\n    /**\n     * Show the pencil marks in the cell\n     * @return {void}\n     */\n    self.show = () => {\n        throw new Error(\"'show' method is not implemented in the pencil marks object\");\n    };\n}\n","import {extend} from '../../functions';\nimport PencilMarksInterface from './PencilMarksInterface';\nimport GridCell from '../GridCell';\n\nextend(CornerMarks, PencilMarksInterface);\n\n/**\n * @inheritDoc\n */\nexport default function CornerMarks(cell) {\n    const self = this;\n    PencilMarksInterface.call(self, cell);\n\n    /**\n     * @inheritDoc\n     */\n    self.toggleDigit = digit => {\n        // Don't set a corner mark, if a value is filled in\n        if (self.cell.getValue() !== null) {\n            return;\n        }\n\n        // Remove if the digit exists, otherwise add it\n        const cornerMarks = self.get();\n        const existingIndex = cornerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            cornerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && cornerMarks.length < GridCell.MAX_CORNER_MARKS) {\n                cornerMarks.push(digit);\n            }\n        }\n\n        self.setDigits(cornerMarks);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    self.setDigits = digits => {\n        // Don't set corner marks, if there are too many\n        if (digits.length > GridCell.MAX_CORNER_MARKS) {\n            return;\n        }\n\n        self.digits = digits;\n        self.show();\n    };\n\n    /**\n     * @inheritDoc\n     */\n    self.show = () => {\n        // Clear all corner marks first\n        const allElements = self.cell.getElement().getElementsByClassName('corner-mark');\n        for (let i = 0; i < allElements.length; i++) {\n            allElements[i].innerText = null;\n        }\n\n        // Show the corner marks\n        self.get()\n            // Sort ascending\n            .sort((a, b) => a - b)\n            .forEach((item, index) => {\n                document.getElementById(`corner-mark-${self.cell.getCellNumber()}-${index + 1}`)\n                    .innerText = item.toString(10);\n            });\n    };\n}\n","import {extend} from '../../functions';\nimport PencilMarksInterface from './PencilMarksInterface';\nimport GridCell from '../GridCell';\n\nextend(CenterMarks, PencilMarksInterface);\n\n/**\n * @inheritDoc\n */\nexport default function CenterMarks(cell) {\n    const self = this;\n    PencilMarksInterface.call(self, cell);\n\n    /**\n     * Automatically filled in candidates\n     * @type {number[]}\n     * @private\n     */\n    let _autoCandidates = [];\n\n    /**\n     * @return {number[]}\n     */\n    self.getAutoCandidates = () => _autoCandidates;\n\n    /**\n     * @inheritDoc\n     */\n    self.toggleDigit = digit => {\n        // Setting center marks is disabled in auto-candidate mode\n        if (Sudoku.settings.autoCandidateState() === true) {\n            return;\n        }\n\n        // Don't set a center mark, if a value is filled in\n        if (self.cell.getValue() !== null) {\n            return;\n        }\n\n        // Remove if the digit exists, otherwise add it\n        const centerMarks = self.get();\n        const existingIndex = centerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            centerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && centerMarks.length < GridCell.MAX_CENTER_MARKS) {\n                centerMarks.push(digit);\n            }\n        }\n\n        self.setDigits(centerMarks);\n    };\n\n    /**\n     * @inheritDoc\n     * @param {boolean} useAutoCandidates Whether to use auto-candidates, or normal center marks\n     */\n    self.setDigits = (digits, useAutoCandidates = false) => {\n        // Empty the candidates, if there are too many\n        if (useAutoCandidates === true && digits.length > GridCell.MAX_CENTER_MARKS) {\n            digits = [];\n        }\n\n        // Don't set pencil marks, if there are too many\n        if (digits.length > GridCell.MAX_CENTER_MARKS) {\n            return;\n        }\n\n        (useAutoCandidates === true)\n            ? _autoCandidates = digits\n            : self.digits = digits;\n\n        self.show(useAutoCandidates);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    self.has = digit => {\n        const centerMarks = (Sudoku.settings.autoCandidateState() === true)\n            ? self.getAutoCandidates()\n            : self.get();\n\n        return (centerMarks.indexOf(digit) > -1);\n    };\n\n    /**\n     * @inheritDoc\n     * @param {boolean} useAutoCandidates Whether to use auto-candidates, or normal center marks\n     */\n    self.show = (useAutoCandidates = false) => {\n        let centerMarks = (useAutoCandidates === true)\n            ? self.getAutoCandidates()\n            : self.get();\n\n        centerMarks = centerMarks\n            // Sort ascending\n            .sort((a, b) => a - b)\n            // Concatenate the numbers\n            .join('');\n\n        // Show the pencil marks\n        self.cell.getElement()\n            .getElementsByClassName('center-marks')[0]\n            .innerText = centerMarks;\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport GridCellEventHandler from '../EventHandlers/GridCellEventHandler';\nimport InputMode from '../InputMode';\nimport CornerMarks from './PencilMarks/CornerMarks';\nimport CenterMarks from './PencilMarks/CenterMarks';\n\n/**\n * The maximum amount of pencil marks\n * @type {number}\n * @static\n */\nGridCell.MAX_CORNER_MARKS = 8;\nGridCell.MAX_CENTER_MARKS = 5;\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     * @private\n     */\n    const _cellNumber = cellNumber;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLLIElement|null}\n     * @private\n     */\n    let _element = null;\n\n    /**\n     * The corner marks of the cell\n     * @type {CornerMarks}\n     * @private\n     */\n    const _cornerMarks = new CornerMarks(self);\n\n    /**\n     * The center marks of the cell\n     * @type {CenterMarks}\n     * @private\n     */\n    const _centerMarks = new CenterMarks(self);\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     * @private\n     */\n    let _gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     * @private\n     */\n    let _gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     * @private\n     */\n    let _gridBox = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     * @private\n     */\n    let _isPrefilled = false;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     * @private\n     */\n    let _colorNumber = 1;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    let _value = null;\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    let _isSelected = false;\n\n    /**\n     * Whether the cell is currently highlighted\n     * @type {boolean}\n     * @private\n     */\n    let _isHighlighted = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        // Get the HTML cell element\n        _element = document.getElementById(`grid-cell-${self.getCellNumber()}`);\n        if (_element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.getCellNumber()}' not found`);\n        }\n\n        // Register event handlers\n        const eventHandler = new GridCellEventHandler(self);\n        eventHandler.register();\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getCellNumber = () => _cellNumber;\n\n    /**\n     * @return {HTMLLIElement|null}\n     */\n    self.getElement = () => _element;\n\n    /**\n     * @return {boolean}\n     */\n    self.isPrefilled = () => _isPrefilled;\n\n    /**\n     * @return {number}\n     */\n    self.getColorNumber = () => _colorNumber;\n\n    /**\n     * Wrapper for value, corner-marks and center-marks setting\n     * @param {number|null} digit\n     * @param {number|null} mode The input mode, uses current mode by default\n     * @return {void}\n     * @see InputMode for the mode constants\n     */\n    self.setDigit = (digit, mode = null) => {\n        // Remove error state in manual error checking mode\n        if (! Sudoku.settings.autoErrorCheckingState()) {\n            self.setErrorState(false);\n        }\n\n        // Use the current input mode, if null\n        if (mode === null) {\n            mode = Sudoku.inputMode.getMode();\n        }\n\n        // Null means deleting\n        if (digit === null) {\n            // Remove the marks only if no value is filled in\n            if (self.getValue() === null) {\n                self.getCornerMarks().setDigits([]);\n\n                if (! Sudoku.settings.autoCandidateState()) {\n                    self.getCenterMarks().setDigits([]);\n                }\n            } else {\n                self.toggleValue(null);\n            }\n\n            return;\n        }\n\n        switch (mode) {\n            case InputMode.MODE_VALUE:\n                self.toggleValue(digit);\n                break;\n            case InputMode.MODE_CORNER:\n                self.getCornerMarks().toggleDigit(digit);\n                break;\n            case InputMode.MODE_CENTER:\n                self.getCenterMarks().toggleDigit(digit);\n                break;\n        }\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => _value;\n\n    /**\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.toggleValue = digit => {\n        // Remove the value, if the same digit is entered\n        if (digit === self.getValue()) {\n            digit = null;\n        }\n\n        // Show or hide the pencil marks\n        _toggleMarksVisibility(digit === null);\n\n        // Show the value on screen\n        self.getElement().getElementsByClassName('cell-value')[0].innerText = digit;\n\n        _value = digit;\n\n        // Highlight other cells\n        Sudoku.gridCellHighlighter.highlightRelatedCells();\n\n        // Remove pencil marks of related cells, if needed\n        if (Sudoku.settings.autoRemovePencilMarksState() === true) {\n            _removeRelatedPencilMarks(digit);\n        }\n\n        // Show possible candidates if needed\n        if (Sudoku.settings.autoCandidateState() === true) {\n            Sudoku.grid.determineCandidates();\n        }\n    };\n\n    /**\n     * Check if the cell has a value\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasValue = (digit = null) => {\n        // Check if the cell has any value\n        if (digit === null) {\n            return (self.getValue() !== null);\n        }\n\n        // Or check for a specific value\n        return (self.getValue() === digit);\n    };\n\n    /**\n     * Remove a pencil mark\n     * @param type 'corner' or 'center'\n     * @param digit\n     * @return {void}\n     */\n    self.removePencilMark = (type, digit) => {\n        if (['corner', 'center'].indexOf(type) < 0) {\n            throw new Error(`Invalid pencil mark type given, only 'corner' and 'center' are valid, '${type}' given`);\n        }\n\n        const pencilMarksObject = (type === 'corner')\n            ? self.getCornerMarks()\n            : self.getCenterMarks();\n\n        // Only remove the digit, if it exists\n        const pencilMarks = pencilMarksObject.get();\n        const digitIndex = pencilMarks.indexOf(digit);\n        if (digitIndex > -1) {\n            pencilMarks.splice(digitIndex, 1);\n            pencilMarksObject.setDigits(pencilMarks);\n        }\n    };\n\n    /**\n     * Remove pencil marks of related cells, based on cell value\n     * @param {number} digit\n     * @return {void}\n     * @private\n     */\n    const _removeRelatedPencilMarks = digit => {\n        self.getRow().getCells()\n            .concat(self.getColumn().getCells())\n            .concat(self.getBox().getCells())\n            .forEach(cell => {\n                cell.removePencilMark('corner', digit);\n                cell.removePencilMark('center', digit);\n            });\n    };\n\n    /**\n     * Toggle the visibility of the pencil marks\n     * @param {boolean} show\n     * @private\n     */\n    const _toggleMarksVisibility = show => {\n        const toggleMethod = show ? 'remove' : 'add';\n\n        // Toggle the corner marks\n        for (let i = 1; i < 9; i++) {\n            document.getElementById(`corner-mark-${self.getCellNumber()}-${i}`)\n                .classList[toggleMethod]('hide');\n        }\n\n        // Toggle the center marks\n        self.getElement().getElementsByClassName('center-marks')[0]\n            .classList[toggleMethod]('hide');\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isSelected = () => _isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setSelectedState = selected => {\n        const toggleMethod = selected ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-selected');\n\n        // Don't add duplicates to the list\n        if (selected && ! self.isSelected()) {\n            Sudoku.grid.addSelectedCell(self);\n        }\n\n        _isSelected = selected;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isHighlighted = () => _isHighlighted;\n\n    /**\n     * @param {boolean} highlighted\n     * @return {void}\n     */\n    self.setHighlightedState = highlighted => {\n        const toggleMethod = highlighted ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-highlighted');\n\n        // Don't add duplicates to the list\n        if (highlighted && ! self.isHighlighted()) {\n            Sudoku.gridCellHighlighter.addHighlightedCell(self);\n        }\n\n        _isHighlighted = highlighted;\n    };\n\n    /**\n     * @return {CornerMarks}\n     */\n    self.getCornerMarks = () => _cornerMarks;\n\n    /**\n     * @return {CenterMarks}\n     */\n    self.getCenterMarks = () => _centerMarks;\n\n    /**\n     * @return {GridRow|null}\n     */\n    self.getRow = () => _gridRow;\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => _gridRow = row;\n\n    /**\n     * @return {GridColumn|null}\n     */\n    self.getColumn = () => _gridColumn;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => _gridColumn = column;\n\n    /**\n     * @return {GridBox|null}\n     */\n    self.getBox = () => _gridBox;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => _gridBox = box;\n\n    /**\n     * Set the error status of the element\n     * @param {boolean} on\n     * @return {void}\n     */\n    self.setErrorState = on => {\n        const toggleMethod = on ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('has-error');\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.getCellNumber()\n        + (self.isPrefilled() ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.getColorNumber()\n        + 'cr' + self.getCornerMarks().get().join('')\n        + 'cn' + self.getCenterMarks().get().join('');\n}\n","export default function CommandInterface() {\n    const self = this;\n\n    /**\n     * Execute the command\n     * @return {void}\n     */\n    self.execute = () => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../functions';\nimport CommandInterface from './CommandInterface';\n\nextend(UndoableCommandInterface, CommandInterface);\n\nexport default function UndoableCommandInterface() {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * Undo the command\n     * @return {void}\n     */\n    self.undo = () => {\n        throw new Error(\"'undo' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../../functions';\nimport UndoableCommandInterface from '../UndoableCommandInterface';\nimport InputMode from '../../InputMode';\n\nextend(ChangeDigitCommand, UndoableCommandInterface);\n\n/**\n * @param {number|null} digit\n * @constructor\n */\nexport default function ChangeDigitCommand(digit) {\n    const self = this;\n    UndoableCommandInterface.call(self);\n\n    /**\n     * The digit to apply to cell(s)\n     * @type {number|null}\n     * @private\n     */\n    const _digit = digit;\n\n    /**\n     * The cells to apply the digit to\n     * @type {GridCell[]}\n     * @private\n     */\n    const _cells = Sudoku.grid.getSelectedCells();\n\n    /**\n     * The input mode for the digit\n     * @type {number}\n     * @private\n     */\n    const _inputMode = Sudoku.inputMode.getMode();\n\n    /**\n     * Contains the state of cells, before changing the digit\n     * @type {object}\n     * @private\n     */\n    const _cellsState = (() => {\n        // Pairs of cellNumber:{value, cornerMarks, centerMarks}\n        const state = {};\n\n        // Collect the state of all cells\n        _cells.forEach(cell => {\n            state[cell.getCellNumber()] = {\n                value: cell.getValue(),\n                // Copy the array, because they go by reference\n                cornerMarks: cell.getCornerMarks().get().map(item => item),\n                centerMarks: cell.getCenterMarks().get().map(item => item),\n            };\n        });\n\n        return state;\n    })();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        _cells.forEach(cell => cell.setDigit(_digit, _inputMode));\n\n        if (Sudoku.settings.autoErrorCheckingState()) {\n            Sudoku.grid.checkForErrors();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    self.undo = () => {\n        // Apply the previous values to the cell(s)\n        _cells.forEach(cell => {\n            const state = _cellsState[cell.getCellNumber()];\n\n            cell.toggleValue(state.value);\n            // Copy the array, because they go by reference\n            cell.getCornerMarks().setDigits(state.cornerMarks.map(item => item));\n            cell.getCenterMarks().setDigits(state.centerMarks.map(item => item));\n        });\n\n        if (Sudoku.settings.autoErrorCheckingState() === true) {\n            Sudoku.grid.checkForErrors();\n        }\n    };\n}\n","import {extend} from '../functions';\nimport CommandInterface from './CommandInterface';\n\nextend(TogglableCommandInterface, CommandInterface);\n\nexport default function TogglableCommandInterface() {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * The current state of the command\n     * @type {boolean|function|null}\n     * @private\n     */\n    self.state = null;\n\n    /**\n     * @inheritDoc\n     * @param {boolean} state\n     */\n    self.execute = state => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n\n    /**\n     * Toggle between states of the command\n     * @return {void}\n     */\n    self.toggle = () => {\n        const currentState = ((typeof self.state).toLowerCase() === 'function')\n            ? self.state()\n            : self.state;\n\n        if (currentState === null) {\n            throw new Error('The command needs an (initial) boolean state, it can be a function that returns a boolean');\n        }\n\n        self.execute(! currentState);\n    };\n}\n","import {extend} from '../../functions';\nimport CommandInterface from '../CommandInterface';\nimport PauseGameCommand from '../PauseGameCommand';\n\nextend(OpenModalCommand, CommandInterface);\n\n/**\n * @param {string} modalId ID of the modal dialog to open\n * @constructor\n */\nexport default function OpenModalCommand(modalId) {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    const _modalId = modalId;\n\n    /**\n     * The modal dialog to show\n     * @type {HTMLElement}\n     * @private\n     */\n    const _modalElement = document.getElementById(_modalId);\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        Sudoku.modal.setCurrentModalId(_modalId);\n        _modalElement.classList.add('show');\n\n        (new PauseGameCommand()).execute(true);\n    };\n}\n","import {extend} from '../functions';\nimport TogglableCommandInterface from './TogglableCommandInterface';\nimport OpenModalCommand from './Modal/OpenModalCommand';\n\nextend(PauseGameCommand, TogglableCommandInterface);\n\nexport default function PauseGameCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.game.isPaused();\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    const _bodyElement = document.getElementById('page-body');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const pauseIcon = document.getElementById('game-pause-icon');\n        const resumeIcon = document.getElementById('game-resume-icon');\n\n        if (state === true) {\n            Sudoku.clock.pause();\n            _bodyElement.classList.add('is-paused');\n\n            // Toggle the pause/resume icons\n            pauseIcon.classList.add('hide');\n            resumeIcon.classList.remove('hide');\n\n            // Only open the pause modal, if there is no modal open yet\n            if (Sudoku.modal.openState() === false) {\n                const openModalCommand = new OpenModalCommand('pause-modal');\n                openModalCommand.execute();\n            }\n        } else {\n            Sudoku.clock.unpause();\n            _bodyElement.classList.remove('is-paused');\n\n            // Toggle the pause/resume icons\n            pauseIcon.classList.remove('hide');\n            resumeIcon.classList.add('hide');\n        }\n\n        Sudoku.game.setPausedState(state);\n    };\n}\n","import {extend} from '../../functions';\nimport CommandInterface from '../CommandInterface';\nimport PauseGameCommand from '../PauseGameCommand';\n\nextend(CloseAllModalsCommand, CommandInterface);\n\n/**\n * @constructor\n */\nexport default function CloseAllModalsCommand() {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * @type {PauseGameCommand}\n     * @private\n     */\n    const _pauseGameCommand = new PauseGameCommand();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        // Close all the modals\n        const modals = document.getElementsByClassName('modal');\n        for (let i = 0; i < modals.length; i++) {\n            modals[i].classList.remove('show');\n        }\n\n        _pauseGameCommand.execute(false);\n        Sudoku.modal.setCurrentModalId(null);\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(ShowClockCommand, TogglableCommandInterface);\n\nexport default function ShowClockCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.clockState();\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    const _clockElement = document.getElementById('clock-wrapper');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-show-clock');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'remove' : 'add';\n        _clockElement.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.clockState(state);\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(AutoErrorCheckingCommand, TogglableCommandInterface);\n\nexport default function AutoErrorCheckingCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoErrorCheckingState();\n\n    /**\n     * The manual error checking button\n     * @type {HTMLElement}\n     * @private\n     */\n    const _errorCheckingButton = document.getElementById('check-errors');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-auto-error-checking');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'add' : 'remove';\n        _errorCheckingButton.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.autoErrorCheckingState(state);\n\n        // Check or remove errors\n        (state === true)\n            ? Sudoku.grid.checkForErrors()\n            : Sudoku.grid.removeAllErrors();\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(AutoRemovePencilMarksCommand, TogglableCommandInterface);\n\nexport default function AutoRemovePencilMarksCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoRemovePencilMarksState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-auto-remove-pencil-marks');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.autoRemovePencilMarksState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightRowCommand, TogglableCommandInterface);\n\nexport default function HighlightRowCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightRowState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-row');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightRowState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightColumnCommand, TogglableCommandInterface);\n\nexport default function HighlightColumnCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightColumnState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-column');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightColumnState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightBoxCommand, TogglableCommandInterface);\n\nexport default function HighlightBoxCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightBoxState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-box');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightBoxState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightValueCommand, TogglableCommandInterface);\n\nexport default function HighlightValueCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightValueState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-value');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightValueState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightPencilMarksCommand, TogglableCommandInterface);\n\nexport default function HighlightPencilMarksCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightPencilMarksState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-pencil-marks');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightPencilMarksState(state);\n    };\n};\n","import {extend} from '../functions';\nimport TogglableCommandInterface from './TogglableCommandInterface';\n\nextend(AutoCandidateModeCommand, TogglableCommandInterface);\n\nexport default function AutoCandidateModeCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoCandidateState();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        Sudoku.settings.autoCandidateState(state);\n        Sudoku.inputMode.triggerAutoCandidateActions(state);\n\n        (state === true)\n            ? Sudoku.grid.determineCandidates()\n            : Sudoku.grid.removeCandidates();\n    };\n}\n","import Controls from './Controls';\nimport InputMode from './InputMode';\nimport Grid from './Grid/Grid';\nimport Clock from './Clock';\nimport DocumentEventHandler from './EventHandlers/DocumentEventHandler';\nimport CommandHistory from './Commands/CommandHistory';\nimport Meta from './Meta';\nimport Modal from './Modal';\nimport Settings from './Settings';\nimport SettingsEventHandler from './EventHandlers/SettingsEventHandler';\nimport ActionsEventHandler from './EventHandlers/ActionsEventHandler';\nimport GridCellHighlighter from './Grid/GridCellHighlighter';\nimport Game from './Game';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    game: new Game(),\n    settings: new Settings(),\n    history: new CommandHistory(),\n    meta: new Meta(),\n    controls: new Controls(),\n    inputMode: new InputMode(),\n    gridCellHighlighter: new GridCellHighlighter(),\n    grid: new Grid(),\n    clock: new Clock(),\n    modal: new Modal(),\n    documentEventHandler: new DocumentEventHandler(),\n    settingsEventHandler: new SettingsEventHandler(),\n    actionsEventHandler: new ActionsEventHandler(),\n};\n\nSudoku.settings.init();\nSudoku.settingsEventHandler.init();\nSudoku.clock.init();\nSudoku.modal.init();\nSudoku.meta.init();\nSudoku.inputMode.init();\nSudoku.controls.init();\nSudoku.grid.init();\nSudoku.documentEventHandler.init();\nSudoku.actionsEventHandler.init();\n\n/*\nconst LZString = require('lz-string');\n\nfunction logResults(state, label = null) {\n    const result1 = LZString.compress(state);\n    const result2 = LZString.compressToEncodedURIComponent(state);\n\n    console.group(label || 'Compression result');\n    console.log('Original state', state.length, state);\n    console.log('Compressed state', result1.length, result1);\n    console.log('URL-encoded compressed state', result2.length, result2);\n    console.groupEnd();\n}\n\n// The state from the application\n// logResults(JSON.stringify(Sudoku.grid.getState()), 'App');\n\n// 3 digits per cell: 2 digits for cell number, 1 for value\nconst threeDigits = '038149156382416811295104457093378472567629123781806';\nlogResults(threeDigits, '3 digits per cell');\n\n// 81 numbers, representing every cell value (0 = empty)\nconst eightyOneNumbers = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nlogResults(eightyOneNumbers, '81 numbers');\n\n// A 1 as a counter, so the the digit 2 is '11', and 7 is '1111111' (delimited by a comma)\nconst csvOnes = eightyOneNumbers.split('')\n    .map(number => {\n        number = parseInt(number, 10);\n        return '1'.repeat(number);\n    })\n    .join(',');\nlogResults(csvOnes, 'CSV, counting with ones');\n\n// Grid cells state\nconst cellsState = ('n' + '1'.repeat(23) // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v' + '1'.repeat(7) // Cell value\n    + 'c' + '1'.repeat(4) // Color number 4\n    + 'cr' + [3, 4, 6, 8].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Center pencil marks\n).repeat(81) // For 81 cells\n// 366 length compressed, 975 length URL-encoded compressed\nlogResults(cellsState, 'Cells state v1');\n\n// Grid cells state, normal way\nconst cellsState2 = ('n23' // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v7' // Cell value\n    + 'c4' // Color number 4\n    + 'cr' + [3, 4, 6, 8].join('') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].join('') // Center pencil marks\n).repeat(81) // For 81 cells\n// 118 length compressed, 315 length URL-encoded compressed\nlogResults(cellsState2, 'Cells state v2');\n//*/\n","export default function Game() {\n    const self = this;\n\n    /**\n     * Indicates whether the game is paused\n     * @type {boolean}\n     * @private\n     */\n    let _isPaused = false;\n\n    /**\n     * @return {boolean}\n     */\n    self.isPaused = () => _isPaused;\n\n    /**\n     * @param {boolean} state\n     * @return {boolean}\n     */\n    self.setPausedState = state => _isPaused = state;\n}\n","import ShowClockCommand from './Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from './Commands/Settings/AutoErrorCheckingCommand';\nimport AutoRemovePencilMarksCommand from './Commands/Settings/AutoRemovePencilMarksCommand';\nimport HighlightRowCommand from './Commands/Settings/HighlightRowCommand';\nimport HighlightColumnCommand from './Commands/Settings/HighlightColumnCommand';\nimport HighlightBoxCommand from './Commands/Settings/HighlightBoxCommand';\nimport HighlightValueCommand from './Commands/Settings/HighlightValueCommand';\nimport HighlightPencilMarksCommand from './Commands/Settings/HighlightPencilMarksCommand';\n\nexport default function Settings() {\n    const self = this;\n\n    /**\n     * Indicates whether the clock is shown\n     * @type {boolean}\n     * @private\n     */\n    let _clockState;\n\n    /**\n     * Indicates whether automatic error checking is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _autoErrorCheckingState;\n\n    /**\n     * Indicates whether pencil marks should automatically be removed\n     * @type {boolean}\n     * @private\n     */\n    let _autoRemovePencilMarksState = false;\n\n    /**\n     * Indicates whether highlighting rows is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightRowState;\n\n    /**\n     * Indicates whether highlighting columns is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightColumnState;\n\n    /**\n     * Indicates whether highlighting 3x3 boxes is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightBoxState;\n\n    /**\n     * Indicates whether highlighting cells with the same value is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightValueState;\n\n    /**\n     * Indicates whether highlighting cells with the same value (pencil marks) is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightPencilMarksState;\n\n    /**\n     * Indicates whether auto-candidate mode is on\n     * @type {boolean}\n     * @private\n     */\n    let _autoCandidateState = false;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        // Initialize the settings in local storage if needed\n        if (localStorage.getItem('settings') === null) {\n            localStorage.setItem('settings', JSON.stringify({}));\n        }\n\n        _fromLocalStorage();\n        _applySettings();\n    };\n\n    /**\n     * Get settings stored in local storage\n     * @return {void}\n     * @private\n     */\n    const _fromLocalStorage = () => {\n        const settings = JSON.parse(localStorage.getItem('settings'));\n\n        _clockState = (settings.clock !== undefined)\n            ? settings.clock\n            : true;\n\n        _autoErrorCheckingState = (settings.autoErrorChecking !== undefined)\n            ? settings.autoErrorChecking\n            : true;\n\n        _autoRemovePencilMarksState = (settings.autoRemovePencilMarks !== undefined)\n            ? settings.autoRemovePencilMarks\n            : false;\n\n        _highlightRowState = (settings.highlightRow !== undefined)\n            ? settings.highlightRow\n            : true;\n\n        _highlightColumnState = (settings.highlightColumn !== undefined)\n            ? settings.highlightColumn\n            : true;\n\n        _highlightBoxState = (settings.highlightBox !== undefined)\n            ? settings.highlightBox\n            : true;\n\n        _highlightValueState = (settings.highlightValue !== undefined)\n            ? settings.highlightValue\n            : true;\n\n        _highlightPencilMarksState = (settings.highlightPencilMarks !== undefined)\n            ? settings.highlightPencilMarks\n            : true;\n    };\n\n    /**\n     * Export settings to local storage\n     * @return {void}\n     * @private\n     */\n    const _toLocalStorage = () => {\n        localStorage.setItem('settings', JSON.stringify({\n            clock: self.clockState(),\n            autoErrorChecking: self.autoErrorCheckingState(),\n            autoRemovePencilMarks: self.autoRemovePencilMarksState(),\n            highlightRow: self.highlightRowState(),\n            highlightColumn: self.highlightColumnState(),\n            highlightBox: self.highlightBoxState(),\n            highlightValue: self.highlightValueState(),\n            highlightPencilMarks: self.highlightPencilMarksState(),\n        }));\n    };\n\n    /**\n     * Apply the stored settings\n     * @return {void}\n     * @private\n     */\n    const _applySettings = () => {\n        (new ShowClockCommand()).execute(self.clockState());\n        (new AutoErrorCheckingCommand()).execute(self.autoErrorCheckingState());\n        (new AutoRemovePencilMarksCommand()).execute(self.autoRemovePencilMarksState());\n        (new HighlightRowCommand()).execute(self.highlightRowState());\n        (new HighlightColumnCommand()).execute(self.highlightColumnState());\n        (new HighlightBoxCommand()).execute(self.highlightBoxState());\n        (new HighlightValueCommand()).execute(self.highlightValueState());\n        (new HighlightPencilMarksCommand()).execute(self.highlightPencilMarksState());\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.clockState = (state = null) => {\n        if (state !== null) {\n            _clockState = state;\n            _toLocalStorage();\n        }\n\n        return _clockState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoErrorCheckingState = (state = null) => {\n        if (state !== null) {\n            _autoErrorCheckingState = state;\n            _toLocalStorage();\n        }\n\n        return _autoErrorCheckingState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoRemovePencilMarksState = (state = null) => {\n        if (state !== null) {\n            _autoRemovePencilMarksState = state;\n            _toLocalStorage();\n        }\n\n        return _autoRemovePencilMarksState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightRowState = (state = null) => {\n        if (state !== null) {\n            _highlightRowState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightRowState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightColumnState = (state = null) => {\n        if (state !== null) {\n            _highlightColumnState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightColumnState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightBoxState = (state = null) => {\n        if (state !== null) {\n            _highlightBoxState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightBoxState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightValueState = (state = null) => {\n        if (state !== null) {\n            _highlightValueState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightValueState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightPencilMarksState = (state = null) => {\n        if (state !== null) {\n            _highlightPencilMarksState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightPencilMarksState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoCandidateState = (state = null) => {\n        if (state !== null) {\n            _autoCandidateState = state;\n        }\n\n        return _autoCandidateState;\n    };\n}\n","import UndoableCommandInterface from './UndoableCommandInterface';\n\nexport default function CommandHistory() {\n    const self = this;\n\n    /**\n     * The list of commands that have been executed\n     * @type {UndoableCommandInterface[]}\n     * @private\n     */\n    let _past = [];\n\n    /**\n     * The list of commands to redo\n     * @type {UndoableCommandInterface[]}\n     * @private\n     */\n    let _future = [];\n\n    /**\n     * Add a command to be executed\n     * @param {UndoableCommandInterface} command\n     * @param {boolean} clearFuture Whether to clear the future (redo) stack\n     * @return {number}\n     */\n    self.execute = (command, clearFuture = true) => {\n        if (! (command instanceof UndoableCommandInterface)) {\n            throw new Error('Command needs to have UndoableCommandInterface in its prototype chain');\n        }\n\n        command.execute();\n        _past.push(command);\n\n        // Clear the future (redo) list if needed\n        if (clearFuture) {\n            _future = [];\n        }\n    };\n\n    /**\n     * Undo the most recent command\n     * @return {void}\n     */\n    self.undo = () => {\n        // A command needs to exist\n        if (_past.length < 1) {\n            return;\n        }\n\n        // Undo the command\n        const command = _past.pop();\n        command.undo();\n\n        // Put the command in the future stack, for redoing\n        _future.push(command);\n    };\n\n    /**\n     * Execute the most recent command from the future stack\n     * @return {void}\n     */\n    self.redo = () => {\n        // A command needs to exist\n        if (_future.length < 1) {\n            return;\n        }\n\n        // Redo the command\n        const command = _future.pop();\n        self.execute(command, false);\n    };\n}\n","export default function Meta() {\n    const self = this;\n\n    /**\n     * The name of the application\n     * @type {string}\n     */\n    const appName = document.getElementById('meta-app-name').getAttribute('content');\n\n    /**\n     * The page title element\n     * @type {HTMLCollectionOf<HTMLElement>}\n     */\n    const titleElements = document.getElementsByClassName('page-title');\n\n    /**\n     * The title input field\n     * @type {HTMLInputElement}\n     */\n    const titleField = document.getElementById('puzzle-title');\n\n    /**\n     * The description input field\n     * @type {HTMLTextAreaElement}\n     */\n    const descriptionField = document.getElementById('puzzle-description');\n\n    /**\n     * An optional title for the sudoku\n     * @type {string|null}\n     */\n    let title = null;\n\n    /**\n     * An optional description for the sudoku\n     * @type {string|null}\n     */\n    let description = null;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableTextFields();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableTextFields = () => {\n        const titleCallback = () => {\n            title = titleField.value.trim();\n\n            // Update the page title\n            const pageTitle = (title !== '')\n                ? `${title} - ${appName}`\n                : appName;\n\n            for (let i = 0; i < titleElements.length; i++) {\n                titleElements[i].innerText = pageTitle;\n            }\n        };\n\n        titleField.addEventListener('change', titleCallback);\n        titleField.addEventListener('keyup', titleCallback);\n        titleField.addEventListener('paste', titleCallback);\n\n        const descriptionCallback = () => description = descriptionField.value;\n\n        descriptionField.addEventListener('change', descriptionCallback);\n        descriptionField.addEventListener('keyup', descriptionCallback);\n        descriptionField.addEventListener('paste', descriptionCallback);\n    };\n}\n","import Visitor from './Utilities/Visitor';\n\nexport default function Controls() {\n    const self = this;\n\n    /**\n     * Indicates whether a mouse button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _mousePressed = false;\n\n    /**\n     * Indicates whether a ctrl button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _ctrlKeyPressed = false;\n\n    /**\n     * Indicates whether a shift button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _shiftKeyPressed = false;\n\n    /**\n     * Arrow key codes\n     * @type {object}\n     * @private\n     */\n    const _arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Arrow key codes, as 1 array\n     * @type {string[]}\n     * @private\n     */\n    const _arrowKeysConcatenated = _arrowKeys.up\n        .concat(_arrowKeys.down)\n        .concat(_arrowKeys.left)\n        .concat(_arrowKeys.right);\n\n    /**\n     * Number key codes\n     * @type {string[]}\n     * @private\n     */\n    const _numberKeys = [\n        'Digit1', 'Numpad1', 'Digit2', 'Numpad2', 'Digit3', 'Numpad3',\n        'Digit4', 'Numpad4', 'Digit5', 'Numpad5', 'Digit6', 'Numpad6',\n        'Digit7', 'Numpad7', 'Digit8', 'Numpad8', 'Digit9', 'Numpad9',\n    ];\n\n    /**\n     * Delete key codes\n     * @type {string[]}\n     * @private\n     */\n    const _deleteKeys = ['Delete', 'Backspace'];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => _mousePressed = true);\n        document.addEventListener('mouseup', () => _mousePressed = false);\n        document.addEventListener('keyup', _keyUpDownCallback);\n        document.addEventListener('keydown', _keyUpDownCallback);\n        document.addEventListener('keydown', _keyDownCallback);\n        _registerClickDisabling();\n    };\n\n    /**\n     * Disable click events for certain elements\n     * @return {void}\n     * @private\n     */\n    const _registerClickDisabling = () => {\n        document.addEventListener('click', event => {\n            if (event.target.closest('.click-prevent') !== null) {\n                event.preventDefault();\n            }\n        });\n    };\n\n    /**\n     * Decide whether to cancel a keyboard listener\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.cancelKeyboardEvent = event => {\n        const nodeName = event.target.nodeName.toLowerCase();\n\n        // Don't use custom listener on input elements\n        return (['input', 'textarea'].indexOf(nodeName) > -1);\n    };\n\n    /**\n     * Callback for keydown and keyup\n     * @param {Event} event\n     * @return {void}\n     * @private\n     */\n    const _keyUpDownCallback = event => {\n        _ctrlKeyPressed = Visitor.usesMacOs ? event.metaKey : event.ctrlKey;\n        _shiftKeyPressed = event.shiftKey;\n    };\n\n    /**\n     * @param {Event} event\n     * @return {void}\n     * @private\n     */\n    const _keyDownCallback = event => {\n        // Prevent browser keyboard actions\n        if (! self.cancelKeyboardEvent(event)) {\n            if ([\n                'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown',\n                'Space'\n            ].indexOf(event.code) > -1) {\n                event.preventDefault();\n            }\n\n            if (_ctrlKeyPressed) {\n                if (event.code === 'KeyY') {\n                    event.preventDefault();\n                }\n            }\n        }\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.mouseIsPressed = () => _mousePressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.ctrlKeyIsPressed = () => _ctrlKeyPressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.shiftKeyIsPressed = () => _shiftKeyPressed;\n\n    /**\n     * Checks whether a keycode is a number key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isNumberKey = keyCode => (_numberKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is a delete key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isDeleteKey = keyCode => (_deleteKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is an arrow key\n     * @param {string} keyCode\n     * @param {string} direction (any or up/down/left/right)\n     * @return {boolean}\n     */\n    self.isArrowKey = (keyCode, direction = 'any') => {\n        // Check for any arrow key\n        if (direction === 'any') {\n            return (_arrowKeysConcatenated.indexOf(keyCode) > -1);\n        }\n\n        // Check for a specific arrow key\n        return (\n            _arrowKeys[direction]\n            && _arrowKeys[direction].indexOf(keyCode) > -1\n        );\n    };\n}\n","import GridCell from './GridCell';\n\nexport default function GridCellHighlighter() {\n    const self = this;\n\n    /**\n     * A list of currently highlighted cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _highlightedCells = [];\n\n    /**\n     * Add a cell to the list of highlighted cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addHighlightedCell = cell => _highlightedCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getHighlightedCells = () => _highlightedCells;\n\n    /**\n     * Highlight all cells that are related to selected cell(s)\n     * @return {void}\n     */\n    self.highlightRelatedCells = () => {\n        self.dehighlightAllCells();\n\n        let cellNumbers = [];\n\n        // Add the cell numbers of the row, column and box that the cell is in\n        Sudoku.grid.getSelectedCells().forEach(cell => {\n            if (Sudoku.settings.highlightRowState()) {\n                cellNumbers = cellNumbers.concat(cell.getRow().getCellNumbers());\n            }\n\n            if (Sudoku.settings.highlightColumnState()) {\n                cellNumbers = cellNumbers.concat(cell.getColumn().getCellNumbers());\n            }\n\n            if (Sudoku.settings.highlightBoxState()) {\n                cellNumbers = cellNumbers.concat(cell.getBox().getCellNumbers());\n            }\n\n            // See if value highlighting is needed or possible\n            const cellValue = cell.getValue();\n            if (cellValue === null\n                || (! Sudoku.settings.highlightValueState()\n                    && ! Sudoku.settings.highlightPencilMarksState())\n            ) {\n                return;\n            }\n\n            // Add the cell numbers of cells that contain the same digit\n            const sameDigitCellNumbers = Sudoku.grid.getCells()\n                .filter(cell => {\n                    // Filter by cell value\n                    if (Sudoku.settings.highlightValueState() && cell.hasValue(cellValue)) {\n                        return true;\n                    }\n\n                    // Filter by pencil marks\n                    else if (Sudoku.settings.highlightPencilMarksState()\n                        // Skip filled in cells, because then pencil marks are invisible\n                        && ! cell.hasValue()\n                        && (cell.getCornerMarks().has(cellValue)\n                            || cell.getCenterMarks().has(cellValue))\n                    ) {\n                        return true;\n                    }\n\n                    return false;\n                })\n                .map(cell => cell.getCellNumber());\n\n            cellNumbers = cellNumbers.concat(sameDigitCellNumbers);\n        });\n\n        cellNumbers\n            // Remove duplicates\n            .filter((value, index, numbers) => {\n                return numbers.indexOf(value) === index;\n            })\n            // Highlight the cells\n            .forEach(cellNumber => {\n                Sudoku.grid.getCell(cellNumber).setHighlightedState(true);\n            });\n    };\n\n    /**\n     * De-highlight all the highlighted cells\n     * @return {void}\n     */\n    self.dehighlightAllCells = () => {\n        self.getHighlightedCells()\n            .forEach(cell => cell.setHighlightedState(false));\n\n        _highlightedCells = [];\n    };\n}\n","import {trait} from '../functions';\nimport GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport HasGridCells from '../Traits/HasGridCells';\n\nexport default function Grid() {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     * @private\n     */\n    const _gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     * @private\n     */\n    const _gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     * @private\n     */\n    const _gridBoxes = [];\n\n    /**\n     * A list of currently selected cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _selectedCells = [];\n\n    /**\n     * The cell that is last navigated to\n     * @type {GridCell|null}\n     * @private\n     */\n    let _lastNavigatedCell = null;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        _collectCells();\n    };\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     * @private\n     */\n    const _collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            _gridRows.push(new GridRow(i));\n            _gridColumns.push(new GridColumn(i));\n            _gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n            self.addCell(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (_gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridRows[j].addCell(gridCell);\n                    gridCell.setRow(_gridRows[j]);\n                }\n\n                if (_gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(_gridColumns[j]);\n                }\n\n                if (_gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(_gridBoxes[j]);\n                }\n            }\n        }\n\n        self.setLastNavigatedCell(null);\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getSelectedCells = () => _selectedCells;\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    self.addSelectedCell = cell => {\n        _selectedCells.push(cell);\n\n        // Highlight related cells after selecting\n        Sudoku.gridCellHighlighter.highlightRelatedCells();\n    };\n\n    /**\n     * Deselect all the selected cells\n     * @return {void}\n     */\n    self.deselectAllCells = () => {\n        self.getSelectedCells().forEach(cell => cell.setSelectedState(false));\n        _selectedCells = [];\n    };\n\n    /**\n     * @return {GridCell|null}\n     */\n    self.getLastNavigatedCell = () => _lastNavigatedCell;\n\n    /**\n     * @param {GridCell|null} cell\n     * @return {null}\n     */\n    self.setLastNavigatedCell = cell => {\n        // The default last navigated cell is the center one\n        if (cell === null) {\n            _lastNavigatedCell = self.getCell(41);\n        } else {\n            _lastNavigatedCell = cell;\n        }\n    };\n\n    /**\n     * Check for errors in the grid\n     * @return {void}\n     */\n    self.checkForErrors = () => {\n        self.removeAllErrors();\n\n        _gridRows.forEach(row => row.checkDuplicateCellValues());\n        _gridColumns.forEach(column => column.checkDuplicateCellValues());\n        _gridBoxes.forEach(box => box.checkDuplicateCellValues());\n    };\n\n    /**\n     * Remove the error status of all cells\n     * @return {void}\n     */\n    self.removeAllErrors = () => {\n        self.getCells().forEach(cell => cell.setErrorState(false));\n    };\n\n    /**\n     * Show all possible candidates\n     * @return {void}\n     */\n    self.determineCandidates = () => {\n        self.getCells()\n            // Only cells that don't have a value\n            .filter(cell => cell.getValue() === null)\n            .forEach(cell => {\n                // Get pencil marks to show\n                const centerMarks = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n                    .filter(number => {\n                        // If the value exists, filter out the number\n                        if (cell.getRow().containsValue(number)) {\n                            return false;\n                        } else if (cell.getColumn().containsValue(number)) {\n                            return false;\n                        } else if (cell.getBox().containsValue(number)) {\n                            return false;\n                        }\n\n                        return true;\n                    });\n\n                // Apply the pencil marks\n                cell.getCenterMarks().setDigits(centerMarks, true);\n            });\n    };\n\n    /**\n     * Remove all automatically shown candidates\n     * @return {void}\n     */\n    self.removeCandidates = () => {\n        self.getCells().forEach(cell => {\n            // Remove the auto-candidates\n            cell.getCenterMarks().setDigits([], true);\n\n            // Show the user-filled center marks\n            cell.getCenterMarks().show();\n        });\n    };\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () =>\n        // Application version\n        'a1'\n        // Elapsed milliseconds\n        + 't' + Sudoku.clock.getTotalElapsedMs()\n        // Cells state\n        + self.getCells().map(cell => cell.getState()).join('');\n}\n","export default function Clock() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     * @private\n     */\n    let _initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     * @private\n     */\n    let _startMoment = null;\n\n    /**\n     * The element that shows the elapsed time\n     * @type {HTMLSpanElement}\n     * @private\n     */\n    const _timeElement = document.getElementById('elapsed-time');\n\n    /**\n     * The interval for showing the time on screen\n     * @type {number|null}\n     * @private\n     */\n    let _timeInterval = null;\n\n    /**\n     * Indicates whether the clock is paused\n     * @type {boolean}\n     * @private\n     */\n    let _paused = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        self.start();\n        self.showTime();\n    };\n\n    /**\n     * Set the start/unpause moment for calculating elapsed time\n     * @return {void}\n     */\n    self.start = self.unpause = () => {\n        _startMoment = new Date();\n        _paused = false;\n    };\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        _initialMs += self.getElapsedMsSinceStart();\n        _startMoment = null;\n        _paused = true;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isPaused = () => _paused;\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (_startMoment !== null)\n            ? (new Date()).getTime() - _startMoment.getTime()\n            : 0;\n    };\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => _initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n\n    /**\n     * Decide whether to show the elapsed time on screen\n     * @param {boolean} show\n     * @return {void}\n     */\n    self.showTime = (show = true) => {\n        if (show) {\n            _timeInterval = setInterval(() => {\n                _timeElement.innerText = self.getElapsedTimeString();\n            }, 1000);\n        } else {\n            clearInterval(_timeInterval);\n        }\n    };\n}\n","import CloseAllModalsCommand from './Commands/Modal/CloseAllModalsCommand';\nimport OpenModalCommand from './Commands/Modal/OpenModalCommand';\n\nexport default function Modal() {\n    const self = this;\n\n    /**\n     * The modal dialog backdrop\n     * @type {HTMLElement}\n     * @private\n     */\n    const _backdropElement = document.getElementById('modal-backdrop');\n\n    /**\n     * Indicates whether a modal is currently open\n     * @type {boolean}\n     * @private\n     */\n    let _openState = false;\n\n    /**\n     * The ID of the currently opened modal\n     * @type {string|null}\n     * @private\n     */\n    let _currentModalId = null;\n\n    /**\n     * Reusable close command, for all modals\n     * @type {CloseAllModalsCommand}\n     * @private\n     */\n    const _closeCommand = new CloseAllModalsCommand();\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableOpening();\n        _enableClosing();\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.openState = () => _openState;\n\n    /**\n     * @param {string|null} modalId\n     * @return {void}\n     */\n    self.setCurrentModalId = modalId => {\n        _currentModalId = modalId;\n\n        // Set the open state, based on if there is an ID\n        _openState = (modalId !== null);\n\n        // Toggle the backdrop, based on if there is an ID\n        const toggleMethod = (modalId !== null) ? 'add' : 'remove';\n        _backdropElement.classList[toggleMethod]('show');\n    };\n\n    /**\n     * @return {string|null}\n     */\n    self.getCurrentModalId = () => _currentModalId;\n\n    /**\n     * Close an open modal dialog, if there is any\n     * @return {void}\n     */\n    self.close = () => _closeCommand.execute();\n\n    /**\n     * Enable opening of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableOpening = () => {\n        const openButtons = document.getElementsByClassName('open-modal');\n\n        for (let i = 0; i < openButtons.length; i++) {\n            openButtons[i].addEventListener('click', event => {\n                // Open the modal dialog\n                const modalId = event.target.dataset.modalId;\n                const command = new OpenModalCommand(modalId);\n                command.execute();\n            });\n        }\n    };\n\n    /**\n     * Enable closing of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableClosing = () => {\n        // Enable close buttons of the modal dialogs\n        const closeButtons = document.getElementsByClassName('close-modal');\n        for (let i = 0; i < closeButtons.length; i++) {\n            closeButtons[i].addEventListener('click', self.close);\n        }\n\n        // Clicking the backdrop also closes modal dialogs\n        _backdropElement.addEventListener('click', self.close);\n    };\n}\n","import ChangeDigitCommand from '../Commands/Grid/ChangeDigitCommand';\nimport PauseGameCommand from '../Commands/PauseGameCommand';\n\nexport default function DocumentEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _registerKeyboardEvents();\n        _registerMouseEvents();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerKeyboardEvents = () => {\n        const pauseGameCommand = new PauseGameCommand();\n\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.cancelKeyboardEvent(event)) {\n                return;\n            }\n\n            if (Sudoku.controls.isArrowKey(event.code)) {\n                // Deselect all cells, if the ctrl key is not pressed\n                if (! Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.grid.deselectAllCells();\n                }\n\n                let newCellIndex = Sudoku.grid.getLastNavigatedCell().getCellNumber() - 1;\n                let newCell = null;\n\n                // Then navigate to the intended cell\n                // Wrap around if needed\n                if (Sudoku.controls.isArrowKey(event.code, 'up')) {\n                    if ((newCellIndex -= 9) < 0) {\n                        newCellIndex = 81 + newCellIndex;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'down')) {\n                    if ((newCellIndex += 9) > 80) {\n                        newCellIndex = newCellIndex - 81;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'left')) {\n                    if ((--newCellIndex + 1) % 9 === 0) {\n                        newCellIndex += 9;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'right')) {\n                    if (++newCellIndex % 9 === 0) {\n                        newCellIndex -= 9;\n                    }\n                }\n\n                // Make the new cell the active one\n                newCell = Sudoku.grid.getCell(newCellIndex + 1);\n                newCell.setSelectedState(true);\n                Sudoku.grid.setLastNavigatedCell(newCell);\n            }\n\n            if (Sudoku.controls.isNumberKey(event.code)) {\n                // Set a number value\n                const digit = parseInt(event.key, 10);\n                Sudoku.history.execute(new ChangeDigitCommand(digit));\n            } else if (Sudoku.controls.isDeleteKey(event.code)) {\n                // Remove a value\n                Sudoku.history.execute(new ChangeDigitCommand(null));\n            } else if (event.code === 'KeyZ') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    // Redo or undo an action\n                    if (Sudoku.controls.shiftKeyIsPressed()) {\n                        Sudoku.history.redo();\n                    } else {\n                        Sudoku.history.undo();\n                    }\n                }\n            } else if (event.code === 'KeyY') {\n                // Redo an action\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.history.redo();\n                }\n            } else if (event.code === 'Escape') {\n                (Sudoku.modal.openState() === true)\n                    // Close a modal dialog\n                    ? Sudoku.modal.close()\n                    // Pause / unpause the game\n                    : pauseGameCommand.toggle();\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseEvents = () => {\n        document.addEventListener('mousedown', event => {\n            // Deselect all cells, when clicking outside the grid\n            if (event.target.closest('.grid-cell') === null) {\n                Sudoku.grid.deselectAllCells();\n                Sudoku.gridCellHighlighter.dehighlightAllCells();\n            }\n        });\n    };\n}\n","import ShowClockCommand from '../Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from '../Commands/Settings/AutoErrorCheckingCommand';\nimport AutoRemovePencilMarksCommand from '../Commands/Settings/AutoRemovePencilMarksCommand';\nimport HighlightRowCommand from '../Commands/Settings/HighlightRowCommand';\nimport HighlightColumnCommand from '../Commands/Settings/HighlightColumnCommand';\nimport HighlightBoxCommand from '../Commands/Settings/HighlightBoxCommand';\nimport HighlightValueCommand from '../Commands/Settings/HighlightValueCommand';\nimport HighlightPencilMarksCommand from '../Commands/Settings/HighlightPencilMarksCommand';\n\nexport default function SettingsEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableClockToggling();\n        _enableAutoErrorCheckingToggling();\n        _enableAutoRemovePencilMarksToggling();\n        _enableHighlightingToggling();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableClockToggling = () => {\n        document.getElementById('setting-show-clock')\n            .addEventListener('change', event => {\n                (new ShowClockCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableAutoErrorCheckingToggling = () => {\n        document.getElementById('setting-auto-error-checking')\n            .addEventListener('change', event => {\n                (new AutoErrorCheckingCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableAutoRemovePencilMarksToggling = () => {\n        document.getElementById('setting-auto-remove-pencil-marks')\n            .addEventListener('change', event => {\n                (new AutoRemovePencilMarksCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableHighlightingToggling = () => {\n        // Row highlighting\n        document.getElementById('setting-highlight-row')\n            .addEventListener('change', event => {\n                (new HighlightRowCommand()).execute(event.target.checked);\n            });\n\n        // Column highlighting\n        document.getElementById('setting-highlight-column')\n            .addEventListener('change', event => {\n                (new HighlightColumnCommand()).execute(event.target.checked);\n            });\n\n        // 3x3 box highlighting\n        document.getElementById('setting-highlight-box')\n            .addEventListener('change', event => {\n                (new HighlightBoxCommand()).execute(event.target.checked);\n            });\n\n        // Same value highlighting\n        document.getElementById('setting-highlight-value')\n            .addEventListener('change', event => {\n                (new HighlightValueCommand()).execute(event.target.checked);\n            });\n\n        // Same value highlighting\n        document.getElementById('setting-highlight-pencil-marks')\n            .addEventListener('change', event => {\n                (new HighlightPencilMarksCommand()).execute(event.target.checked);\n            });\n    };\n}\n","import AutoCandidateModeCommand from '../Commands/AutoCandidateModeCommand';\nimport PauseGameCommand from '../Commands/PauseGameCommand';\n\nexport default function ActionsEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _registerPauseResumeEvent();\n        _registerCheckErrorsEvent();\n        _registerAutoCandidateModeEvent();\n    };\n\n    /**\n     * @private\n     */\n    const _registerPauseResumeEvent = () => {\n        document.getElementById('toggle-pause-button')\n            .addEventListener('click', () => {\n                (new PauseGameCommand()).toggle();\n            });\n\n        document.getElementById('game-resume-button')\n            .addEventListener('click', () => {\n                (new PauseGameCommand()).execute(false);\n                Sudoku.modal.close();\n            });\n    };\n\n    /**\n     * @private\n     */\n    const _registerCheckErrorsEvent = () => {\n        document.getElementById('check-errors')\n            .addEventListener('click', Sudoku.grid.checkForErrors);\n    };\n\n    /**\n     * @private\n     */\n    const _registerAutoCandidateModeEvent = () => {\n        document.getElementById('setting-auto-candidate')\n            .addEventListener('change', event => {\n                const command = new AutoCandidateModeCommand();\n                command.execute(event.target.checked);\n            });\n    };\n}\n"],"sourceRoot":""}