{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/EntryMode.js","webpack:///./assets/js/functions.js","webpack:///./assets/js/Traits/HasGridCells.js","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/app.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Timer.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EntryMode","self","this","_mode","MODE_VALUE","setMode","toLowerCase","Error","MODE_CENTER","changeMode","getMode","trait","instance","traitConstructor","thing","traitInstance","HasGridCells","gridCells","addCell","cell","push","getCellValues","map","getValue","filter","hasDuplicateCellValues","cellValues","Set","size","length","GridRow","rowNumber","getCellNumbers","numbers","GridColumn","columnNumber","number","j","GridBox","boxNumber","boxIndex","topLeftNumber","Math","floor","GridCell","cellNumber","gridRow","gridColumn","gridBox","element","isPrefilled","colorNumber","cornerMarks","centerMarks","_value","_isSelected","document","getElementById","init","registerEventHandlers","setValue","getElementsByClassName","innerText","getIsSelected","setIsSelected","selected","classList","add","Sudoku","grid","addSelectedCell","remove","setRow","row","setColumn","column","setBox","box","addEventListener","controls","ctrlKeyPressed","deselectAllCells","mousePressed","setLastNavigatedCell","event","isNumberKey","code","parseInt","isDeleteKey","getState","join","MODE_CORNER","window","arrowKeys","up","down","left","right","arrowKeysConcatenated","concat","numberKeys","deleteKeys","ctrlKey","metaKey","keyCode","indexOf","isArrowKey","direction","entryMode","gridRows","gridColumns","gridBoxes","selectedCells","lastNavigatedCell","newCellIndex","newCell","collectCells","gridCell","forEach","timer","getTotalElapsedMs","initialMs","startMoment","timeElement","timeInterval","start","unpause","Date","pause","getElapsedMsSinceStart","getTime","getElapsedTimeString","totalSeconds","hours","minutes","seconds","toString","padStart","showTime","show","setInterval","clearInterval"],"mappings":"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","file":"app_44aa2a8cac8f3e9b40c5.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Several entry mode types, to be used as constants\n * @type {number}\n */\nEntryMode.MODE_VALUE = 1;\nEntryMode.MODE_CORNER = 2;\nEntryMode.MODE_CENTER = 3;\n\nexport default function EntryMode() {\n    const self = this;\n\n    /**\n     * The current mode\n     * @type {number}\n     * @private\n     */\n    let _mode = self.MODE_VALUE;\n\n    /**\n     * @param {number} mode\n     * @return {void}\n     */\n    self.setMode = mode => {\n        if ((typeof mode).toLowerCase() !== 'number') {\n            throw new Error(`Expected a number, got ${typeof mode}`);\n        }\n\n        if (mode < self.MODE_VALUE || mode > self.MODE_CENTER) {\n            throw new Error('Invalid entry mode number given, please use EntryMode constants');\n        }\n\n        _mode = mode;\n    };\n\n    /**\n     * Change the mode number incrementally\n     * @return {void}\n     */\n    self.changeMode = () => {\n        // Increase the mode number\n        _mode++;\n\n        // Wrap around, when max number is reached\n        if (_mode > self.MODE_CENTER) {\n            _mode = self.MODE_VALUE;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    self.getMode = () => _mode;\n}\n","/**\n * Add code from a trait to an object\n * @param {Object} instance\n * @param {function} traitConstructor\n * @return {void}\n */\nexport function trait(instance, traitConstructor) {\n    // Check the instance type\n    if ((typeof instance).toLowerCase() !== 'object') {\n        throw new Error(`Instance needs to be an object, got ${typeof instance} instead`);\n    }\n\n    // Check the constructor type\n    if ((typeof traitConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Trait constructor needs to be a function/class, got ${typeof traitConstructor} instead`);\n    }\n\n    // Create a new instance of the trait\n    const traitInstance = new traitConstructor();\n    // A property or method of the trait\n    let thing;\n\n    // Set the properties/methods in the calling object\n    for (thing in traitInstance) {\n        instance[thing] = traitInstance[thing];\n    }\n}\n","import GridCell from '../Grid/GridCell';\n\nexport default function HasGridCells() {\n    const self = this;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.hasDuplicateCellValues = () => {\n        const cellValues = self.getCellValues();\n        return (new Set(cellValues)).size !== cellValues.length;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     */\n    self.rowNumber = rowNumber;\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + ((self.rowNumber - 1) * 9));\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     */\n    self.columnNumber = columnNumber;\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = self.columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 9 to the number 8 times\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     */\n    self.boxNumber = boxNumber;\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = self.boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     */\n    self.cellNumber = cellNumber;\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     */\n    self.gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     */\n    self.gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     */\n    self.gridBox = null;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLElement|null}\n     */\n    self.element = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     */\n    self.isPrefilled = false;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     */\n    self.colorNumber = 1;\n\n    /**\n     * The pencil mark values (corner mode)\n     * @type {number[]}\n     */\n    self.cornerMarks = [];\n\n    /**\n     * The pencil mark values (center mode)\n     * @type {number[]}\n     */\n    self.centerMarks = [];\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    let _value = null;\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    let _isSelected = false;\n\n    (() => {\n        // The HTML cell element\n        self.element = document.getElementById(`grid-cell-${self.cellNumber}`);\n        if (self.element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.cellNumber}' not found`);\n        }\n    })();\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        self.registerEventHandlers();\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => _value;\n\n    /**\n     * @param {number|null} value\n     * @return {void}\n     */\n    self.setValue = value => {\n        _value = value;\n\n        // Show the value on screen\n        self.element.getElementsByClassName('cell-value')[0].innerText = value;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.getIsSelected = () => _isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setIsSelected = selected => {\n        if (selected) {\n            self.element.classList.add('selected');\n\n            // Don't add duplicates to the list of selected cells\n            if (! self.getIsSelected()) {\n                Sudoku.grid.addSelectedCell(self);\n            }\n        }\n\n        else {\n            self.element.classList.remove('selected');\n        }\n\n        _isSelected = selected;\n    };\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => self.gridRow = row;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => self.gridColumn = column;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => self.gridBox = box;\n\n    /**\n     * Handle events that happen on/for the cell\n     * @return {void}\n     */\n    self.registerEventHandlers = () => {\n        self.element.addEventListener('mousedown', () => {\n            // Deselect all cells, if the ctrl is not pressed\n            // (Ctrl key allows multiple selections)\n            if (! Sudoku.controls.ctrlKeyPressed) {\n                Sudoku.grid.deselectAllCells();\n            }\n\n            self.setIsSelected(true);\n        });\n\n        self.element.addEventListener('mouseenter', () => {\n            // Allow multiple cells to be selected\n            if (Sudoku.controls.mousePressed) {\n                self.setIsSelected(true);\n            }\n        });\n\n        // On mouse up, this is the last seleted cell\n        self.element.addEventListener('mouseup', () => Sudoku.grid.setLastNavigatedCell(this));\n\n        document.addEventListener('keydown', event => {\n            // Change the cell value if it's selected\n            if (self.getIsSelected()) {\n                if (Sudoku.controls.isNumberKey(event.code)) {\n                    // Set a number value\n                    self.setValue(parseInt(event.key, 10));\n                } else if (Sudoku.controls.isDeleteKey(event.code)) {\n                    // Remove the value\n                    self.setValue(null);\n                }\n            }\n        });\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.cellNumber\n        + (self.isPrefilled ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.colorNumber\n        + 'cr' + self.cornerMarks.join('')\n        + 'cn' + self.centerMarks.join('');\n}\n","import Controls from './Controls';\nimport EntryMode from './EntryMode';\nimport Grid from './Grid/Grid';\nimport Timer from './Timer';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    controls: new Controls(),\n    entryMode: new EntryMode(),\n    grid: new Grid(),\n    timer: new Timer(),\n};\n\nSudoku.timer.start();\nSudoku.timer.showTime();\nSudoku.controls.init();\nSudoku.grid.init();\nSudoku.grid.collectCells();\n\n/*\nconst LZString = require('lz-string');\nconst state = JSON.stringify(Sudoku.grid.getState());\n// Pairs of 2-digits (cell number) and value (1 number)\n// const state = '038149156382416811295104457093378472567629123781806';\n// 81 numbers, representing every cell value (0 = empty)\n// const state = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nconst c1 = LZString.compress(state);\nconst c2 = LZString.compressToEncodedURIComponent(state);\n\nconsole.log(\n    state.length,\n    state,\n    c1.length,\n    c1,\n    c2.length,\n    c2\n);\n//*/\n","export default function Controls() {\n    const self = this;\n\n    /**\n     * Indicates whether a mouse button is currently pressed\n     * @type {boolean}\n     */\n    self.mousePressed = false;\n\n    /**\n     * Indicates whether a ctrl button is currently pressed\n     * @type {boolean}\n     */\n    self.ctrlKeyPressed = false;\n\n    /**\n     * Arrow key codes\n     * @type {Object}\n     */\n    self.arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Arrow key codes, as 1 array\n     * @type {string[]}\n     */\n    self.arrowKeysConcatenated = self.arrowKeys.up\n        .concat(self.arrowKeys.down)\n        .concat(self.arrowKeys.left)\n        .concat(self.arrowKeys.right);\n\n    /**\n     * Number key codes\n     * @type {string[]}\n     */\n    self.numberKeys = [\n        'Digit1', 'Numpad1', 'Digit2', 'Numpad2', 'Digit3', 'Numpad3',\n        'Digit4', 'Numpad4', 'Digit5', 'Numpad5', 'Digit6', 'Numpad6',\n        'Digit7', 'Numpad7', 'Digit8', 'Numpad8', 'Digit9', 'Numpad9',\n    ];\n\n    /**\n     * Delete key codes\n     * @type {string[]}\n     */\n    self.deleteKeys = ['Delete', 'Backspace'];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => self.mousePressed = true);\n        document.addEventListener('mouseup', () => self.mousePressed = false);\n\n        document.addEventListener('keydown', event => {\n            self.ctrlKeyPressed = (event.ctrlKey || event.metaKey);\n        });\n\n        document.addEventListener('keyup', event => {\n            self.ctrlKeyPressed = (event.ctrlKey || event.metaKey);\n        });\n    };\n\n    /**\n     * Checks whether a keycode is a number key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isNumberKey = keyCode => (self.numberKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is a delete key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isDeleteKey = keyCode => (self.deleteKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is an arrow key\n     * @param {string} keyCode\n     * @param {string} direction (any or up/down/left/right)\n     * @return {boolean}\n     */\n    self.isArrowKey = (keyCode, direction = 'any') => {\n        // Check for any arrow key\n        if (direction === 'any') {\n            return (self.arrowKeysConcatenated.indexOf(keyCode) > -1);\n        }\n\n        // Check for a specific arrow key\n        return (\n            self.arrowKeys[direction]\n            && self.arrowKeys[direction].indexOf(keyCode) > -1\n        );\n    };\n}\n","import GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\n\nexport default function Grid() {\n    const self = this;\n    \n    /**\n     * All the cells in the grid\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     */\n    self.gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     */\n    self.gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     */\n    self.gridBoxes = [];\n\n    /**\n     * A list of currently selected (highlighted) cells\n     * @type {GridCell[]}\n     */\n    self.selectedCells = [];\n\n    /**\n     * The cell that is last navigated to\n     * @type {GridCell|null}\n     */\n    self.lastNavigatedCell = null;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        self.registerEventHandlers();\n    };\n\n    /**\n     * Handle events that happen on/for the grid\n     * @return {void}\n     */\n    self.registerEventHandlers = () => {\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.isArrowKey(event.code)) {\n                // First deselect all cells\n                self.deselectAllCells();\n\n                let newCellIndex = self.lastNavigatedCell.cellNumber - 1;\n                let newCell = null;\n\n                // Then navigate to the intended cell\n                // Wrap around if needed\n                if (Sudoku.controls.isArrowKey(event.code, 'up')) {\n                    if ((newCellIndex -= 9) < 0) {\n                        newCellIndex = 81 + newCellIndex;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'down')) {\n                    if ((newCellIndex += 9) > 80) {\n                        newCellIndex = newCellIndex - 81;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'left')) {\n                    if ((--newCellIndex + 1) % 9 === 0) {\n                        newCellIndex += 9;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'right')) {\n                    if (++newCellIndex % 9 === 0) {\n                        newCellIndex -= 9;\n                    }\n                }\n\n                // Make the new cell the active one\n                newCell = this.gridCells[newCellIndex];\n                newCell.setIsSelected(true);\n                self.setLastNavigatedCell(newCell);\n            }\n        });\n    };\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     */\n    self.collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            self.gridRows.push(new GridRow(i));\n            self.gridColumns.push(new GridColumn(i));\n            self.gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n\n            // Add the cell\n            self.gridCells.push(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (self.gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    self.gridRows[j].addCell(gridCell);\n                    gridCell.setRow(self.gridRows[j]);\n                }\n\n                if (self.gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    self.gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(self.gridColumns[j]);\n                }\n\n                if (self.gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    self.gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(self.gridBoxes[j]);\n                }\n            }\n        }\n\n        self.setLastNavigatedCell(null);\n    };\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addSelectedCell = cell => self.selectedCells.push(cell);\n\n    /**\n     * @param {GridCell|null} cell\n     * @return {null}\n     */\n    self.setLastNavigatedCell = cell => {\n        // The default last navigated cell is the center one\n        if (cell === null) {\n            self.lastNavigatedCell = self.gridCells[40];\n        } else {\n            self.lastNavigatedCell = cell;\n        }\n    };\n\n    /**\n     * Deselect all the selected cells\n     * @return {void}\n     */\n    self.deselectAllCells = () => {\n        self.selectedCells.forEach(cell => cell.setIsSelected(false));\n    };\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () =>\n        // Application version\n        'a1'\n        // Elapsed milliseconds\n        + 't' + Sudoku.timer.getTotalElapsedMs()\n        // Cells state\n        + self.gridCells.map(cell => cell.getState()).join('');\n}\n","export default function Timer() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     */\n    self.initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     */\n    self.startMoment = null;\n\n    /**\n     * The element that shows the elapsed time\n     * @type {HTMLElement}\n     */\n    self.timeElement = document.getElementById('elapsed-time');\n\n    /**\n     * The interval for showing the time on screen\n     * @type {number|null}\n     */\n    self.timeInterval = null;\n\n    /**\n     * Set the start/unpause moment for calculating elapsed time\n     * @return {Date}\n     */\n    self.start = self.unpause = () => self.startMoment = new Date();\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        self.initialMs += self.getElapsedMsSinceStart();\n        self.startMoment = null;\n    };\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (self.startMoment !== null)\n            ? (new Date()).getTime() - self.startMoment.getTime()\n            : 0;\n    };\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => self.initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n\n    /**\n     * Decide whether to show the elapsed time on screen\n     * @param {boolean} show\n     * @return {void}\n     */\n    self.showTime = (show = true) => {\n        if (show) {\n            self.timeInterval = setInterval(() => {\n                self.timeElement.innerText = self.getElapsedTimeString();\n            }, 1000);\n        } else {\n            clearInterval(self.timeInterval);\n        }\n    };\n}\n"],"sourceRoot":""}