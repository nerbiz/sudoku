{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/Utilities/Visitor.js","webpack:///./assets/js/InputMode.js","webpack:///./assets/js/functions.js","webpack:///./assets/js/Traits/HasGridCells.js","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/EventHandlers/GridCellEventHandler.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/Commands/ChangeDigitCommand.js","webpack:///./assets/js/Commands/Command.js","webpack:///./assets/js/app.js","webpack:///./assets/js/Commands/CommandHistory.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Timer.js","webpack:///./assets/js/EventHandlers/DocumentEventHandler.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visitor","InputMode","self","this","_mode","MODE_VALUE","_radioButtons","document","getElementsByName","init","selectCurrentRadioButton","registerEventListeners","forEach","radioButton","parseInt","getMode","checked","addEventListener","setMode","event","code","changeMode","MODE_CORNER","MODE_CENTER","toLowerCase","Error","trait","instance","traitConstructor","thing","traitInstance","HasGridCells","gridCells","addCell","cell","push","getCells","getCell","number","find","getCellNumber","undefined","getCellValues","map","getValue","filter","checkDuplicateCellValues","cellValues","cellValue","cells","length","setErrorStatus","GridRow","rowNumber","_rowNumber","getCellNumbers","numbers","rowIndex","GridColumn","columnNumber","_columnNumber","j","GridBox","boxNumber","_boxNumber","boxIndex","topLeftNumber","Math","floor","GridCellEventHandler","gridCell","_gridCell","register","registerMouseDownEvent","registerMouseEnterEvent","registerMouseUpEvent","getElement","Sudoku","controls","ctrlKeyIsPressed","setIsSelected","getIsSelected","grid","deselectAllCells","mouseIsPressed","setLastNavigatedCell","GridCell","cellNumber","_cellNumber","_element","_value","_cornerMarks","_centerMarks","_isSelected","getElementById","isPrefilled","getColorNumber","setDigit","digit","inputMode","setCornerMarks","setCenterMarks","setValue","setCornerMark","setCenterMark","showMarks","getElementsByClassName","innerText","getCornerMarks","cornerMarks","existingIndex","indexOf","splice","fillCornerMarks","allElements","sort","a","b","item","index","toString","getCenterMarks","centerMarks","fillCenterMarks","join","show","toggleMethod","classList","selected","add","addSelectedCell","remove","setRow","row","setColumn","column","setBox","box","on","getState","ChangeDigitCommand","state","_digit","_inputMode","_cells","getSelectedCells","_cellsState","execute","removeAllErrors","checkForErrors","undo","usesMacOs","navigator","userAgent","match","constructor","baseConstructor","extend","window","history","_past","_future","command","clearFuture","pop","redo","_mousePressed","_ctrlKeyPressed","_shiftKeyPressed","_arrowKeys","up","down","left","right","_arrowKeysConcatenated","concat","_numberKeys","_deleteKeys","keyDownUpCallback","metaKey","ctrlKey","preventDefault","shiftKey","shiftKeyIsPressed","isNumberKey","keyCode","isDeleteKey","isArrowKey","direction","_gridRows","_gridColumns","_gridBoxes","_selectedCells","_lastNavigatedCell","collectCells","getLastNavigatedCell","timer","getTotalElapsedMs","_initialMs","_startMoment","_timeElement","_timeInterval","start","unpause","Date","pause","getElapsedMsSinceStart","getTime","getElapsedTimeString","totalSeconds","hours","minutes","seconds","padStart","showTime","setInterval","clearInterval","documentEventHandler","registerKeyboardNavigation","registerValueSetting","newCellIndex","newCell"],"mappings":"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","file":"app_aea57abd99f073c172db.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Indicates whether the visitor's OS is macOS\n * @type {boolean}\n * @static\n */\nVisitor.usesMacOs = (navigator.userAgent.match(/Macintosh/) !== null);\n\nexport default function Visitor() {\n    const self = this;\n}\n","/**\n * Several input modes, to be used as constants\n * @type {number}\n */\nInputMode.MODE_VALUE = 1;\nInputMode.MODE_CORNER = 2;\nInputMode.MODE_CENTER = 3;\n\nexport default function InputMode() {\n    const self = this;\n\n    /**\n     * The current mode\n     * @type {number}\n     * @private\n     */\n    let _mode = InputMode.MODE_VALUE;\n\n    /**\n     * The radio buttons that can change the mode\n     * @type {NodeListOf<HTMLElement>}\n     * @private\n     */\n    const _radioButtons = document.getElementsByName('input_mode');\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        selectCurrentRadioButton();\n        registerEventListeners();\n    };\n\n    /**\n     * Make the radio button of the current input mode checked\n     * @return {void}\n     */\n    const selectCurrentRadioButton = () => {\n        _radioButtons.forEach(radioButton => {\n            if (parseInt(radioButton.value, 10) === self.getMode()) {\n                radioButton.checked = true;\n            }\n        });\n    };\n\n    /**\n     * Enable toggling the mode with radio buttons\n     * @return {void}\n     */\n    const registerEventListeners = () => {\n        _radioButtons.forEach(radioButton => {\n            radioButton.addEventListener('change', () => {\n                self.setMode(parseInt(radioButton.value, 10));\n            });\n        });\n\n        document.addEventListener('keydown', event => {\n            switch (event.code) {\n                case 'Space':\n                    self.changeMode();\n                    break;\n                case 'KeyI':\n                    self.setMode(InputMode.MODE_VALUE);\n                    break;\n                case 'KeyO':\n                    self.setMode(InputMode.MODE_CORNER);\n                    break;\n                case 'KeyP':\n                    self.setMode(InputMode.MODE_CENTER);\n                    break;\n            }\n\n            selectCurrentRadioButton();\n        });\n    };\n\n    /**\n     * @param {number} mode\n     * @return {void}\n     */\n    self.setMode = mode => {\n        if ((typeof mode).toLowerCase() !== 'number') {\n            throw new Error(`Expected a number, got ${typeof mode}`);\n        }\n\n        if (mode < InputMode.MODE_VALUE || mode > InputMode.MODE_CENTER) {\n            throw new Error('Invalid input mode number given, please use InputMode constants');\n        }\n\n        _mode = mode;\n    };\n\n    /**\n     * Change the mode number incrementally\n     * @return {void}\n     */\n    self.changeMode = () => {\n        // Increase the mode number\n        // Wrap around, when max number is reached\n        if (++_mode > InputMode.MODE_CENTER) {\n            _mode = InputMode.MODE_VALUE;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    self.getMode = () => _mode;\n}\n","/**\n * Extend a base constructor\n * @param {function} constructor\n * @param {function} baseConstructor\n * @return {void}\n */\nexport function extend(constructor, baseConstructor) {\n    // Check the constructor types\n    if ((typeof constructor).toLowerCase() !== 'function') {\n        throw new Error(`Constructor needs to be a function, got ${typeof constructor} instead`);\n    }\n\n    if ((typeof baseConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Base constructor needs to be a function, got ${typeof baseConstructor} instead`);\n    }\n\n    constructor.prototype = new baseConstructor();\n    constructor.prototype.constructor = constructor;\n};\n\n/**\n * Add code from a trait to an object\n * @param {Object} instance\n * @param {function} traitConstructor\n * @return {void}\n */\nexport function trait(instance, traitConstructor) {\n    // Check the instance type\n    if ((typeof instance).toLowerCase() !== 'object') {\n        throw new Error(`Instance needs to be an object, got ${typeof instance} instead`);\n    }\n\n    // Check the constructor type\n    if ((typeof traitConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Trait constructor needs to be a function, got ${typeof traitConstructor} instead`);\n    }\n\n    // Create a new instance of the trait\n    const traitInstance = new traitConstructor();\n    // A property or method of the trait\n    let thing;\n\n    // Set the properties/methods in the calling object\n    for (thing in traitInstance) {\n        instance[thing] = traitInstance[thing];\n    }\n};\n","import GridCell from '../Grid/GridCell';\n\nexport default function HasGridCells() {\n    const self = this;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getCells = () => self.gridCells;\n\n    /**\n     * Get a cell by its cell number\n     * @param {number} number A 1-based cell number\n     * @return {GridCell|null}\n     */\n    self.getCell = number => {\n        const cell = self.gridCells.find(cell => cell.getCellNumber() === number);\n        return (cell === undefined) ? null : cell;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.checkDuplicateCellValues = () => {\n        // Pairs of value:gridCell[]\n        // Arrays of cells that have a certain value\n        const cellValues = {};\n\n        self.gridCells.forEach(cell => {\n            // Get the filled in value of the cell\n            const cellValue = cell.getValue();\n\n            // A value is needed for checking\n            if (cellValue === null) {\n                return;\n            }\n\n            // Get the cells that have that value an add the cell\n            const cells = cellValues[cellValue] || [];\n            cells.push(cell);\n            cellValues[cellValue] = cells;\n\n            // Set an error status on all duplicate cells, if there are any\n            if (cells.length > 1) {\n                cells.forEach(cell => cell.setErrorStatus(true));\n            }\n        });\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _rowNumber = rowNumber;\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        const rowIndex = _rowNumber - 1;\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + (rowIndex * 9));\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _columnNumber = columnNumber;\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = _columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 8 numbers, each incremented by 9\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     * @private\n     */\n    let _boxNumber = boxNumber;\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = _boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n}\n","import GridCell from '../Grid/GridCell';\n\n/**\n * @param {GridCell} gridCell\n * @constructor\n */\nexport default function GridCellEventHandler(gridCell) {\n    const self = this;\n\n    /**\n     * The cell to register event handlers for\n     * @type {GridCell}\n     * @private\n     */\n    const _gridCell = gridCell;\n\n    /**\n     * Register event handlers for a grid cell\n     * @return {void}\n     */\n    self.register = () => {\n        registerMouseDownEvent();\n        registerMouseEnterEvent();\n        registerMouseUpEvent();\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseDownEvent = () => {\n        _gridCell.getElement().addEventListener('mousedown', () => {\n            if (Sudoku.controls.ctrlKeyIsPressed()) {\n                // Toggle the selected status when clicked, if the ctrl key is pressed\n                _gridCell.setIsSelected(! _gridCell.getIsSelected());\n            } else {\n                // Select only this cell, if the ctrl key is not pressed\n                Sudoku.grid.deselectAllCells();\n                _gridCell.setIsSelected(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseEnterEvent = () => {\n        _gridCell.getElement().addEventListener('mouseenter', () => {\n            // Allow multiple cells to be selected\n            if (Sudoku.controls.mouseIsPressed()) {\n                _gridCell.setIsSelected(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseUpEvent = () => {\n        // On mouse up, this is the last selected cell\n        _gridCell.getElement().addEventListener(\n            'mouseup',\n            () => Sudoku.grid.setLastNavigatedCell(_gridCell)\n        );\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport GridCellEventHandler from '../EventHandlers/GridCellEventHandler';\nimport InputMode from '../InputMode';\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     * @private\n     */\n    const _cellNumber = cellNumber;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLElement|null}\n     * @private\n     */\n    let _element = null;\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     * @private\n     */\n    let _gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     * @private\n     */\n    let _gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     * @private\n     */\n    let _gridBox = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     * @private\n     */\n    let _isPrefilled = false;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     * @private\n     */\n    let _colorNumber = 1;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    let _value = null;\n\n    /**\n     * The pencil mark values (corner mode)\n     * @type {number[]}\n     * @private\n     */\n    let _cornerMarks = [];\n\n    /**\n     * The pencil mark values (center mode)\n     * @type {number[]}\n     * @private\n     */\n    let _centerMarks = [];\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    let _isSelected = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        // Get the HTML cell element\n        _element = document.getElementById(`grid-cell-${self.getCellNumber()}`);\n        if (_element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.getCellNumber()}' not found`);\n        }\n\n        // Register event handlers\n        const eventHandler = new GridCellEventHandler(self);\n        eventHandler.register();\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getCellNumber = () => _cellNumber;\n\n    /**\n     * @return {HTMLElement|null}\n     */\n    self.getElement = () => _element;\n\n    /**\n     * @return {boolean}\n     */\n    self.isPrefilled = () => _isPrefilled;\n\n    /**\n     * @return {number}\n     */\n    self.getColorNumber = () => _colorNumber;\n\n    /**\n     * Wrapper for value, corner-marks and center-marks setting\n     * @param {number|null} digit\n     * @param {number|null} mode The input mode, uses current mode by default\n     * @return {void}\n     * @see InputMode for the mode constants\n     */\n    self.setDigit = (digit, mode = null) => {\n        // Use the current input mode, if null\n        if (mode === null) {\n            mode = Sudoku.inputMode.getMode();\n        }\n\n        // Remove the marks if the digit is null (delete signal)\n        // But only if no value is filled in\n        if (digit === null && self.getValue() === null) {\n            self.setCornerMarks([]);\n            self.setCenterMarks([]);\n        }\n\n        switch (mode) {\n            case InputMode.MODE_VALUE:\n                self.setValue(digit);\n                break;\n            case InputMode.MODE_CORNER:\n                self.setCornerMark(digit);\n                break;\n            case InputMode.MODE_CENTER:\n                self.setCenterMark(digit);\n                break;\n        }\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => _value;\n\n    /**\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setValue = digit => {\n        // Remove the value, if the same digit is entered\n        if (digit === self.getValue()) {\n            digit = null;\n        }\n\n        // Show or hide the pencil marks\n        showMarks(digit === null);\n\n        // Show the value on screen\n        self.getElement().getElementsByClassName('cell-value')[0].innerText = digit;\n\n        _value = digit;\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCornerMarks = () => _cornerMarks;\n\n    /**\n     * Add or remove a digit from the corner marks\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setCornerMark = digit => {\n        const cornerMarks = self.getCornerMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = cornerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            cornerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && cornerMarks.length < 8) {\n                cornerMarks.push(digit);\n            }\n        }\n\n        self.setCornerMarks(cornerMarks);\n    };\n\n    /**\n     * @param {number[]} cornerMarks\n     * @return {number[]}\n     */\n    self.setCornerMarks = cornerMarks => {\n        _cornerMarks = cornerMarks;\n        fillCornerMarks();\n    };\n\n    /**\n     * Fill corner marks in the cell\n     * @return {void}\n     */\n    const fillCornerMarks = () => {\n        // Clear all corner marks first\n        const allElements = self.getElement().getElementsByClassName('corner-mark');\n        for (let i = 0; i < allElements.length; i++) {\n            allElements[i].innerText = null;\n        }\n\n        // Show the corner marks\n        self.getCornerMarks()\n            .sort((a, b) => a - b)\n            .forEach((item, index) => {\n                document.getElementById(`corner-mark-${self.getCellNumber()}-${index + 1}`)\n                    .innerText = item.toString(10);\n            });\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCenterMarks = () => _centerMarks;\n\n    /**\n     * Add or remove a digit from the center marks\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setCenterMark = digit => {\n        const centerMarks = self.getCenterMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = centerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            centerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && centerMarks.length < 5) {\n                centerMarks.push(digit);\n            }\n        }\n\n        self.setCenterMarks(centerMarks);\n    };\n\n    /**\n     * @param {number[]} centerMarks\n     * @return {number[]}\n     */\n    self.setCenterMarks = centerMarks => {\n        _centerMarks = centerMarks;\n        fillCenterMarks();\n    };\n\n    /**\n     * Fill corner marks in the cell\n     * @return {void}\n     */\n    const fillCenterMarks = () => {\n        const centerMarks = self.getCenterMarks().sort((a, b) => a - b).join('');\n        self.getElement().getElementsByClassName('center-marks')[0].innerText = centerMarks;\n    };\n\n    /**\n     * Toggle the visibility of the pencil marks\n     * @param {boolean} show\n     */\n    const showMarks = show => {\n        const toggleMethod = (show) ? 'remove' : 'add';\n\n        // Toggle the corner marks\n        for (let i = 1; i < 9; i++) {\n            document.getElementById(`corner-mark-${self.getCellNumber()}-${i}`)\n                .classList[toggleMethod]('hide');\n        }\n\n        // Toggle the center marks\n        self.getElement().getElementsByClassName('center-marks')[0]\n            .classList[toggleMethod]('hide');\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.getIsSelected = () => _isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setIsSelected = selected => {\n        if (selected) {\n            self.getElement().classList.add('selected');\n\n            // Don't add duplicates to the list of selected cells\n            if (! self.getIsSelected()) {\n                Sudoku.grid.addSelectedCell(self);\n            }\n        }\n\n        else {\n            self.getElement().classList.remove('selected');\n        }\n\n        _isSelected = selected;\n    };\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => _gridRow = row;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => _gridColumn = column;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => _gridBox = box;\n\n    /**\n     * Set the error status of the element\n     * @param {boolean} on\n     * @return {void}\n     */\n    self.setErrorStatus = on => {\n        if (on) {\n            self.getElement().classList.add('has-error');\n        } else {\n            self.getElement().classList.remove('has-error');\n        }\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.getCellNumber()\n        + (self.isPrefilled() ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.getColorNumber()\n        + 'cr' + self.getCornerMarks().join('')\n        + 'cn' + self.getCenterMarks().join('');\n}\n","import {extend} from '../functions';\nimport Command from './Command';\n\nextend(ChangeDigitCommand, Command);\n\n/**\n * @param {number|null} digit\n * @constructor\n */\nexport default function ChangeDigitCommand(digit) {\n    const self = this;\n\n    /**\n     * The digit to apply to cell(s)\n     * @type {number|null}\n     * @private\n     */\n    const _digit = digit;\n\n    /**\n     * The input mode for the digit\n     * @type {number}\n     * @private\n     */\n    const _inputMode = Sudoku.inputMode.getMode();\n\n    /**\n     * The cells to apply the digit to\n     * @type {GridCell[]}\n     * @private\n     */\n    const _cells = Sudoku.grid.getSelectedCells();\n\n    /**\n     * Contains the state of cells, before changing the digit\n     * @type {Object}\n     * @private\n     */\n    const _cellsState = (() => {\n        // Pairs of cellNumber:{value, cornerMarks, centerMarks}\n        const state = {};\n\n        // Collect the state of all cells\n        _cells.forEach(cell => {\n            state[cell.getCellNumber()] = {\n                value: cell.getValue(),\n                cornerMarks: cell.getCornerMarks(),\n                centerMarks: cell.getCenterMarks(),\n            };\n        });\n\n        return state;\n    })();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        Sudoku.grid.removeAllErrors();\n        _cells.forEach(cell => cell.setDigit(_digit, _inputMode));\n        Sudoku.grid.checkForErrors();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    self.undo = () => {\n        Sudoku.grid.removeAllErrors();\n\n        // Apply the previous values to the cell(s)\n        _cells.forEach(cell => {\n            const state = _cellsState[cell.getCellNumber()];\n\n            cell.setValue(state.value);\n            cell.setCornerMarks(state.cornerMarks);\n            cell.setCenterMarks(state.centerMarks);\n        });\n\n        Sudoku.grid.checkForErrors();\n    };\n}\n","export default function Command() {\n    const self = this;\n\n    /**\n     * Execute the command\n     * @return {void}\n     */\n    self.execute = () => {\n        throw new Error('execute() method is not implemented in the command');\n    };\n\n    /**\n     * Undo the command\n     * @return {void}\n     */\n    self.undo = () => {\n        throw new Error('undo() method is not implemented in the command');\n    };\n}\n","import Controls from './Controls';\nimport InputMode from './InputMode';\nimport Grid from './Grid/Grid';\nimport Timer from './Timer';\nimport DocumentEventHandler from './EventHandlers/DocumentEventHandler';\nimport CommandHistory from './Commands/CommandHistory';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    history: new CommandHistory(),\n    controls: new Controls(),\n    inputMode: new InputMode(),\n    grid: new Grid(),\n    timer: new Timer(),\n    documentEventHandler: new DocumentEventHandler(),\n};\n\nSudoku.timer.start();\nSudoku.timer.showTime();\nSudoku.inputMode.init();\nSudoku.controls.init();\nSudoku.grid.init();\nSudoku.documentEventHandler.register();\n\n/*\nconst LZString = require('lz-string');\nconst state = JSON.stringify(Sudoku.grid.getState());\n// Pairs of 2-digits (cell number) and value (1 number)\n// const state = '038149156382416811295104457093378472567629123781806';\n// 81 numbers, representing every cell value (0 = empty)\n// const state = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nconst c1 = LZString.compress(state);\nconst c2 = LZString.compressToEncodedURIComponent(state);\n\nconsole.log(\n    state.length,\n    state,\n    c1.length,\n    c1,\n    c2.length,\n    c2\n);\n//*/\n","import Command from './Command';\n\nexport default function CommandHistory() {\n    const self = this;\n\n    /**\n     * The list of commands that have been executed\n     * @type {Command[]}\n     * @private\n     */\n    let _past = [];\n\n    /**\n     * The list of commands to redo\n     * @type {Command[]}\n     * @private\n     */\n    let _future = [];\n\n    /**\n     * Add a command to be executed\n     * @param {Command} command\n     * @param {boolean} clearFuture Whether to clear the future (redo) stack\n     * @return {number}\n     */\n    self.execute = (command, clearFuture = true) => {\n        command.execute();\n        _past.push(command);\n\n        // Clear the future (redo) list if needed\n        if (clearFuture) {\n            _future = [];\n        }\n    };\n\n    /**\n     * Undo the most recent command\n     * @return {void}\n     */\n    self.undo = () => {\n        // A command needs to exist\n        if (_past.length < 1) {\n            return;\n        }\n\n        // Undo the command\n        const command = _past.pop();\n        command.undo();\n\n        // Put the command in the future stack, for redoing\n        _future.push(command);\n    };\n\n    /**\n     * Execute the most recent command from the future stack\n     * @return {void}\n     */\n    self.redo = () => {\n        // A command needs to exist\n        if (_future.length < 1) {\n            return;\n        }\n\n        // Redo the command\n        const command = _future.pop();\n        self.execute(command, false);\n    };\n}\n","import Visitor from './Utilities/Visitor';\n\nexport default function Controls() {\n    const self = this;\n\n    /**\n     * Indicates whether a mouse button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _mousePressed = false;\n\n    /**\n     * Indicates whether a ctrl button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _ctrlKeyPressed = false;\n\n    /**\n     * Indicates whether a shift button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _shiftKeyPressed = false;\n\n    /**\n     * Arrow key codes\n     * @type {Object}\n     * @private\n     */\n    const _arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Arrow key codes, as 1 array\n     * @type {string[]}\n     * @private\n     */\n    const _arrowKeysConcatenated = _arrowKeys.up\n        .concat(_arrowKeys.down)\n        .concat(_arrowKeys.left)\n        .concat(_arrowKeys.right);\n\n    /**\n     * Number key codes\n     * @type {string[]}\n     * @private\n     */\n    const _numberKeys = [\n        'Digit1', 'Numpad1', 'Digit2', 'Numpad2', 'Digit3', 'Numpad3',\n        'Digit4', 'Numpad4', 'Digit5', 'Numpad5', 'Digit6', 'Numpad6',\n        'Digit7', 'Numpad7', 'Digit8', 'Numpad8', 'Digit9', 'Numpad9',\n    ];\n\n    /**\n     * Delete key codes\n     * @type {string[]}\n     * @private\n     */\n    const _deleteKeys = ['Delete', 'Backspace'];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => _mousePressed = true);\n        document.addEventListener('mouseup', () => _mousePressed = false);\n        document.addEventListener('keydown', keyDownUpCallback);\n        document.addEventListener('keyup', keyDownUpCallback);\n    };\n\n    /**\n     * Callback for keydown and keyup\n     * @param {Event} event\n     * @return {void}\n     */\n    const keyDownUpCallback = event => {\n        _ctrlKeyPressed = Visitor.usesMacOs ? event.metaKey : event.ctrlKey;\n\n        // Prevent browser keyboard shortcut\n        if (_ctrlKeyPressed) {\n            if(\n                // Browser navigation\n                ['ArrowLeft', 'ArrowRight'].indexOf(event.code) > -1\n                // Browser history\n                || event.code === 'KeyY'\n            ) {\n                event.preventDefault();\n            }\n        }\n\n        _shiftKeyPressed = event.shiftKey;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.mouseIsPressed = () => _mousePressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.ctrlKeyIsPressed = () => _ctrlKeyPressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.shiftKeyIsPressed = () => _shiftKeyPressed;\n\n    /**\n     * Checks whether a keycode is a number key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isNumberKey = keyCode => (_numberKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is a delete key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isDeleteKey = keyCode => (_deleteKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is an arrow key\n     * @param {string} keyCode\n     * @param {string} direction (any or up/down/left/right)\n     * @return {boolean}\n     */\n    self.isArrowKey = (keyCode, direction = 'any') => {\n        // Check for any arrow key\n        if (direction === 'any') {\n            return (_arrowKeysConcatenated.indexOf(keyCode) > -1);\n        }\n\n        // Check for a specific arrow key\n        return (\n            _arrowKeys[direction]\n            && _arrowKeys[direction].indexOf(keyCode) > -1\n        );\n    };\n}\n","import {trait} from '../functions';\nimport GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport HasGridCells from '../Traits/HasGridCells';\n\nexport default function Grid() {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     * @private\n     */\n    const _gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     * @private\n     */\n    const _gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     * @private\n     */\n    const _gridBoxes = [];\n\n    /**\n     * A list of currently selected (highlighted) cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _selectedCells = [];\n\n    /**\n     * The cell that is last navigated to\n     * @type {GridCell|null}\n     * @private\n     */\n    let _lastNavigatedCell = null;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        collectCells();\n    };\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     */\n    const collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            _gridRows.push(new GridRow(i));\n            _gridColumns.push(new GridColumn(i));\n            _gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n            self.addCell(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (_gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridRows[j].addCell(gridCell);\n                    gridCell.setRow(_gridRows[j]);\n                }\n\n                if (_gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(_gridColumns[j]);\n                }\n\n                if (_gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(_gridBoxes[j]);\n                }\n            }\n        }\n\n        self.setLastNavigatedCell(null);\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getSelectedCells = () => _selectedCells;\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addSelectedCell = cell => _selectedCells.push(cell);\n\n    /**\n     * Deselect all the selected cells\n     * @return {void}\n     */\n    self.deselectAllCells = () => {\n        self.getSelectedCells().forEach(cell => cell.setIsSelected(false));\n        _selectedCells = [];\n    };\n\n    /**\n     * @return {GridCell|null}\n     */\n    self.getLastNavigatedCell = () => _lastNavigatedCell;\n\n    /**\n     * @param {GridCell|null} cell\n     * @return {null}\n     */\n    self.setLastNavigatedCell = cell => {\n        // The default last navigated cell is the center one\n        if (cell === null) {\n            _lastNavigatedCell = self.getCell(41);\n        } else {\n            _lastNavigatedCell = cell;\n        }\n    };\n\n    /**\n     * Check for errors in the grid\n     * @return {void}\n     */\n    self.checkForErrors = () => {\n        _gridRows.forEach(row => row.checkDuplicateCellValues());\n        _gridColumns.forEach(column => column.checkDuplicateCellValues());\n        _gridBoxes.forEach(box => box.checkDuplicateCellValues());\n    };\n\n    /**\n     * Remove the error status of all cells\n     * @return {void}\n     */\n    self.removeAllErrors = () => {\n        self.getCells().forEach(cell => cell.setErrorStatus(false));\n    };\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () =>\n        // Application version\n        'a1'\n        // Elapsed milliseconds\n        + 't' + Sudoku.timer.getTotalElapsedMs()\n        // Cells state\n        + self.getCells().map(cell => cell.getState()).join('');\n}\n","export default function Timer() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     * @private\n     */\n    let _initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     * @private\n     */\n    let _startMoment = null;\n\n    /**\n     * The element that shows the elapsed time\n     * @type {HTMLElement}\n     * @private\n     */\n    const _timeElement = document.getElementById('elapsed-time');\n\n    /**\n     * The interval for showing the time on screen\n     * @type {number|null}\n     * @private\n     */\n    let _timeInterval = null;\n\n    /**\n     * Set the start/unpause moment for calculating elapsed time\n     * @return {Date}\n     */\n    self.start = self.unpause = () => _startMoment = new Date();\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        _initialMs += self.getElapsedMsSinceStart();\n        _startMoment = null;\n    };\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (_startMoment !== null)\n            ? (new Date()).getTime() - _startMoment.getTime()\n            : 0;\n    };\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => _initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n\n    /**\n     * Decide whether to show the elapsed time on screen\n     * @param {boolean} show\n     * @return {void}\n     */\n    self.showTime = (show = true) => {\n        if (show) {\n            _timeInterval = setInterval(() => {\n                _timeElement.innerText = self.getElapsedTimeString();\n            }, 1000);\n        } else {\n            clearInterval(_timeInterval);\n        }\n    };\n}\n","import ChangeDigitCommand from '../Commands/ChangeDigitCommand';\n\nexport default function DocumentEventHandler() {\n    const self = this;\n\n    /**\n     * Register event handlers for the document\n     * @return {void}\n     */\n    self.register = () => {\n        registerKeyboardNavigation();\n        registerValueSetting();\n    };\n\n    /**\n     * Register keyboard navigation events\n     * @return {void}\n     */\n    const registerKeyboardNavigation = () => {\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.isArrowKey(event.code)) {\n                // Deselect all cells, if the ctrl key is not pressed\n                if (! Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.grid.deselectAllCells();\n                }\n\n                let newCellIndex = Sudoku.grid.getLastNavigatedCell().getCellNumber() - 1;\n                let newCell = null;\n\n                // Then navigate to the intended cell\n                // Wrap around if needed\n                if (Sudoku.controls.isArrowKey(event.code, 'up')) {\n                    if ((newCellIndex -= 9) < 0) {\n                        newCellIndex = 81 + newCellIndex;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'down')) {\n                    if ((newCellIndex += 9) > 80) {\n                        newCellIndex = newCellIndex - 81;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'left')) {\n                    if ((--newCellIndex + 1) % 9 === 0) {\n                        newCellIndex += 9;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'right')) {\n                    if (++newCellIndex % 9 === 0) {\n                        newCellIndex -= 9;\n                    }\n                }\n\n                // Make the new cell the active one\n                newCell = Sudoku.grid.getCell(newCellIndex + 1);\n                newCell.setIsSelected(true);\n                Sudoku.grid.setLastNavigatedCell(newCell);\n            }\n        });\n    };\n\n    /**\n     * Register setting of values\n     * @return {void}\n     */\n    const registerValueSetting = () => {\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.isNumberKey(event.code)) {\n                // Set a number value\n                const digit = parseInt(event.key, 10);\n                Sudoku.history.execute(new ChangeDigitCommand(digit));\n            } else if (Sudoku.controls.isDeleteKey(event.code)) {\n                // Remove the value\n                Sudoku.history.execute(new ChangeDigitCommand(null));\n            } else if (event.code === 'KeyZ') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    if (Sudoku.controls.shiftKeyIsPressed()) {\n                        Sudoku.history.redo();\n                    } else {\n                        Sudoku.history.undo();\n                    }\n                }\n            } else if (event.code === 'KeyY') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.history.redo();\n                }\n            }\n        });\n    };\n}\n"],"sourceRoot":""}