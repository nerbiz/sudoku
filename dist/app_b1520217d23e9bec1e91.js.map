{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/Utilities/Visitor.js","webpack:///./assets/js/InputMode.js","webpack:///./assets/js/functions.js","webpack:///./assets/js/Traits/HasGridCells.js","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/EventHandlers/GridCellEventHandler.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/Commands/Command.js","webpack:///./assets/js/Commands/ChangeDigitCommand.js","webpack:///./assets/js/app.js","webpack:///./assets/js/Commands/CommandHistory.js","webpack:///./assets/js/Meta.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Clock.js","webpack:///./assets/js/EventHandlers/DocumentEventHandler.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visitor","InputMode","self","this","_mode","MODE_VALUE","_radioButtons","document","getElementsByName","init","selectCurrentRadioButton","registerEventListeners","forEach","radioButton","parseInt","getMode","checked","addEventListener","setMode","event","code","changeMode","MODE_CORNER","MODE_CENTER","toLowerCase","Error","trait","instance","traitConstructor","thing","traitInstance","HasGridCells","gridCells","addCell","cell","push","getCells","getCell","number","find","getCellNumber","undefined","getCellValues","map","getValue","filter","checkDuplicateCellValues","cellValues","cellValue","cells","length","setErrorState","GridRow","rowNumber","_rowNumber","getCellNumbers","numbers","rowIndex","GridColumn","columnNumber","_columnNumber","j","GridBox","boxNumber","_boxNumber","boxIndex","topLeftNumber","Math","floor","GridCellEventHandler","gridCell","_gridCell","register","registerMouseDownEvent","registerMouseEnterEvent","registerMouseUpEvent","getElement","Sudoku","controls","ctrlKeyIsPressed","setSelectedState","isSelected","grid","deselectAllCells","mouseIsPressed","setLastNavigatedCell","GridCell","cellNumber","_cellNumber","_element","_gridRow","_gridColumn","_gridBox","_value","_cornerMarks","_centerMarks","_isSelected","_isHighlighted","getElementById","isPrefilled","getColorNumber","setDigit","digit","inputMode","setValue","setCornerMark","setCenterMark","setCornerMarks","setCenterMarks","showMarks","getElementsByClassName","innerText","highlightRelatedCells","hasValue","getCornerMarks","cornerMarks","existingIndex","indexOf","splice","fillCornerMarks","allElements","sort","a","b","item","index","toString","hasCornerMark","getCenterMarks","centerMarks","fillCenterMarks","join","hasCenterMark","show","toggleMethod","classList","selected","addSelectedCell","isHighlighted","setHighlightedState","highlighted","addHighlightedCell","getRow","setRow","row","getColumn","setColumn","column","getBox","setBox","box","on","getState","Command","execute","undo","ChangeDigitCommand","currentMode","state","_digit","_cells","getSelectedCells","_inputMode","_cellsState","removeAllErrors","checkForErrors","usesMacOs","navigator","userAgent","match","constructor","baseConstructor","extend","window","history","_past","_future","command","clearFuture","pop","redo","meta","titleElement","getElementsByTagName","appName","titleField","descriptionField","title","enableTextFields","titleCallback","trim","descriptionCallback","_mousePressed","_ctrlKeyPressed","_shiftKeyPressed","_arrowKeys","up","down","left","right","_arrowKeysConcatenated","concat","_numberKeys","_deleteKeys","keyDownUpCallback","cancelKeyboardEvent","nodeName","target","metaKey","ctrlKey","preventDefault","shiftKey","shiftKeyIsPressed","isNumberKey","keyCode","isDeleteKey","isArrowKey","direction","_gridRows","_gridColumns","_gridBoxes","_selectedCells","_highlightedCells","_lastNavigatedCell","collectCells","getHighlightedCells","dehighlightAllCells","cellNumbers","sameDigitCellNumbers","getLastNavigatedCell","clock","getTotalElapsedMs","_initialMs","_startMoment","_timeElement","_timeInterval","_paused","start","showTime","unpause","Date","pause","getElapsedMsSinceStart","isPaused","getTime","getElapsedTimeString","totalSeconds","hours","minutes","seconds","padStart","setInterval","clearInterval","documentEventHandler","registerKeyboardNavigation","registerValueSetting","registerCellsDeselecting","newCellIndex","newCell","closest"],"mappings":"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","file":"app_b1520217d23e9bec1e91.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Indicates whether the visitor's OS is macOS\n * @type {boolean}\n * @static\n */\nVisitor.usesMacOs = (navigator.userAgent.toLowerCase().match(/macintosh/) !== null);\n\nexport default function Visitor() {\n    const self = this;\n}\n","/**\n * Several input modes, to be used as constants\n * @type {number}\n */\nInputMode.MODE_VALUE = 1;\nInputMode.MODE_CORNER = 2;\nInputMode.MODE_CENTER = 3;\n\nexport default function InputMode() {\n    const self = this;\n\n    /**\n     * The current mode\n     * @type {number}\n     * @private\n     */\n    let _mode = InputMode.MODE_VALUE;\n\n    /**\n     * The radio buttons that can change the mode\n     * @type {NodeListOf<HTMLElement>}\n     * @private\n     */\n    const _radioButtons = document.getElementsByName('input_mode');\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        selectCurrentRadioButton();\n        registerEventListeners();\n    };\n\n    /**\n     * Make the radio button of the current input mode checked\n     * @return {void}\n     */\n    const selectCurrentRadioButton = () => {\n        _radioButtons.forEach(radioButton => {\n            if (parseInt(radioButton.value, 10) === self.getMode()) {\n                radioButton.checked = true;\n            }\n        });\n    };\n\n    /**\n     * Enable toggling the mode with radio buttons\n     * @return {void}\n     */\n    const registerEventListeners = () => {\n        _radioButtons.forEach(radioButton => {\n            radioButton.addEventListener('change', () => {\n                self.setMode(parseInt(radioButton.value, 10));\n            });\n        });\n\n        document.addEventListener('keydown', event => {\n            switch (event.code) {\n                case 'Space':\n                    self.changeMode();\n                    break;\n                case 'KeyI':\n                    self.setMode(InputMode.MODE_VALUE);\n                    break;\n                case 'KeyO':\n                    self.setMode(InputMode.MODE_CORNER);\n                    break;\n                case 'KeyP':\n                    self.setMode(InputMode.MODE_CENTER);\n                    break;\n            }\n\n            selectCurrentRadioButton();\n        });\n    };\n\n    /**\n     * @param {number} mode\n     * @return {void}\n     */\n    self.setMode = mode => {\n        if ((typeof mode).toLowerCase() !== 'number') {\n            throw new Error(`Expected a number, got ${typeof mode}`);\n        }\n\n        if (mode < InputMode.MODE_VALUE || mode > InputMode.MODE_CENTER) {\n            throw new Error('Invalid input mode number given, please use InputMode constants');\n        }\n\n        _mode = mode;\n    };\n\n    /**\n     * Change the mode number incrementally\n     * @return {void}\n     */\n    self.changeMode = () => {\n        // Increase the mode number\n        // Wrap around, when max number is reached\n        if (++_mode > InputMode.MODE_CENTER) {\n            _mode = InputMode.MODE_VALUE;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    self.getMode = () => _mode;\n}\n","/**\n * Extend a base constructor\n * @param {function} constructor\n * @param {function} baseConstructor\n * @return {void}\n */\nexport function extend(constructor, baseConstructor) {\n    // Check the constructor types\n    if ((typeof constructor).toLowerCase() !== 'function') {\n        throw new Error(`Constructor needs to be a function, got ${typeof constructor} instead`);\n    }\n\n    if ((typeof baseConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Base constructor needs to be a function, got ${typeof baseConstructor} instead`);\n    }\n\n    constructor.prototype = new baseConstructor();\n    constructor.prototype.constructor = constructor;\n};\n\n/**\n * Add code from a trait to an object\n * @param {Object} instance\n * @param {function} traitConstructor\n * @return {void}\n */\nexport function trait(instance, traitConstructor) {\n    // Check the instance type\n    if ((typeof instance).toLowerCase() !== 'object') {\n        throw new Error(`Instance needs to be an object, got ${typeof instance} instead`);\n    }\n\n    // Check the constructor type\n    if ((typeof traitConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Trait constructor needs to be a function, got ${typeof traitConstructor} instead`);\n    }\n\n    // Create a new instance of the trait\n    const traitInstance = new traitConstructor();\n    // A property or method of the trait\n    let thing;\n\n    // Set the properties/methods in the calling object\n    for (thing in traitInstance) {\n        instance[thing] = traitInstance[thing];\n    }\n};\n","import GridCell from '../Grid/GridCell';\n\nexport default function HasGridCells() {\n    const self = this;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getCells = () => self.gridCells;\n\n    /**\n     * Get a cell by its cell number\n     * @param {number} number A 1-based cell number\n     * @return {GridCell|null}\n     */\n    self.getCell = number => {\n        const cell = self.gridCells.find(cell => cell.getCellNumber() === number);\n        return (cell === undefined) ? null : cell;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.checkDuplicateCellValues = () => {\n        // Pairs of value:gridCell[]\n        // Arrays of cells that have a certain value\n        const cellValues = {};\n\n        self.gridCells.forEach(cell => {\n            // Get the filled in value of the cell\n            const cellValue = cell.getValue();\n\n            // A value is needed for checking\n            if (cellValue === null) {\n                return;\n            }\n\n            // Get the cells that have that value an add the cell\n            const cells = cellValues[cellValue] || [];\n            cells.push(cell);\n            cellValues[cellValue] = cells;\n\n            // Set an error status on all duplicate cells, if there are any\n            if (cells.length > 1) {\n                cells.forEach(cell => cell.setErrorState(true));\n            }\n        });\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _rowNumber = rowNumber;\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        const rowIndex = _rowNumber - 1;\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + (rowIndex * 9));\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _columnNumber = columnNumber;\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = _columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 8 numbers, each incremented by 9\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     * @private\n     */\n    let _boxNumber = boxNumber;\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = _boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n}\n","import GridCell from '../Grid/GridCell';\n\n/**\n * @param {GridCell} gridCell\n * @constructor\n */\nexport default function GridCellEventHandler(gridCell) {\n    const self = this;\n\n    /**\n     * The cell to register event handlers for\n     * @type {GridCell}\n     * @private\n     */\n    const _gridCell = gridCell;\n\n    /**\n     * Register event handlers for a grid cell\n     * @return {void}\n     */\n    self.register = () => {\n        registerMouseDownEvent();\n        registerMouseEnterEvent();\n        registerMouseUpEvent();\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseDownEvent = () => {\n        _gridCell.getElement().addEventListener('mousedown', () => {\n            if (Sudoku.controls.ctrlKeyIsPressed()) {\n                // Toggle the selected status when clicked, if the ctrl key is pressed\n                _gridCell.setSelectedState(! _gridCell.isSelected());\n            } else {\n                // Select only this cell, if the ctrl key is not pressed\n                Sudoku.grid.deselectAllCells();\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseEnterEvent = () => {\n        _gridCell.getElement().addEventListener('mouseenter', () => {\n            // Allow multiple cells to be selected\n            if (Sudoku.controls.mouseIsPressed()) {\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseUpEvent = () => {\n        // On mouse up, this is the last selected cell\n        _gridCell.getElement().addEventListener(\n            'mouseup',\n            () => Sudoku.grid.setLastNavigatedCell(_gridCell)\n        );\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport GridCellEventHandler from '../EventHandlers/GridCellEventHandler';\nimport InputMode from '../InputMode';\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     * @private\n     */\n    const _cellNumber = cellNumber;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLDivElement|null}\n     * @private\n     */\n    let _element = null;\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     * @private\n     */\n    let _gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     * @private\n     */\n    let _gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     * @private\n     */\n    let _gridBox = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     * @private\n     */\n    let _isPrefilled = false;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     * @private\n     */\n    let _colorNumber = 1;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    let _value = null;\n\n    /**\n     * The pencil mark values (corner mode)\n     * @type {number[]}\n     * @private\n     */\n    let _cornerMarks = [];\n\n    /**\n     * The pencil mark values (center mode)\n     * @type {number[]}\n     * @private\n     */\n    let _centerMarks = [];\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    let _isSelected = false;\n\n    /**\n     * Whether the cell is currently highlighted\n     * @type {boolean}\n     * @private\n     */\n    let _isHighlighted = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        // Get the HTML cell element\n        _element = document.getElementById(`grid-cell-${self.getCellNumber()}`);\n        if (_element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.getCellNumber()}' not found`);\n        }\n\n        // Register event handlers\n        const eventHandler = new GridCellEventHandler(self);\n        eventHandler.register();\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getCellNumber = () => _cellNumber;\n\n    /**\n     * @return {HTMLDivElement|null}\n     */\n    self.getElement = () => _element;\n\n    /**\n     * @return {boolean}\n     */\n    self.isPrefilled = () => _isPrefilled;\n\n    /**\n     * @return {number}\n     */\n    self.getColorNumber = () => _colorNumber;\n\n    /**\n     * Wrapper for value, corner-marks and center-marks setting\n     * @param {number|null} digit\n     * @param {number|null} mode The input mode, uses current mode by default\n     * @return {void}\n     * @see InputMode for the mode constants\n     */\n    self.setDigit = (digit, mode = null) => {\n        // Use the current input mode, if null\n        if (mode === null) {\n            mode = Sudoku.inputMode.getMode();\n        }\n\n        // Null means deleting\n        if (digit === null) {\n            // Remove the marks only if no value is filled in\n            if (self.getValue() === null) {\n                self.setCornerMarks([]);\n                self.setCenterMarks([]);\n            } else {\n                self.setValue(null);\n            }\n\n            return;\n        }\n\n        switch (mode) {\n            case InputMode.MODE_VALUE:\n                self.setValue(digit);\n                break;\n            case InputMode.MODE_CORNER:\n                self.setCornerMark(digit);\n                break;\n            case InputMode.MODE_CENTER:\n                self.setCenterMark(digit);\n                break;\n        }\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => _value;\n\n    /**\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setValue = digit => {\n        // Remove the value, if the same digit is entered\n        if (digit === self.getValue()) {\n            digit = null;\n        }\n\n        // Show or hide the pencil marks\n        showMarks(digit === null);\n\n        // Show the value on screen\n        self.getElement().getElementsByClassName('cell-value')[0].innerText = digit;\n\n        _value = digit;\n\n        // Highlight other cells, also when the value is removed\n        Sudoku.grid.highlightRelatedCells();\n    };\n\n    /**\n     * Check if the cell has a value\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasValue = (digit = null) => {\n        // Check if the cell has any value\n        if (digit === null) {\n            return (self.getValue() !== null);\n        }\n\n        // Or check for a specific value\n        return (self.getValue() === digit);\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCornerMarks = () => _cornerMarks;\n\n    /**\n     * Add or remove a digit from the corner marks\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setCornerMark = digit => {\n        // Don't set a corner mark, if a value is filled in\n        if (self.getValue() !== null) {\n            return;\n        }\n\n        const cornerMarks = self.getCornerMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = cornerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            cornerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && cornerMarks.length < 8) {\n                cornerMarks.push(digit);\n            }\n        }\n\n        self.setCornerMarks(cornerMarks);\n    };\n\n    /**\n     * @param {number[]} cornerMarks\n     * @return {number[]}\n     */\n    self.setCornerMarks = cornerMarks => {\n        _cornerMarks = cornerMarks;\n        fillCornerMarks();\n    };\n\n    /**\n     * Fill corner marks in the cell\n     * @return {void}\n     */\n    const fillCornerMarks = () => {\n        // Clear all corner marks first\n        const allElements = self.getElement().getElementsByClassName('corner-mark');\n        for (let i = 0; i < allElements.length; i++) {\n            allElements[i].innerText = null;\n        }\n\n        // Show the corner marks\n        self.getCornerMarks()\n            .sort((a, b) => a - b)\n            .forEach((item, index) => {\n                document.getElementById(`corner-mark-${self.getCellNumber()}-${index + 1}`)\n                    .innerText = item.toString(10);\n            });\n    };\n\n    /**\n     * Check if the cell has a corner mark\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasCornerMark = (digit = null) => {\n        // Check if the cell has any corner mark\n        if (digit === null) {\n            return (self.getCornerMarks().length > 0);\n        }\n\n        // Or check for a specific value\n        return (self.getCornerMarks().indexOf(digit) > -1);\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCenterMarks = () => _centerMarks;\n\n    /**\n     * Add or remove a digit from the center marks\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setCenterMark = digit => {\n        // Don't set a center mark, if a value is filled in\n        if (self.getValue() !== null) {\n            return;\n        }\n\n        const centerMarks = self.getCenterMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = centerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            centerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && centerMarks.length < 5) {\n                centerMarks.push(digit);\n            }\n        }\n\n        self.setCenterMarks(centerMarks);\n    };\n\n    /**\n     * @param {number[]} centerMarks\n     * @return {number[]}\n     */\n    self.setCenterMarks = centerMarks => {\n        _centerMarks = centerMarks;\n        fillCenterMarks();\n    };\n\n    /**\n     * Fill corner marks in the cell\n     * @return {void}\n     */\n    const fillCenterMarks = () => {\n        const centerMarks = self.getCenterMarks().sort((a, b) => a - b).join('');\n        self.getElement().getElementsByClassName('center-marks')[0].innerText = centerMarks;\n    };\n\n    /**\n     * Check if the cell has a center mark\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasCenterMark = (digit = null) => {\n        // Check if the cell has any center mark\n        if (digit === null) {\n            return (self.getCenterMarks().length > 0);\n        }\n\n        // Or check for a specific value\n        return (self.getCenterMarks().indexOf(digit) > -1);\n    };\n\n    /**\n     * Toggle the visibility of the pencil marks\n     * @param {boolean} show\n     */\n    const showMarks = show => {\n        const toggleMethod = show ? 'remove' : 'add';\n\n        // Toggle the corner marks\n        for (let i = 1; i < 9; i++) {\n            document.getElementById(`corner-mark-${self.getCellNumber()}-${i}`)\n                .classList[toggleMethod]('hide');\n        }\n\n        // Toggle the center marks\n        self.getElement().getElementsByClassName('center-marks')[0]\n            .classList[toggleMethod]('hide');\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isSelected = () => _isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setSelectedState = selected => {\n        const toggleMethod = selected ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-selected');\n\n        // Don't add duplicates to the list\n        if (selected && ! self.isSelected()) {\n            Sudoku.grid.addSelectedCell(self);\n        }\n\n        _isSelected = selected;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isHighlighted = () => _isHighlighted;\n\n    /**\n     * @param {boolean} highlighted\n     * @return {void}\n     */\n    self.setHighlightedState = highlighted => {\n        const toggleMethod = highlighted ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-highlighted');\n\n        // Don't add duplicates to the list\n        if (highlighted && ! self.isHighlighted()) {\n            Sudoku.grid.addHighlightedCell(self);\n        }\n\n        _isHighlighted = highlighted;\n    };\n\n    /**\n     * @return {GridRow|null}\n     */\n    self.getRow = () => _gridRow;\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => _gridRow = row;\n\n    /**\n     * @return {GridColumn|null}\n     */\n    self.getColumn = () => _gridColumn;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => _gridColumn = column;\n\n    /**\n     * @return {GridBox|null}\n     */\n    self.getBox = () => _gridBox;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => _gridBox = box;\n\n    /**\n     * Set the error status of the element\n     * @param {boolean} on\n     * @return {void}\n     */\n    self.setErrorState = on => {\n        const toggleMethod = on ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('has-error');\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.getCellNumber()\n        + (self.isPrefilled() ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.getColorNumber()\n        + 'cr' + self.getCornerMarks().join('')\n        + 'cn' + self.getCenterMarks().join('');\n}\n","export default function Command() {\n    const self = this;\n\n    /**\n     * Execute the command\n     * @return {void}\n     */\n    self.execute = () => {\n        throw new Error('execute() method is not implemented in the command');\n    };\n\n    /**\n     * Undo the command\n     * @return {void}\n     */\n    self.undo = () => {\n        throw new Error('undo() method is not implemented in the command');\n    };\n}\n","import {extend} from '../functions';\nimport Command from './Command';\nimport InputMode from '../InputMode';\n\nextend(ChangeDigitCommand, Command);\n\n/**\n * @param {number|null} digit\n * @constructor\n */\nexport default function ChangeDigitCommand(digit) {\n    const self = this;\n    Command.call(self);\n\n    /**\n     * The digit to apply to cell(s)\n     * @type {number|null}\n     * @private\n     */\n    const _digit = digit;\n\n    /**\n     * The cells to apply the digit to\n     * @type {GridCell[]}\n     * @private\n     */\n    const _cells = Sudoku.grid.getSelectedCells();\n\n    /**\n     * The input mode for the digit\n     * @type {number}\n     * @private\n     */\n    const _inputMode = (() => {\n        const currentMode = Sudoku.inputMode.getMode();\n\n        // When more than 1 cell is selected,\n        // switch to pencil mark notation if the input mode is 'value'\n        return (_cells.length > 1 && currentMode === InputMode.MODE_VALUE)\n            ? InputMode.MODE_CORNER\n            : currentMode;\n    })();\n\n    /**\n     * Contains the state of cells, before changing the digit\n     * @type {Object}\n     * @private\n     */\n    const _cellsState = (() => {\n        // Pairs of cellNumber:{value, cornerMarks, centerMarks}\n        const state = {};\n\n        // Collect the state of all cells\n        _cells.forEach(cell => {\n            state[cell.getCellNumber()] = {\n                value: cell.getValue(),\n                // Copy the array, because they go by reference\n                cornerMarks: cell.getCornerMarks().map(item => item),\n                centerMarks: cell.getCenterMarks().map(item => item),\n            };\n        });\n\n        return state;\n    })();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        Sudoku.grid.removeAllErrors();\n        _cells.forEach(cell => cell.setDigit(_digit, _inputMode));\n        Sudoku.grid.checkForErrors();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    self.undo = () => {\n        Sudoku.grid.removeAllErrors();\n\n        // Apply the previous values to the cell(s)\n        _cells.forEach(cell => {\n            const state = _cellsState[cell.getCellNumber()];\n\n            cell.setValue(state.value);\n            cell.setCornerMarks(state.cornerMarks);\n            cell.setCenterMarks(state.centerMarks);\n        });\n\n        Sudoku.grid.checkForErrors();\n    };\n}\n","import Controls from './Controls';\nimport InputMode from './InputMode';\nimport Grid from './Grid/Grid';\nimport Clock from './Clock';\nimport DocumentEventHandler from './EventHandlers/DocumentEventHandler';\nimport CommandHistory from './Commands/CommandHistory';\nimport Meta from './Meta';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    history: new CommandHistory(),\n    meta: new Meta(),\n    controls: new Controls(),\n    inputMode: new InputMode(),\n    grid: new Grid(),\n    clock: new Clock(),\n    documentEventHandler: new DocumentEventHandler(),\n};\n\nSudoku.clock.init();\nSudoku.meta.init();\nSudoku.inputMode.init();\nSudoku.controls.init();\nSudoku.grid.init();\nSudoku.documentEventHandler.register();\n\n/*\nconst LZString = require('lz-string');\nconst state = JSON.stringify(Sudoku.grid.getState());\n// 3 digits per cell: 2 digits for cell number, 1 for value\n// const state = '038149156382416811295104457093378472567629123781806';\n// 81 numbers, representing every cell value (0 = empty)\n// const state = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nconst c1 = LZString.compress(state);\nconst c2 = LZString.compressToEncodedURIComponent(state);\n\nconsole.log(\n    state.length,\n    state,\n    c1.length,\n    c1,\n    c2.length,\n    c2\n);\n//*/\n","import Command from './Command';\n\nexport default function CommandHistory() {\n    const self = this;\n\n    /**\n     * The list of commands that have been executed\n     * @type {Command[]}\n     * @private\n     */\n    let _past = [];\n\n    /**\n     * The list of commands to redo\n     * @type {Command[]}\n     * @private\n     */\n    let _future = [];\n\n    /**\n     * Add a command to be executed\n     * @param {Command} command\n     * @param {boolean} clearFuture Whether to clear the future (redo) stack\n     * @return {number}\n     */\n    self.execute = (command, clearFuture = true) => {\n        command.execute();\n        _past.push(command);\n\n        // Clear the future (redo) list if needed\n        if (clearFuture) {\n            _future = [];\n        }\n    };\n\n    /**\n     * Undo the most recent command\n     * @return {void}\n     */\n    self.undo = () => {\n        // A command needs to exist\n        if (_past.length < 1) {\n            return;\n        }\n\n        // Undo the command\n        const command = _past.pop();\n        command.undo();\n\n        // Put the command in the future stack, for redoing\n        _future.push(command);\n    };\n\n    /**\n     * Execute the most recent command from the future stack\n     * @return {void}\n     */\n    self.redo = () => {\n        // A command needs to exist\n        if (_future.length < 1) {\n            return;\n        }\n\n        // Redo the command\n        const command = _future.pop();\n        self.execute(command, false);\n    };\n}\n","export default function Meta() {\n    const self = this;\n\n    /**\n     * The page title element\n     * @type {HTMLTitleElement}\n     */\n    const titleElement = document.getElementsByTagName('title')[0];\n\n    /**\n     * The name of the application\n     * @type {string}\n     */\n    const appName = titleElement.innerText;\n\n    /**\n     * The title input field\n     * @type {HTMLInputElement}\n     */\n    const titleField = document.getElementsByName('puzzle_title')[0];\n\n    /**\n     * The description input field\n     * @type {HTMLTextAreaElement}\n     */\n    const descriptionField = document.getElementsByName('puzzle_description')[0];\n\n    /**\n     * An optional title for the sudoku\n     * @type {string|null}\n     */\n    let title = null;\n\n    /**\n     * An optional description for the sudoku\n     * @type {string|null}\n     */\n    let description = null;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        enableTextFields();\n    };\n\n    /**\n     * @return {void}\n     */\n    const enableTextFields = () => {\n        const titleCallback = () => {\n            title = titleField.value.trim();\n\n            // Update the page title\n            titleElement.innerText = (title !== '')\n                ? `${title} - ${appName}`\n                : appName;\n        };\n\n        titleField.addEventListener('change', titleCallback);\n        titleField.addEventListener('keyup', titleCallback);\n        titleField.addEventListener('paste', titleCallback);\n\n        const descriptionCallback = () => description = descriptionField.value;\n\n        descriptionField.addEventListener('change', descriptionCallback);\n        descriptionField.addEventListener('keyup', descriptionCallback);\n        descriptionField.addEventListener('paste', descriptionCallback);\n    };\n}\n","import Visitor from './Utilities/Visitor';\n\nexport default function Controls() {\n    const self = this;\n\n    /**\n     * Indicates whether a mouse button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _mousePressed = false;\n\n    /**\n     * Indicates whether a ctrl button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _ctrlKeyPressed = false;\n\n    /**\n     * Indicates whether a shift button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _shiftKeyPressed = false;\n\n    /**\n     * Arrow key codes\n     * @type {Object}\n     * @private\n     */\n    const _arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Arrow key codes, as 1 array\n     * @type {string[]}\n     * @private\n     */\n    const _arrowKeysConcatenated = _arrowKeys.up\n        .concat(_arrowKeys.down)\n        .concat(_arrowKeys.left)\n        .concat(_arrowKeys.right);\n\n    /**\n     * Number key codes\n     * @type {string[]}\n     * @private\n     */\n    const _numberKeys = [\n        'Digit1', 'Numpad1', 'Digit2', 'Numpad2', 'Digit3', 'Numpad3',\n        'Digit4', 'Numpad4', 'Digit5', 'Numpad5', 'Digit6', 'Numpad6',\n        'Digit7', 'Numpad7', 'Digit8', 'Numpad8', 'Digit9', 'Numpad9',\n    ];\n\n    /**\n     * Delete key codes\n     * @type {string[]}\n     * @private\n     */\n    const _deleteKeys = ['Delete', 'Backspace'];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => _mousePressed = true);\n        document.addEventListener('mouseup', () => _mousePressed = false);\n        document.addEventListener('keydown', keyDownUpCallback);\n        document.addEventListener('keyup', keyDownUpCallback);\n    };\n\n    /**\n     * Decide whether to cancel a keyboard listener\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.cancelKeyboardEvent = event => {\n        const nodeName = event.target.nodeName.toLowerCase();\n\n        // Don't use custom listener on input elements\n        return (['input', 'textarea'].indexOf(nodeName) > -1);\n    };\n\n    /**\n     * Callback for keydown and keyup\n     * @param {Event} event\n     * @return {void}\n     */\n    const keyDownUpCallback = event => {\n        _ctrlKeyPressed = Visitor.usesMacOs ? event.metaKey : event.ctrlKey;\n\n        // Prevent browser keyboard shortcut\n        if (! self.cancelKeyboardEvent(event)) {\n            // Browser navigation\n            const arrowKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n            if (arrowKeys.indexOf(event.code) > -1) {\n                event.preventDefault();\n            }\n\n            if (_ctrlKeyPressed) {\n                // Browser history\n                if (event.code === 'KeyY') {\n                    event.preventDefault();\n                }\n            }\n        }\n\n        _shiftKeyPressed = event.shiftKey;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.mouseIsPressed = () => _mousePressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.ctrlKeyIsPressed = () => _ctrlKeyPressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.shiftKeyIsPressed = () => _shiftKeyPressed;\n\n    /**\n     * Checks whether a keycode is a number key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isNumberKey = keyCode => (_numberKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is a delete key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isDeleteKey = keyCode => (_deleteKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is an arrow key\n     * @param {string} keyCode\n     * @param {string} direction (any or up/down/left/right)\n     * @return {boolean}\n     */\n    self.isArrowKey = (keyCode, direction = 'any') => {\n        // Check for any arrow key\n        if (direction === 'any') {\n            return (_arrowKeysConcatenated.indexOf(keyCode) > -1);\n        }\n\n        // Check for a specific arrow key\n        return (\n            _arrowKeys[direction]\n            && _arrowKeys[direction].indexOf(keyCode) > -1\n        );\n    };\n}\n","import {trait} from '../functions';\nimport GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport HasGridCells from '../Traits/HasGridCells';\n\nexport default function Grid() {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     * @private\n     */\n    const _gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     * @private\n     */\n    const _gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     * @private\n     */\n    const _gridBoxes = [];\n\n    /**\n     * A list of currently selected cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _selectedCells = [];\n\n    /**\n     * A list of currently highlighted cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _highlightedCells = [];\n\n    /**\n     * The cell that is last navigated to\n     * @type {GridCell|null}\n     * @private\n     */\n    let _lastNavigatedCell = null;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        collectCells();\n    };\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     */\n    const collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            _gridRows.push(new GridRow(i));\n            _gridColumns.push(new GridColumn(i));\n            _gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n            self.addCell(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (_gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridRows[j].addCell(gridCell);\n                    gridCell.setRow(_gridRows[j]);\n                }\n\n                if (_gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(_gridColumns[j]);\n                }\n\n                if (_gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(_gridBoxes[j]);\n                }\n            }\n        }\n\n        self.setLastNavigatedCell(null);\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getSelectedCells = () => _selectedCells;\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    self.addSelectedCell = cell => {\n        _selectedCells.push(cell);\n\n        // Highlight related cells after selecting\n        self.highlightRelatedCells();\n    };\n\n    /**\n     * Deselect all the selected cells\n     * @return {void}\n     */\n    self.deselectAllCells = () => {\n        self.getSelectedCells().forEach(cell => cell.setSelectedState(false));\n        _selectedCells = [];\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getHighlightedCells = () => _highlightedCells;\n\n    /**\n     * Add a cell to the list of highlighted cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addHighlightedCell = cell => _highlightedCells.push(cell);\n\n    /**\n     * De-highlight all the highlighted cells\n     * @return {void}\n     */\n    self.dehighlightAllCells = () => {\n        self.getHighlightedCells().forEach(cell => cell.setHighlightedState(false));\n        _highlightedCells = [];\n    };\n\n    /**\n     * Highlight all cells that are related to selected cell(s)\n     * @return {void}\n     */\n    self.highlightRelatedCells = () => {\n        self.dehighlightAllCells();\n\n        let cellNumbers = [];\n\n        // Add the cell numbers of the row, column and box that the cell is in\n        self.getSelectedCells().forEach(cell => {\n            cellNumbers = cellNumbers.concat(cell.getRow().getCellNumbers())\n                .concat(cell.getColumn().getCellNumbers())\n                .concat(cell.getBox().getCellNumbers());\n\n            // See if the cell has a value, for further highlighting\n            const cellValue = cell.getValue();\n            if (cellValue === null) {\n                return;\n            }\n\n            // Add the cell numbers of cells that contain the same digit\n            const sameDigitCellNumbers = self.getCells()\n                .filter(cell => {\n                    return (cell.hasValue(cellValue)\n                        || cell.hasCornerMark(cellValue)\n                        || cell.hasCenterMark(cellValue));\n                })\n                .map(cell => cell.getCellNumber());\n\n            cellNumbers = cellNumbers.concat(sameDigitCellNumbers);\n        });\n\n        cellNumbers\n            // Remove duplicates\n            .filter((value, index, numbers) => {\n                return numbers.indexOf(value) === index;\n            })\n            // Highlight the cells\n            .forEach(cellNumber => {\n                self.getCell(cellNumber).setHighlightedState(true);\n            });\n    };\n\n    /**\n     * @return {GridCell|null}\n     */\n    self.getLastNavigatedCell = () => _lastNavigatedCell;\n\n    /**\n     * @param {GridCell|null} cell\n     * @return {null}\n     */\n    self.setLastNavigatedCell = cell => {\n        // The default last navigated cell is the center one\n        if (cell === null) {\n            _lastNavigatedCell = self.getCell(41);\n        } else {\n            _lastNavigatedCell = cell;\n        }\n    };\n\n    /**\n     * Check for errors in the grid\n     * @return {void}\n     */\n    self.checkForErrors = () => {\n        _gridRows.forEach(row => row.checkDuplicateCellValues());\n        _gridColumns.forEach(column => column.checkDuplicateCellValues());\n        _gridBoxes.forEach(box => box.checkDuplicateCellValues());\n    };\n\n    /**\n     * Remove the error status of all cells\n     * @return {void}\n     */\n    self.removeAllErrors = () => {\n        self.getCells().forEach(cell => cell.setErrorState(false));\n    };\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () =>\n        // Application version\n        'a1'\n        // Elapsed milliseconds\n        + 't' + Sudoku.clock.getTotalElapsedMs()\n        // Cells state\n        + self.getCells().map(cell => cell.getState()).join('');\n}\n","export default function Clock() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     * @private\n     */\n    let _initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     * @private\n     */\n    let _startMoment = null;\n\n    /**\n     * The element that shows the elapsed time\n     * @type {HTMLSpanElement}\n     * @private\n     */\n    const _timeElement = document.getElementById('elapsed-time');\n\n    /**\n     * The interval for showing the time on screen\n     * @type {number|null}\n     * @private\n     */\n    let _timeInterval = null;\n\n    /**\n     * Indicates whether the clock is paused\n     * @type {boolean}\n     * @private\n     */\n    let _paused = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        self.start();\n        self.showTime();\n    };\n\n    /**\n     * Set the start/unpause moment for calculating elapsed time\n     * @return {void}\n     */\n    self.start = self.unpause = () => {\n        _startMoment = new Date();\n        _paused = false;\n    };\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        _initialMs += self.getElapsedMsSinceStart();\n        _startMoment = null;\n        _paused = true;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isPaused = () => _paused;\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (_startMoment !== null)\n            ? (new Date()).getTime() - _startMoment.getTime()\n            : 0;\n    };\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => _initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n\n    /**\n     * Decide whether to show the elapsed time on screen\n     * @param {boolean} show\n     * @return {void}\n     */\n    self.showTime = (show = true) => {\n        if (show) {\n            _timeInterval = setInterval(() => {\n                _timeElement.innerText = self.getElapsedTimeString();\n            }, 1000);\n        } else {\n            clearInterval(_timeInterval);\n        }\n    };\n}\n","import ChangeDigitCommand from '../Commands/ChangeDigitCommand';\n\nexport default function DocumentEventHandler() {\n    const self = this;\n\n    /**\n     * Register event handlers for the document\n     * @return {void}\n     */\n    self.register = () => {\n        registerKeyboardNavigation();\n        registerValueSetting();\n        registerCellsDeselecting();\n    };\n\n    /**\n     * Register keyboard navigation events\n     * @return {void}\n     */\n    const registerKeyboardNavigation = () => {\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.cancelKeyboardEvent(event)) {\n                return;\n            }\n\n            if (Sudoku.controls.isArrowKey(event.code)) {\n                // Deselect all cells, if the ctrl key is not pressed\n                if (! Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.grid.deselectAllCells();\n                }\n\n                let newCellIndex = Sudoku.grid.getLastNavigatedCell().getCellNumber() - 1;\n                let newCell = null;\n\n                // Then navigate to the intended cell\n                // Wrap around if needed\n                if (Sudoku.controls.isArrowKey(event.code, 'up')) {\n                    if ((newCellIndex -= 9) < 0) {\n                        newCellIndex = 81 + newCellIndex;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'down')) {\n                    if ((newCellIndex += 9) > 80) {\n                        newCellIndex = newCellIndex - 81;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'left')) {\n                    if ((--newCellIndex + 1) % 9 === 0) {\n                        newCellIndex += 9;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'right')) {\n                    if (++newCellIndex % 9 === 0) {\n                        newCellIndex -= 9;\n                    }\n                }\n\n                // Make the new cell the active one\n                newCell = Sudoku.grid.getCell(newCellIndex + 1);\n                newCell.setSelectedState(true);\n                Sudoku.grid.setLastNavigatedCell(newCell);\n            }\n        });\n    };\n\n    /**\n     * Register setting of values\n     * @return {void}\n     */\n    const registerValueSetting = () => {\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.cancelKeyboardEvent(event)) {\n                return;\n            }\n\n            if (Sudoku.controls.isNumberKey(event.code)) {\n                // Set a number value\n                const digit = parseInt(event.key, 10);\n                Sudoku.history.execute(new ChangeDigitCommand(digit));\n            } else if (Sudoku.controls.isDeleteKey(event.code)) {\n                // Remove the value\n                Sudoku.history.execute(new ChangeDigitCommand(null));\n            } else if (event.code === 'KeyZ') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    if (Sudoku.controls.shiftKeyIsPressed()) {\n                        Sudoku.history.redo();\n                    } else {\n                        Sudoku.history.undo();\n                    }\n                }\n            } else if (event.code === 'KeyY') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.history.redo();\n                }\n            } else if (event.code === 'Escape') {\n                // Pause / unpause\n                Sudoku.clock.isPaused()\n                    ? Sudoku.clock.unpause()\n                    : Sudoku.clock.pause();\n            }\n        });\n    };\n\n    /**\n     * Deselect all cells when clicking outside the grid\n     * @return {void}\n     */\n    const registerCellsDeselecting = () => {\n        document.addEventListener('mousedown', event => {\n            if (event.target.closest('.grid-cell') === null) {\n                Sudoku.grid.deselectAllCells();\n                Sudoku.grid.dehighlightAllCells();\n            }\n        });\n    };\n}\n"],"sourceRoot":""}