{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/Utilities/Visitor.js","webpack:///./assets/js/InputMode.js","webpack:///./assets/js/functions.js","webpack:///./assets/js/Traits/HasGridCells.js","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/EventHandlers/GridCellEventHandler.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/app.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Timer.js","webpack:///./assets/js/EventHandlers/DocumentEventHandler.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visitor","InputMode","self","this","_mode","MODE_VALUE","radioButtons","document","getElementsByName","init","selectCurrentRadioButton","registerEventListeners","forEach","radioButton","parseInt","getMode","checked","addEventListener","setMode","event","code","changeMode","MODE_CORNER","MODE_CENTER","toLowerCase","Error","trait","instance","traitConstructor","thing","traitInstance","HasGridCells","gridCells","addCell","cell","push","getCellValues","map","getValue","filter","checkDuplicateCellValues","cellValues","cellValue","cells","length","setErrorStatus","GridRow","rowNumber","getCellNumbers","numbers","GridColumn","columnNumber","number","j","GridBox","boxNumber","boxIndex","topLeftNumber","Math","floor","GridCellEventHandler","gridCell","register","registerMouseDownEvent","registerMouseEnterEvent","registerMouseUpEvent","element","Sudoku","controls","ctrlKeyPressed","setIsSelected","getIsSelected","grid","deselectAllCells","mousePressed","setLastNavigatedCell","GridCell","cellNumber","gridRow","gridColumn","gridBox","isPrefilled","colorNumber","_value","_cornerMarks","_centerMarks","_isSelected","getElementById","setDigit","digit","inputMode","setValue","setCornerMark","setCenterMark","toggleMarksVisibility","getElementsByClassName","innerText","getCornerMarks","cornerMarks","existingIndex","indexOf","splice","allElements","sort","a","b","item","index","toString","getCenterMarks","centerMarks","join","show","toggleMethod","classList","selected","add","addSelectedCell","remove","setRow","row","setColumn","column","setBox","box","on","getState","usesMacOs","navigator","userAgent","match","window","arrowKeys","up","down","left","right","arrowKeysConcatenated","concat","numberKeys","deleteKeys","ctrlKeyCheck","metaKey","ctrlKey","preventDefault","isNumberKey","keyCode","isDeleteKey","isArrowKey","direction","gridRows","gridColumns","gridBoxes","selectedCells","lastNavigatedCell","collectCells","getCells","getCellByIndex","getSelectedCells","checkForErrors","removeAllErrors","timer","getTotalElapsedMs","initialMs","startMoment","timeElement","timeInterval","start","unpause","Date","pause","getElapsedMsSinceStart","getTime","getElapsedTimeString","totalSeconds","hours","minutes","seconds","padStart","showTime","setInterval","clearInterval","documentEventHandler","registerKeyboardNavigation","registerErrorEvent","newCellIndex","newCell"],"mappings":"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","file":"app_a2c861fb4363fa3ea2ac.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Indicates whether the visitor's OS is macOS\n * @type {boolean}\n * @static\n */\nVisitor.usesMacOs = (navigator.userAgent.match(/Macintosh/) !== null);\n\nexport default function Visitor() {\n    const self = this;\n}\n","/**\n * Several input modes, to be used as constants\n * @type {number}\n */\nInputMode.MODE_VALUE = 1;\nInputMode.MODE_CORNER = 2;\nInputMode.MODE_CENTER = 3;\n\nexport default function InputMode() {\n    const self = this;\n\n    /**\n     * The current mode\n     * @type {number}\n     * @private\n     */\n    let _mode = InputMode.MODE_VALUE;\n\n    /**\n     * The radio buttons that can change the mode\n     * @type {NodeListOf<HTMLElement>}\n     */\n    self.radioButtons = document.getElementsByName('input_mode');\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        selectCurrentRadioButton();\n        registerEventListeners();\n    };\n\n    /**\n     * Make the radio button of the current input mode checked\n     * @return {void}\n     */\n    const selectCurrentRadioButton = () => {\n        self.radioButtons.forEach(radioButton => {\n            if (parseInt(radioButton.value, 10) === self.getMode()) {\n                radioButton.checked = true;\n            }\n        });\n    };\n\n    /**\n     * Enable toggling the mode with radio buttons\n     * @return {void}\n     */\n    const registerEventListeners = () => {\n        self.radioButtons.forEach(radioButton => {\n            radioButton.addEventListener('change', () => {\n                self.setMode(parseInt(radioButton.value, 10));\n            });\n        });\n\n        document.addEventListener('keydown', event => {\n            switch (event.code) {\n                case 'Space':\n                    self.changeMode();\n                    break;\n                case 'KeyI':\n                    self.setMode(InputMode.MODE_VALUE);\n                    break;\n                case 'KeyO':\n                    self.setMode(InputMode.MODE_CORNER);\n                    break;\n                case 'KeyP':\n                    self.setMode(InputMode.MODE_CENTER);\n                    break;\n            }\n\n            selectCurrentRadioButton();\n        });\n    };\n\n    /**\n     * @param {number} mode\n     * @return {void}\n     */\n    self.setMode = mode => {\n        if ((typeof mode).toLowerCase() !== 'number') {\n            throw new Error(`Expected a number, got ${typeof mode}`);\n        }\n\n        if (mode < InputMode.MODE_VALUE || mode > InputMode.MODE_CENTER) {\n            throw new Error('Invalid input mode number given, please use InputMode constants');\n        }\n\n        _mode = mode;\n    };\n\n    /**\n     * Change the mode number incrementally\n     * @return {void}\n     */\n    self.changeMode = () => {\n        // Increase the mode number\n        _mode++;\n\n        // Wrap around, when max number is reached\n        if (_mode > InputMode.MODE_CENTER) {\n            _mode = InputMode.MODE_VALUE;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    self.getMode = () => _mode;\n}\n","/**\n * Add code from a trait to an object\n * @param {Object} instance\n * @param {function} traitConstructor\n * @return {void}\n */\nexport function trait(instance, traitConstructor) {\n    // Check the instance type\n    if ((typeof instance).toLowerCase() !== 'object') {\n        throw new Error(`Instance needs to be an object, got ${typeof instance} instead`);\n    }\n\n    // Check the constructor type\n    if ((typeof traitConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Trait constructor needs to be a function/class, got ${typeof traitConstructor} instead`);\n    }\n\n    // Create a new instance of the trait\n    const traitInstance = new traitConstructor();\n    // A property or method of the trait\n    let thing;\n\n    // Set the properties/methods in the calling object\n    for (thing in traitInstance) {\n        instance[thing] = traitInstance[thing];\n    }\n}\n","import GridCell from '../Grid/GridCell';\n\nexport default function HasGridCells() {\n    const self = this;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.checkDuplicateCellValues = () => {\n        // Pairs of value:gridCell[]\n        // Arrays of cells that have a certain value\n        const cellValues = {};\n\n        self.gridCells.forEach(cell => {\n            // Get the filled in value of the cell\n            const cellValue = cell.getValue();\n\n            // A value is needed for checking\n            if (cellValue === null) {\n                return;\n            }\n\n            // Get the cells that have that value an add the cell\n            const cells = cellValues[cellValue] || [];\n            cells.push(cell);\n            cellValues[cellValue] = cells;\n\n            // Set an error status on all duplicate cells, if there are any\n            if (cells.length > 1) {\n                cells.forEach(cell => cell.setErrorStatus(true));\n            }\n        });\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     */\n    self.rowNumber = rowNumber;\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + ((self.rowNumber - 1) * 9));\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     */\n    self.columnNumber = columnNumber;\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = self.columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 9 to the number 8 times\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     */\n    self.boxNumber = boxNumber;\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = self.boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n}\n","import GridCell from '../Grid/GridCell';\n\n/**\n * @param {GridCell} gridCell\n * @constructor\n */\nexport default function GridCellEventHandler(gridCell) {\n    const self = this;\n\n    /**\n     * The cell to register event handlers for\n     * @type {GridCell}\n     */\n    self.gridCell = gridCell;\n\n    /**\n     * Register event handlers for a grid cell\n     * @return {void}\n     */\n    self.register = () => {\n        registerMouseDownEvent();\n        registerMouseEnterEvent();\n        registerMouseUpEvent();\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseDownEvent = () => {\n        self.gridCell.element.addEventListener('mousedown', () => {\n            if (Sudoku.controls.ctrlKeyPressed) {\n                // Toggle the selected status when clicked, if the ctrl key is pressed\n                self.gridCell.setIsSelected(! self.gridCell.getIsSelected());\n            } else {\n                // Select only this cell, if the ctrl key is not pressed\n                Sudoku.grid.deselectAllCells();\n                self.gridCell.setIsSelected(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseEnterEvent = () => {\n        self.gridCell.element.addEventListener('mouseenter', () => {\n            // Allow multiple cells to be selected\n            if (Sudoku.controls.mousePressed) {\n                self.gridCell.setIsSelected(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     */\n    const registerMouseUpEvent = () => {\n        // On mouse up, this is the last selected cell\n        self.gridCell.element.addEventListener(\n            'mouseup',\n            () => Sudoku.grid.setLastNavigatedCell(self.gridCell)\n        );\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport GridCellEventHandler from '../EventHandlers/GridCellEventHandler';\nimport InputMode from '../InputMode';\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     */\n    self.cellNumber = cellNumber;\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     */\n    self.gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     */\n    self.gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     */\n    self.gridBox = null;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLElement|null}\n     */\n    self.element = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     */\n    self.isPrefilled = false;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     */\n    self.colorNumber = 1;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    let _value = null;\n\n    /**\n     * The pencil mark values (corner mode)\n     * @type {number[]}\n     * @private\n     */\n    let _cornerMarks = [];\n\n    /**\n     * The pencil mark values (center mode)\n     * @type {number[]}\n     * @private\n     */\n    let _centerMarks = [];\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    let _isSelected = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        // Get the HTML cell element\n        self.element = document.getElementById(`grid-cell-${self.cellNumber}`);\n        if (self.element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.cellNumber}' not found`);\n        }\n\n        // Register event handlers\n        const eventHandler = new GridCellEventHandler(self);\n        eventHandler.register();\n    };\n\n    /**\n     * Wrapper for value, corner-marks and center-marks setting\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setDigit = digit => {\n        switch (Sudoku.inputMode.getMode()) {\n            case InputMode.MODE_VALUE:\n                self.setValue(digit);\n                break;\n            case InputMode.MODE_CORNER:\n                self.setCornerMark(digit);\n                break;\n            case InputMode.MODE_CENTER:\n                self.setCenterMark(digit);\n                break;\n        }\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => _value;\n\n    /**\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.setValue = digit => {\n        // Remove the value, if the same digit is entered\n        if (digit === self.getValue()) {\n            digit = null;\n        }\n\n        // Show or hide the pencil marks\n        toggleMarksVisibility((digit === null));\n\n        // Show the value on screen\n        self.element.getElementsByClassName('cell-value')[0].innerText = digit;\n\n        _value = digit;\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCornerMarks = () => _cornerMarks;\n\n    /**\n     * Add or remove a digit from the corner marks\n     * @param {number} digit\n     * @return {void}\n     */\n    self.setCornerMark = digit => {\n        const cornerMarks = self.getCornerMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = cornerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            cornerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (cornerMarks.length < 8) {\n                cornerMarks.push(digit);\n            }\n        }\n\n        // Clear all corner marks first\n        const allElements = self.element.getElementsByClassName('corner-mark');\n        for (let i = 0; i < allElements.length; i++) {\n            allElements[i].innerText = null;\n        }\n\n        // Show the corner marks\n        cornerMarks.sort((a, b) => a - b)\n            .forEach((item, index) => document\n                .getElementById(`corner-mark-${self.cellNumber}-${index + 1}`)\n                .innerText = item.toString(10));\n\n        _cornerMarks = cornerMarks;\n    };\n\n    /**\n     * @return {number[]}\n     */\n    self.getCenterMarks = () => _centerMarks;\n\n    /**\n     * Add or remove a digit from the center marks\n     * @param {number} digit\n     * @return {void}\n     */\n    self.setCenterMark = digit => {\n        const centerMarks = self.getCenterMarks();\n\n        // Remove if the digit exists, otherwise add it\n        const existingIndex = centerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            centerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (centerMarks.length < 5) {\n                centerMarks.push(digit);\n            }\n        }\n\n        // Show the center marks\n        self.element.getElementsByClassName('center-marks')[0]\n            .innerText = centerMarks.sort((a, b) => a - b).join('');\n\n        _centerMarks = centerMarks;\n    };\n\n    /**\n     * Toggle the visibility of the pencil marks\n     * @param {boolean} show\n     */\n    const toggleMarksVisibility = show => {\n        const toggleMethod = (show) ? 'remove' : 'add';\n\n        // Toggle the corner marks\n        for (let i = 1; i < 9; i++) {\n            document.getElementById(`corner-mark-${self.cellNumber}-${i}`)\n                .classList[toggleMethod]('hide');\n        }\n\n        // Toggle the center marks\n        self.element.getElementsByClassName('center-marks')[0]\n            .classList[toggleMethod]('hide');\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.getIsSelected = () => _isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setIsSelected = selected => {\n        if (selected) {\n            self.element.classList.add('selected');\n\n            // Don't add duplicates to the list of selected cells\n            if (! self.getIsSelected()) {\n                Sudoku.grid.addSelectedCell(self);\n            }\n        }\n\n        else {\n            self.element.classList.remove('selected');\n        }\n\n        _isSelected = selected;\n    };\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => self.gridRow = row;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => self.gridColumn = column;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => self.gridBox = box;\n\n    /**\n     * Set the error status of the element\n     * @param {boolean} on\n     * @return {void}\n     */\n    self.setErrorStatus = (on = true) => {\n        if (on) {\n            self.element.classList.add('has-error');\n        } else {\n            self.element.classList.remove('has-error');\n        }\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.cellNumber\n        + (self.isPrefilled ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.colorNumber\n        + 'cr' + self.getCornerMarks().join('')\n        + 'cn' + self.getCenterMarks().join('');\n}\n","import Controls from './Controls';\nimport InputMode from './InputMode';\nimport Grid from './Grid/Grid';\nimport Timer from './Timer';\nimport DocumentEventHandler from './EventHandlers/DocumentEventHandler';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    controls: new Controls(),\n    inputMode: new InputMode(),\n    grid: new Grid(),\n    timer: new Timer(),\n    documentEventHandler: new DocumentEventHandler(),\n};\n\nSudoku.timer.start();\nSudoku.timer.showTime();\nSudoku.inputMode.init();\nSudoku.controls.init();\nSudoku.grid.collectCells();\nSudoku.documentEventHandler.register();\n\n/*\nconst LZString = require('lz-string');\nconst state = JSON.stringify(Sudoku.grid.getState());\n// Pairs of 2-digits (cell number) and value (1 number)\n// const state = '038149156382416811295104457093378472567629123781806';\n// 81 numbers, representing every cell value (0 = empty)\n// const state = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nconst c1 = LZString.compress(state);\nconst c2 = LZString.compressToEncodedURIComponent(state);\n\nconsole.log(\n    state.length,\n    state,\n    c1.length,\n    c1,\n    c2.length,\n    c2\n);\n//*/\n","import Visitor from './Utilities/Visitor';\n\nexport default function Controls() {\n    const self = this;\n\n    /**\n     * Indicates whether a mouse button is currently pressed\n     * @type {boolean}\n     */\n    self.mousePressed = false;\n\n    /**\n     * Indicates whether a ctrl button is currently pressed\n     * @type {boolean}\n     */\n    self.ctrlKeyPressed = false;\n\n    /**\n     * Arrow key codes\n     * @type {Object}\n     */\n    self.arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Arrow key codes, as 1 array\n     * @type {string[]}\n     */\n    self.arrowKeysConcatenated = self.arrowKeys.up\n        .concat(self.arrowKeys.down)\n        .concat(self.arrowKeys.left)\n        .concat(self.arrowKeys.right);\n\n    /**\n     * Number key codes\n     * @type {string[]}\n     */\n    self.numberKeys = [\n        'Digit1', 'Numpad1', 'Digit2', 'Numpad2', 'Digit3', 'Numpad3',\n        'Digit4', 'Numpad4', 'Digit5', 'Numpad5', 'Digit6', 'Numpad6',\n        'Digit7', 'Numpad7', 'Digit8', 'Numpad8', 'Digit9', 'Numpad9',\n    ];\n\n    /**\n     * Delete key codes\n     * @type {string[]}\n     */\n    self.deleteKeys = ['Delete', 'Backspace'];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => self.mousePressed = true);\n        document.addEventListener('mouseup', () => self.mousePressed = false);\n\n        const ctrlKeyCheck = event => {\n            self.ctrlKeyPressed = Visitor.usesMacOs\n                ? event.metaKey\n                : event.ctrlKey;\n\n            // Prevent browser navigation (key combination is used for selecting cells)\n            if (self.ctrlKeyPressed && ['ArrowLeft', 'ArrowRight'].indexOf(event.code) > -1) {\n                event.preventDefault();\n            }\n        };\n\n        document.addEventListener('keydown', ctrlKeyCheck);\n        document.addEventListener('keyup', ctrlKeyCheck);\n    };\n\n    /**\n     * Checks whether a keycode is a number key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isNumberKey = keyCode => (self.numberKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is a delete key\n     * @param {string} keyCode\n     * @return {boolean}\n     */\n    self.isDeleteKey = keyCode => (self.deleteKeys.indexOf(keyCode) > -1);\n\n    /**\n     * Checks whether a keycode is an arrow key\n     * @param {string} keyCode\n     * @param {string} direction (any or up/down/left/right)\n     * @return {boolean}\n     */\n    self.isArrowKey = (keyCode, direction = 'any') => {\n        // Check for any arrow key\n        if (direction === 'any') {\n            return (self.arrowKeysConcatenated.indexOf(keyCode) > -1);\n        }\n\n        // Check for a specific arrow key\n        return (\n            self.arrowKeys[direction]\n            && self.arrowKeys[direction].indexOf(keyCode) > -1\n        );\n    };\n}\n","import GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\n\nexport default function Grid() {\n    const self = this;\n    \n    /**\n     * All the cells in the grid\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     */\n    self.gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     */\n    self.gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     */\n    self.gridBoxes = [];\n\n    /**\n     * A list of currently selected (highlighted) cells\n     * @type {GridCell[]}\n     */\n    self.selectedCells = [];\n\n    /**\n     * The cell that is last navigated to\n     * @type {GridCell|null}\n     */\n    self.lastNavigatedCell = null;\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     */\n    self.collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            self.gridRows.push(new GridRow(i));\n            self.gridColumns.push(new GridColumn(i));\n            self.gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n\n            // Add the cell\n            self.gridCells.push(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (self.gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    self.gridRows[j].addCell(gridCell);\n                    gridCell.setRow(self.gridRows[j]);\n                }\n\n                if (self.gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    self.gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(self.gridColumns[j]);\n                }\n\n                if (self.gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    self.gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(self.gridBoxes[j]);\n                }\n            }\n        }\n\n        self.setLastNavigatedCell(null);\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getCells = () => self.gridCells;\n\n    /**\n     * @param {number} index A 0-based index\n     * @return {GridCell}\n     */\n    self.getCellByIndex = index => self.gridCells[index];\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getSelectedCells = () => self.selectedCells;\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addSelectedCell = cell => self.selectedCells.push(cell);\n\n    /**\n     * Deselect all the selected cells\n     * @return {void}\n     */\n    self.deselectAllCells = () => {\n        self.selectedCells.forEach(cell => cell.setIsSelected(false));\n        self.selectedCells = [];\n    };\n\n    /**\n     * @param {GridCell|null} cell\n     * @return {null}\n     */\n    self.setLastNavigatedCell = cell => {\n        // The default last navigated cell is the center one\n        if (cell === null) {\n            self.lastNavigatedCell = self.getCellByIndex(40);\n        } else {\n            self.lastNavigatedCell = cell;\n        }\n    };\n\n    /**\n     * Check for errors in the grid\n     * @return {void}\n     */\n    self.checkForErrors = () => {\n        self.gridRows.forEach(row => row.checkDuplicateCellValues());\n        self.gridColumns.forEach(column => column.checkDuplicateCellValues());\n        self.gridBoxes.forEach(box => box.checkDuplicateCellValues());\n    };\n\n    /**\n     * Remove the error status of all cells\n     * @return {void}\n     */\n    self.removeAllErrors = () => {\n        self.gridCells.forEach(cell => cell.setErrorStatus(false));\n    };\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () =>\n        // Application version\n        'a1'\n        // Elapsed milliseconds\n        + 't' + Sudoku.timer.getTotalElapsedMs()\n        // Cells state\n        + self.gridCells.map(cell => cell.getState()).join('');\n}\n","export default function Timer() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     */\n    self.initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     */\n    self.startMoment = null;\n\n    /**\n     * The element that shows the elapsed time\n     * @type {HTMLElement}\n     */\n    self.timeElement = document.getElementById('elapsed-time');\n\n    /**\n     * The interval for showing the time on screen\n     * @type {number|null}\n     */\n    self.timeInterval = null;\n\n    /**\n     * Set the start/unpause moment for calculating elapsed time\n     * @return {Date}\n     */\n    self.start = self.unpause = () => self.startMoment = new Date();\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        self.initialMs += self.getElapsedMsSinceStart();\n        self.startMoment = null;\n    };\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (self.startMoment !== null)\n            ? (new Date()).getTime() - self.startMoment.getTime()\n            : 0;\n    };\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => self.initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n\n    /**\n     * Decide whether to show the elapsed time on screen\n     * @param {boolean} show\n     * @return {void}\n     */\n    self.showTime = (show = true) => {\n        if (show) {\n            self.timeInterval = setInterval(() => {\n                self.timeElement.innerText = self.getElapsedTimeString();\n            }, 1000);\n        } else {\n            clearInterval(self.timeInterval);\n        }\n    };\n}\n","export default function DocumentEventHandler() {\n    const self = this;\n\n    /**\n     * Register event handlers for the document\n     * @return {void}\n     */\n    self.register = () => {\n        registerKeyboardNavigation();\n        registerErrorEvent();\n    };\n\n    /**\n     * Register keyboard navigation events\n     * @return {void}\n     */\n    const registerKeyboardNavigation = () => {\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.isArrowKey(event.code)) {\n                // Deselect all cells, if the ctrl key is not pressed\n                if (! Sudoku.controls.ctrlKeyPressed) {\n                    Sudoku.grid.deselectAllCells();\n                }\n\n                let newCellIndex = Sudoku.grid.lastNavigatedCell.cellNumber - 1;\n                let newCell = null;\n\n                // Then navigate to the intended cell\n                // Wrap around if needed\n                if (Sudoku.controls.isArrowKey(event.code, 'up')) {\n                    if ((newCellIndex -= 9) < 0) {\n                        newCellIndex = 81 + newCellIndex;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'down')) {\n                    if ((newCellIndex += 9) > 80) {\n                        newCellIndex = newCellIndex - 81;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'left')) {\n                    if ((--newCellIndex + 1) % 9 === 0) {\n                        newCellIndex += 9;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event.code, 'right')) {\n                    if (++newCellIndex % 9 === 0) {\n                        newCellIndex -= 9;\n                    }\n                }\n\n                // Make the new cell the active one\n                newCell = Sudoku.grid.getCellByIndex(newCellIndex);\n                newCell.setIsSelected(true);\n                Sudoku.grid.setLastNavigatedCell(newCell);\n            }\n        });\n    };\n\n    /**\n     * Register error events\n     * @return {void}\n     */\n    const registerErrorEvent = () => {\n        document.addEventListener('keydown', event => {\n            // Remove all errors status when the cell changes\n            Sudoku.grid.removeAllErrors();\n\n            Sudoku.grid.getSelectedCells().forEach(cell => {\n                // Change the cell value\n                if (Sudoku.controls.isNumberKey(event.code)) {\n                    // Set a number value\n                    cell.setDigit(parseInt(event.key, 10));\n                } else if (Sudoku.controls.isDeleteKey(event.code)) {\n                    // Remove the value\n                    cell.setDigit(null);\n                }\n            });\n\n            // See if there are any errors\n            Sudoku.grid.checkForErrors();\n        });\n    };\n}\n"],"sourceRoot":""}