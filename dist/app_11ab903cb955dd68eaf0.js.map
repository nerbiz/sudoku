{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/EntryMode.js","webpack:///./assets/js/app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","rowNumber","this","cell","gridCells","push","numbers","columnNumber","number","j","boxNumber","boxIndex","topLeftNumber","Math","floor","cellNumber","element","document","getElementById","Error","Sudoku","controls","registerCell","_selected","selected","classList","add","grid","addSelectedCell","remove","row","gridRow","column","gridColumn","box","gridBox","registerEventHandlers","addEventListener","mouseDown","prefilled","colorNumber","cornerMarks","join","centerMarks","gridRows","GridRow","gridColumns","GridColumn","gridBoxes","GridBox","gridCell","GridCell","init","getCellNumbers","indexOf","addCell","setRow","setColumn","setBox","selectedCells","map","getState","up","down","left","right","MODE_VALUE","window","entryMode","EntryMode","Controls","Grid","collectCells"],"mappings":"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","file":"app_11ab903cb955dd68eaf0.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import GridCell from './GridCell';\n\nexport default class {\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     */\n    rowNumber;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    gridCells = [];\n\n    /**\n     * @param {number} rowNumber\n     */\n    constructor(rowNumber) {\n        this.rowNumber = rowNumber;\n    }\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    addCell(cell) {\n        this.gridCells.push(cell);\n    }\n\n    /**\n     * Get the cell numbers that this row has\n     * @return {Array}\n     */\n    getCellNumbers() {\n        const numbers = [];\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + ((this.rowNumber - 1) * 9));\n        }\n\n        return numbers;\n    }\n}\n","import GridCell from './GridCell';\n\nexport default class {\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     */\n    columnNumber;\n\n    /**\n     * Cells in the column\n     * @type {GridCell[]}\n     */\n    gridCells = [];\n\n    /**\n     * @param {number} columnNumber\n     */\n    constructor(columnNumber) {\n        this.columnNumber = columnNumber;\n    }\n\n    /**\n     * Add a cell to the column\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    addCell(cell) {\n        this.gridCells.push(cell);\n    }\n\n    /**\n     * Get the cell numbers that this column has\n     * @return {Array}\n     */\n    getCellNumbers() {\n        const numbers = [];\n        let number = this.columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 9 to the number 8 times\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    }\n}\n","import GridCell from './GridCell';\n\nexport default class {\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     */\n    boxNumber;\n\n    /**\n     * Cells in the box\n     * @type {GridCell[]}\n     */\n    gridCells = [];\n\n    /**\n     * @param {number} boxNumber\n     */\n    constructor(boxNumber) {\n        this.boxNumber = boxNumber;\n    }\n\n    /**\n     * Add a cell to the box\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    addCell(cell) {\n        this.gridCells.push(cell);\n    }\n\n    /**\n     * Get the cell numbers that this box has\n     * @return {Array}\n     */\n    getCellNumbers() {\n        const boxIndex = this.boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    }\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\n\nexport default class {\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     */\n    gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     */\n    gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     */\n    gridBox = null;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     */\n    cellNumber;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLElement}\n     */\n    element;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     */\n    prefilled = false;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     */\n    value = null;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     */\n    colorNumber = 1;\n\n    /**\n     * The pencil mark values (corner mode)\n     * @type {number[]}\n     */\n    cornerMarks = [];\n\n    /**\n     * The pencil mark values (center mode)\n     * @type {number[]}\n     */\n    centerMarks = [];\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    _selected = false;\n\n    /**\n     * Getter for '_selected'\n     * @return {boolean}\n     */\n    get selected() {\n        return this._selected;\n    }\n\n    /**\n     * Setter for '_selected'\n     * @param {boolean} selected\n     * @return {void}\n     */\n    set selected(selected) {\n        if (selected) {\n            this.element.classList.add('selected');\n\n            // Don't add duplicates to the list of selected cells\n            if (! this.selected) {\n                Sudoku.grid.addSelectedCell(this);\n            }\n        }\n\n        else {\n            this.element.classList.remove('selected');\n        }\n\n        this._selected = selected;\n    }\n\n    /**\n     * @param {number} cellNumber\n     */\n    constructor(cellNumber) {\n        this.cellNumber = cellNumber;\n\n        // The HTML cell element\n        this.element = document.getElementById(`grid-cell-${cellNumber}`);\n        if (this.element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${cellNumber}' not found`);\n        }\n\n        // Register this cell to the controls object\n        Sudoku.controls.registerCell(this);\n    }\n\n    /**\n     * @param {GridRow} row\n     * @return {void}\n     */\n    setRow(row) {\n        this.gridRow = row;\n    }\n\n    /**\n     * @param {GridColumn} column\n     * @return {void}\n     */\n    setColumn(column) {\n        this.gridColumn = column;\n    }\n\n    /**\n     * @param {GridBox} box\n     * @return {void}\n     */\n    setBox(box) {\n        this.gridBox = box;\n    }\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    init() {\n        this.registerEventHandlers();\n    }\n\n    /**\n     * Handle events that happen on/for the cell\n     * @return {void}\n     */\n    registerEventHandlers() {\n        this.element.addEventListener('mousedown', () => {\n            this.selected = true;\n        });\n\n        this.element.addEventListener('mouseenter', () => {\n            if (Sudoku.controls.mouseDown) {\n                this.selected = true;\n            }\n        });\n    }\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    getState() {\n        return 'n' + this.cellNumber\n            + (this.prefilled ? 'p' : '')\n            + 'v' + this.value\n            + 'c' + this.colorNumber\n            + 'cr' + this.cornerMarks.join('')\n            + 'cn' + this.centerMarks.join('');\n    }\n}\n","import GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\n\nexport default class {\n    /**\n     * All the cells in the grid\n     * @type {GridCell[]}\n     */\n    gridCells = [];\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     */\n    gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     */\n    gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     */\n    gridBoxes = [];\n\n    /**\n     * A list of currently selected (highlighted) cells\n     * @type {GridCell[]}\n     */\n    selectedCells = [];\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     */\n    collectCells() {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            this.gridRows.push(new GridRow(i));\n            this.gridColumns.push(new GridColumn(i));\n            this.gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n\n            // Add the cell\n            this.gridCells.push(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (this.gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    this.gridRows[j].addCell(gridCell);\n                    gridCell.setRow(this.gridRows[j]);\n                }\n\n                if (this.gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    this.gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(this.gridColumns[j]);\n                }\n\n                if (this.gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    this.gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(this.gridBoxes[j]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    addSelectedCell(cell) {\n        this.selectedCells.push(cell);\n    }\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    getState() {\n        return 'ver1' + this.gridCells.map(cell => cell.getState()).join('');\n    }\n}\n","import GridCell from './Grid/GridCell';\n\nexport default class {\n    /**\n     * The collection of grid cells\n     * @type {GridCell[]}\n     */\n    gridCells = [];\n\n    /**\n     * Indicates whether a mouse button is currently held down\n     * @type {boolean}\n     */\n    mouseDown = false;\n\n    /**\n     * Ctrl/Cmd key codes for Windows/Linux/macOS\n     * @type {string[]}\n     */\n    ctrlKeys = ['Control', 'Meta'];\n\n    /**\n     * Shift key code\n     * @type {string}\n     */\n    shiftKey = 'Shift';\n\n    /**\n     * Arrow key codes\n     * @type {Object}\n     */\n    arrowKeys = {\n        up: 'ArrowUp',\n        down: 'ArrowDown',\n        left: 'ArrowLeft',\n        right: 'ArrowRight',\n    };\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    init() {\n        document.addEventListener('mousedown', () => {\n            this.mouseDown = true;\n        });\n\n        document.addEventListener('mouseup', () => {\n            this.mouseDown = false;\n        });\n    }\n\n    /**\n     * Add a grid cell to the collection\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    registerCell(cell) {\n        this.gridCells.push(cell);\n    }\n}\n","export default class {\n    /**\n     * Normal value entry\n     * @type {string}\n     */\n    MODE_VALUE = 'value';\n\n    /**\n     * Corner pencil mark entry\n     * @type {string}\n     */\n    MODE_CORNER = 'corner';\n\n    /**\n     * Center pencil mark entry\n     * @type {string}\n     */\n    MODE_CENTER = 'center';\n\n    /**\n     * The current mode\n     * @type {string}\n     */\n    mode = this.MODE_VALUE;\n\n    /**\n     * Change the mode\n     * @param {string} mode\n     * @return {void}\n     */\n    setMode(mode) {\n        this.mode = mode;\n    }\n}\n","import Grid from './Grid/Grid';\nimport Controls from './Controls';\nimport EntryMode from \"./EntryMode\";\n\n// 'Namespace' of the project\nwindow.Sudoku = {};\n\nSudoku.entryMode = new EntryMode();\n\nSudoku.controls = new Controls();\nSudoku.controls.init();\n\nSudoku.grid = new Grid();\nSudoku.grid.collectCells();\n\n/*\nconst LZString = require('lz-string');\nconst state = JSON.stringify(Sudoku.grid.getState());\n// Pairs of 2-digits (cell number) and value (1 number)\n// const state = '038149156382416811295104457093378472567629123781806';\n// 81 numbers, representing every cell value (0 = empty)\n// const state = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nconst c1 = LZString.compress(state);\nconst c2 = LZString.compressToEncodedURIComponent(state);\n\nconsole.log(\n    state.length,\n    state,\n    c1.length,\n    c1,\n    c2.length,\n    c2\n);\n//*/\n"],"sourceRoot":""}