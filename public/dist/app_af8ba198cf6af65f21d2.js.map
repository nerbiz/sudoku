{"version":3,"sources":["webpack://sudoku/./assets/js/Utilities/Visitor.js","webpack://sudoku/./assets/js/InputMode.js","webpack://sudoku/./assets/js/functions.js","webpack://sudoku/./assets/js/Traits/HasGridCells.js","webpack://sudoku/./assets/js/Grid/GridRow.js","webpack://sudoku/./assets/js/Grid/GridColumn.js","webpack://sudoku/./assets/js/Grid/GridBox.js","webpack://sudoku/./assets/js/EventHandlers/GridCellEventHandler.js","webpack://sudoku/./assets/js/Grid/PencilMarks/PencilMarksInterface.js","webpack://sudoku/./assets/js/Grid/PencilMarks/CornerMarks.js","webpack://sudoku/./assets/js/Grid/PencilMarks/CenterMarks.js","webpack://sudoku/./assets/js/Grid/GridCell.js","webpack://sudoku/./assets/js/Commands/CommandInterface.js","webpack://sudoku/./assets/js/Commands/UndoableCommandInterface.js","webpack://sudoku/./assets/js/Commands/Grid/ChangeDigitCommand.js","webpack://sudoku/./assets/js/Commands/TogglableCommandInterface.js","webpack://sudoku/./assets/js/Commands/Modal/OpenModalCommand.js","webpack://sudoku/./assets/js/Commands/PauseGameCommand.js","webpack://sudoku/./assets/js/Commands/Modal/CloseAllModalsCommand.js","webpack://sudoku/./assets/js/Commands/Settings/ShowClockCommand.js","webpack://sudoku/./assets/js/Commands/Settings/AutoErrorCheckingCommand.js","webpack://sudoku/./assets/js/Commands/Settings/AutoRemovePencilMarksCommand.js","webpack://sudoku/./assets/js/Commands/Settings/HighlightMultipleSelectionCommand.js","webpack://sudoku/./assets/js/Commands/Settings/HighlightRowCommand.js","webpack://sudoku/./assets/js/Commands/Settings/HighlightColumnCommand.js","webpack://sudoku/./assets/js/Commands/Settings/HighlightBoxCommand.js","webpack://sudoku/./assets/js/Commands/Settings/HighlightValueCommand.js","webpack://sudoku/./assets/js/Commands/Settings/HighlightPencilMarksCommand.js","webpack://sudoku/./assets/js/Commands/AutoCandidateModeCommand.js","webpack://sudoku/./assets/js/Commands/DesignModeCommand.js","webpack://sudoku/./assets/js/app.js","webpack://sudoku/./assets/js/Application.js","webpack://sudoku/./assets/js/Game.js","webpack://sudoku/./assets/js/Settings.js","webpack://sudoku/./assets/js/Commands/CommandHistory.js","webpack://sudoku/./assets/js/Meta.js","webpack://sudoku/./assets/js/Controls.js","webpack://sudoku/./assets/js/Grid/GridCellHighlighter.js","webpack://sudoku/./assets/js/Grid/Grid.js","webpack://sudoku/./assets/js/Clock.js","webpack://sudoku/./assets/js/Modal.js","webpack://sudoku/./assets/js/EventHandlers/DocumentEventHandler.js","webpack://sudoku/./assets/js/EventHandlers/SettingsEventHandler.js","webpack://sudoku/./assets/js/EventHandlers/ActionsEventHandler.js"],"names":["Visitor","InputMode","self","this","_mode","MODE_VALUE","_radioButtons","document","getElementsByName","_inputModeValueLabel","getElementById","_inputModeCornerLabel","_inputModeCenterLabel","init","_selectCurrentRadioButton","_registerEventListeners","forEach","radioButton","parseInt","value","getMode","checked","addEventListener","setMode","event","code","changeMode","MODE_CORNER","Sudoku","settings","autoCandidateModeState","MODE_CENTER","mode","designModeState","toLowerCase","Error","_disableInput","label","disable","classList","add","getElementsByTagName","disabled","remove","triggerAutoCandidateModeActions","state","triggerDesignModeActions","extend","constructor","baseConstructor","prototype","trait","instance","traitConstructor","thing","traitInstance","HasGridCells","gridCells","addCell","cell","push","getCells","getCell","number","find","getCellNumber","undefined","getCellValues","map","getValue","filter","checkDuplicateCellValues","cellValues","cellValue","cells","length","setErrorState","containsValue","i","hasValue","GridRow","rowNumber","_rowNumber","getCellNumbers","numbers","rowIndex","GridColumn","columnNumber","_columnNumber","j","GridBox","boxNumber","_boxNumber","boxIndex","topLeftNumber","Math","floor","GridCellEventHandler","gridCell","_gridCell","register","_registerMouseDownEvent","_registerMouseEnterEvent","_registerMouseUpEvent","getElement","controls","ctrlKeyIsPressed","setSelectedState","isSelected","grid","deselectAllCells","mouseIsPressed","setLastNavigatedCell","PencilMarksInterface","digits","get","toggleDigit","digit","setDigits","has","indexOf","hasAny","show","CornerMarks","isPrefilled","cornerMarks","existingIndex","splice","GridCell","MAX_CORNER_MARKS","allElements","getElementsByClassName","innerText","sort","a","b","item","index","toString","CenterMarks","_autoCandidates","getAutoCandidates","centerMarks","MAX_CENTER_MARKS","useAutoCandidates","join","cellNumber","_cellNumber","_element","_cornerMarks","_centerMarks","_gridRow","_gridColumn","_gridBox","_isPrefilled","_value","_isSelected","_isHighlighted","toggleMethod","getColorNumber","setDigit","getCornerMarks","getCenterMarks","toggleValue","autoErrorCheckingState","inputMode","_toggleMarksVisibility","gridCellHighlighter","highlightRelatedCells","autoRemovePencilMarksState","_removeRelatedPencilMarks","determineCandidates","removePencilMark","type","pencilMarksObject","pencilMarks","digitIndex","getRow","concat","getColumn","getBox","selected","addSelectedCell","isHighlighted","setHighlightedState","highlighted","addHighlightedCell","setRow","row","setColumn","column","setBox","box","on","getState","CommandInterface","execute","UndoableCommandInterface","undo","ChangeDigitCommand","_digit","_cells","getSelectedCells","_inputMode","_cellsState","checkForErrors","TogglableCommandInterface","toggle","currentState","OpenModalCommand","modalId","_modalId","_modalElement","modal","setCurrentModalId","PauseGameCommand","game","isPaused","_bodyElement","pauseIcon","resumeIcon","clock","pause","openState","unpause","setPausedState","CloseAllModalsCommand","_pauseGameCommand","modals","ShowClockCommand","clockState","_clockElement","_toggleCheckbox","AutoErrorCheckingCommand","_errorCheckingButton","removeAllErrors","AutoRemovePencilMarksCommand","HighlightMultipleSelectionCommand","highlightMultipleSelectionState","HighlightRowCommand","highlightRowState","HighlightColumnCommand","highlightColumnState","HighlightBoxCommand","highlightBoxState","HighlightValueCommand","highlightValueState","HighlightPencilMarksCommand","highlightPencilMarksState","AutoCandidateModeCommand","removeCandidates","DesignModeCommand","usesMacOs","navigator","userAgent","match","window","application","applyPuzzleProperties","properties","_isPaused","_clockState","_autoErrorCheckingState","_highlightMultipleSelectionState","_highlightRowState","_highlightColumnState","_highlightBoxState","_highlightValueState","_highlightPencilMarksState","_autoRemovePencilMarksState","_autoCandidateModeState","_designModeState","localStorage","getItem","setItem","JSON","stringify","_fromLocalStorage","_applySettings","parse","autoErrorChecking","autoRemovePencilMarks","highlightMultipleSelection","highlightRow","highlightColumn","highlightBox","highlightValue","highlightPencilMarks","_toLocalStorage","history","_past","_future","command","clearFuture","pop","redo","meta","appName","getAttribute","titleElements","titleField","notesField","title","_enableTextFields","titleCallback","pageTitle","trim","notesCallback","_mousePressed","_ctrlKeyPressed","_shiftKeyPressed","_arrowKeys","up","down","left","right","_arrowKeysConcatenated","_deleteKeys","_keyUpDownCallback","_keyDownCallback","_registerClickDisabling","target","closest","preventDefault","cancelKeyboardEvent","nodeName","metaKey","ctrlKey","shiftKey","shiftKeyIsPressed","isNumberKey","isNaN","key","isDeleteKey","isArrowKey","direction","_highlightedCells","getHighlightedCells","dehighlightAllCells","cellNumbers","sameDigitCellNumbers","_gridRows","_gridColumns","_gridBoxes","_selectedCells","_lastNavigatedCell","_collectCells","getLastNavigatedCell","getTotalElapsedMs","_initialMs","_startMoment","_timeElement","_timeInterval","_paused","start","Date","enableTimeInterval","getElapsedMsSinceStart","getTime","getElapsedTimeString","totalSeconds","hours","minutes","seconds","padStart","enable","setInterval","clearInterval","_backdropElement","_openState","_currentModalId","_closeCommand","_enableOpening","_enableClosing","getCurrentModalId","close","openButtons","dataset","closeButtons","documentEventHandler","_registerKeyboardEvents","_registerMouseEvents","pauseGameCommand","newCellIndex","newCell","settingsEventHandler","_enableClockToggling","_enableAutoErrorCheckingToggling","_enableAutoRemovePencilMarksToggling","_enableHighlightingToggling","actionsEventHandler","_registerPauseResumeEvent","_registerCheckErrorsEvent","_registerAutoCandidateModeEvent","_registerDesignModeEvent"],"mappings":"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","file":"app_af8ba198cf6af65f21d2.js","sourcesContent":["/**\n * Indicates whether the visitor's OS is macOS\n * @type {boolean}\n * @static\n */\nVisitor.usesMacOs = (navigator.userAgent.toLowerCase().match(/macintosh/) !== null);\n\nexport default function Visitor() {\n    const self = this;\n}\n","/**\n * Several input modes, to be used as constants\n * @type {number}\n * @static\n */\nInputMode.MODE_VALUE = 1;\nInputMode.MODE_CORNER = 2;\nInputMode.MODE_CENTER = 3;\n\nexport default function InputMode() {\n    const self = this;\n\n    /**\n     * The current mode\n     * @type {number}\n     * @private\n     */\n    let _mode = InputMode.MODE_VALUE;\n\n    /**\n     * The radio buttons that can change the mode\n     * @type {NodeListOf<HTMLElement>}\n     * @private\n     */\n    const _radioButtons = document.getElementsByName('input_mode');\n\n    /**\n     * The label containing the checkbox for the 'value' input mode\n     * @type {HTMLLabelElement}\n     * @private\n     */\n    const _inputModeValueLabel = document.getElementById('input-mode-value-label');\n\n    /**\n     * The label containing the checkbox for the 'corner marks' input mode\n     * @type {HTMLLabelElement}\n     * @private\n     */\n    const _inputModeCornerLabel = document.getElementById('input-mode-corner-label');\n\n    /**\n     * The label containing the checkbox for the 'center marks' input mode\n     * @type {HTMLLabelElement}\n     * @private\n     */\n    const _inputModeCenterLabel = document.getElementById('input-mode-center-label');\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        _selectCurrentRadioButton();\n        _registerEventListeners();\n    };\n\n    /**\n     * Make the radio button of the current input mode checked\n     * @return {void}\n     * @private\n     */\n    const _selectCurrentRadioButton = () => {\n        _radioButtons.forEach(radioButton => {\n            if (parseInt(radioButton.value, 10) === self.getMode()) {\n                radioButton.checked = true;\n            }\n        });\n    };\n\n    /**\n     * Enable toggling the mode with radio buttons\n     * @return {void}\n     * @private\n     */\n    const _registerEventListeners = () => {\n        _radioButtons.forEach(radioButton => {\n            radioButton.addEventListener('change', () => {\n                self.setMode(parseInt(radioButton.value, 10));\n            });\n        });\n\n        document.addEventListener('keydown', event => {\n            switch (event.code) {\n                case 'Space':\n                    self.changeMode();\n                    break;\n                case 'KeyI':\n                    self.setMode(InputMode.MODE_VALUE);\n                    break;\n                case 'KeyO':\n                    self.setMode(InputMode.MODE_CORNER);\n                    break;\n                case 'KeyP':\n                    if (! Sudoku.settings.autoCandidateModeState()) {\n                        self.setMode(InputMode.MODE_CENTER);\n                    }\n                    break;\n            }\n        });\n    };\n\n    /**\n     * @param {number} mode\n     * @return {void}\n     */\n    self.setMode = mode => {\n        // Restrict to value mode, when design mode is on\n        if (Sudoku.settings.designModeState() === true) {\n            _mode = InputMode.MODE_VALUE;\n            _selectCurrentRadioButton();\n            return;\n        }\n\n        if ((typeof mode).toLowerCase() !== 'number') {\n            throw new Error(`Expected a number, got ${typeof mode}`);\n        }\n\n        const maxModeNumber = (Sudoku.settings.autoCandidateModeState() === true)\n            // Center-marks are disabled in auto-candidate mode\n            ? InputMode.MODE_CORNER\n            : InputMode.MODE_CENTER;\n\n        // Wrap around, when max number is reached\n        if (mode > maxModeNumber) {\n            mode = InputMode.MODE_VALUE;\n        }\n\n        _mode = mode;\n        _selectCurrentRadioButton();\n    };\n\n    /**\n     * Change the mode number incrementally\n     * @return {void}\n     */\n    self.changeMode = () => {\n        // Increase the mode number\n        self.setMode(_mode + 1);\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getMode = () => _mode;\n\n    /**\n     *\n     * @param {HTMLLabelElement} label\n     * @param {boolean} disable\n     * @private\n     */\n    const _disableInput = (label, disable = true) => {\n        if (disable === true) {\n            // Disable the input mode checkbox\n            label.classList.add('strike-through');\n            label.getElementsByTagName('input')[0].disabled = true;\n        } else {\n            // Enable the input mode checkbox\n            label.classList.remove('strike-through');\n            label.getElementsByTagName('input')[0].disabled = false;\n        }\n    };\n\n    /**\n     * Perform actions based on whether auto-candidate mode is on\n     * @param {boolean} state\n     * @return {void}\n     */\n    self.triggerAutoCandidateModeActions = state => {\n        if (state === true) {\n            _disableInput(_inputModeCenterLabel, true);\n\n            // Trigger any restrictions on the current input mode\n            self.setMode(self.getMode());\n        } else {\n            _disableInput(_inputModeCenterLabel, false);\n        }\n    };\n\n    /**\n     * Perform actions based on whether design mode is on\n     * @param {boolean} state\n     * @return {void}\n     */\n    self.triggerDesignModeActions = state => {\n        if (state === true) {\n            _disableInput(_inputModeValueLabel, true);\n            _disableInput(_inputModeCornerLabel, true);\n            _disableInput(_inputModeCenterLabel, true);\n\n            // Trigger any restrictions on the current input mode\n            self.setMode(self.getMode());\n        } else {\n            _disableInput(_inputModeValueLabel, false);\n            _disableInput(_inputModeCornerLabel, false);\n            _disableInput(_inputModeCenterLabel, false);\n        }\n    };\n}\n","/**\n * Extend a base constructor\n * @param {function} constructor\n * @param {function} baseConstructor\n * @return {void}\n */\nexport function extend(constructor, baseConstructor) {\n    // Check the constructor types\n    if ((typeof constructor).toLowerCase() !== 'function') {\n        throw new Error(`Constructor needs to be a function, got ${typeof constructor} instead`);\n    }\n\n    if ((typeof baseConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Base constructor needs to be a function, got ${typeof baseConstructor} instead`);\n    }\n\n    constructor.prototype = new baseConstructor();\n    constructor.prototype.constructor = constructor;\n};\n\n/**\n * Add code from a trait to an object\n * @param {object} instance\n * @param {function} traitConstructor\n * @return {void}\n */\nexport function trait(instance, traitConstructor) {\n    // Check the instance type\n    if ((typeof instance).toLowerCase() !== 'object') {\n        throw new Error(`Instance needs to be an object, got ${typeof instance} instead`);\n    }\n\n    // Check the constructor type\n    if ((typeof traitConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Trait constructor needs to be a function, got ${typeof traitConstructor} instead`);\n    }\n\n    // Create a new instance of the trait\n    const traitInstance = new traitConstructor();\n    // A property or method of the trait\n    let thing;\n\n    // Set the properties/methods in the calling object\n    for (thing in traitInstance) {\n        instance[thing] = traitInstance[thing];\n    }\n};\n","import GridCell from '../Grid/GridCell';\n\nexport default function HasGridCells() {\n    const self = this;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getCells = () => self.gridCells;\n\n    /**\n     * Get a cell by its cell number\n     * @param {number} number A 1-based cell number\n     * @return {GridCell|null}\n     */\n    self.getCell = number => {\n        const cell = self.gridCells.find(cell => cell.getCellNumber() === number);\n        return (cell === undefined) ? null : cell;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.checkDuplicateCellValues = () => {\n        // Pairs of value:gridCell[]\n        // Arrays of cells that have a certain value\n        const cellValues = {};\n\n        self.gridCells.forEach(cell => {\n            // Get the filled in value of the cell\n            const cellValue = cell.getValue();\n\n            // A value is needed for checking\n            if (cellValue === null) {\n                return;\n            }\n\n            // Get the cells that have that value and add the cell\n            const cells = cellValues[cellValue] || [];\n            cells.push(cell);\n            cellValues[cellValue] = cells;\n\n            // Set an error status on all duplicate cells, if there are any\n            if (cells.length > 1) {\n                cells.forEach(cell => cell.setErrorState(true));\n            }\n        });\n    };\n\n    /**\n     * See if any of the cells contain a value\n     * @param {Number} value\n     * @return {boolean}\n     */\n    self.containsValue = value => {\n        value = parseInt(value, 10);\n        const cells = self.getCells();\n\n        for (let i = 0; i < cells.length; i++) {\n            if (cells[i].hasValue(value)) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _rowNumber = rowNumber;\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        const rowIndex = _rowNumber - 1;\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + (rowIndex * 9));\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _columnNumber = columnNumber;\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = _columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 8 numbers, each incremented by 9\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     * @private\n     */\n    let _boxNumber = boxNumber;\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = _boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n}\n","import GridCell from '../Grid/GridCell';\n\n/**\n * @param {GridCell} gridCell\n * @constructor\n */\nexport default function GridCellEventHandler(gridCell) {\n    const self = this;\n\n    /**\n     * The cell to register event handlers for\n     * @type {GridCell}\n     * @private\n     */\n    const _gridCell = gridCell;\n\n    /**\n     * Register event handlers for a grid cell\n     * @return {void}\n     */\n    self.register = () => {\n        _registerMouseDownEvent();\n        _registerMouseEnterEvent();\n        _registerMouseUpEvent();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseDownEvent = () => {\n        _gridCell.getElement().addEventListener('mousedown', () => {\n            if (Sudoku.controls.ctrlKeyIsPressed()) {\n                // Toggle the selected status when clicked, if the ctrl key is pressed\n                _gridCell.setSelectedState(! _gridCell.isSelected());\n            } else {\n                // Select only this cell, if the ctrl key is not pressed\n                Sudoku.grid.deselectAllCells();\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseEnterEvent = () => {\n        _gridCell.getElement().addEventListener('mouseenter', () => {\n            // Allow multiple cells to be selected\n            if (Sudoku.controls.mouseIsPressed()) {\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseUpEvent = () => {\n        // On mouse up, this is the last selected cell\n        _gridCell.getElement().addEventListener(\n            'mouseup',\n            () => Sudoku.grid.setLastNavigatedCell(_gridCell)\n        );\n    };\n}\n","import GridCell from '../GridCell';\n\n/**\n * @param {GridCell} cell\n * @constructor\n */\nexport default function PencilMarksInterface(cell) {\n    const self = this;\n\n    /**\n     * The cell to apply pencil marks to\n     * @type {GridCell}\n     */\n    self.cell = cell;\n\n    /**\n     * The pencil mark digits\n     * @type {number[]}\n     */\n    self.digits = [];\n\n    /**\n     * @return {number[]}\n     */\n    self.get = () => self.digits;\n\n    /**\n     * Add or remove one 1 digit\n     * @param {number} digit\n     * @return {void}\n     */\n    self.toggleDigit = digit => {\n        throw new Error(\"'toggleDigit' method is not implemented in the pencil marks object\");\n    };\n\n    /**\n     * Replace all digits\n     * @param {number[]} digits\n     * @return {void}\n     */\n    self.setDigits = digits => {\n        throw new Error(\"'setDigits' method is not implemented in the pencil marks object\");\n    };\n\n    /**\n     * See if a pencil mark exists\n     * @param {number} digit\n     * @return {boolean}\n     */\n    self.has = digit => (self.get().indexOf(digit) > -1);\n\n    /**\n     * See if any pencil marks exist\n     * @return {boolean}\n     */\n    self.hasAny = () => (self.get().length > 0);\n\n    /**\n     * Show the pencil marks in the cell\n     * @return {void}\n     */\n    self.show = () => {\n        throw new Error(\"'show' method is not implemented in the pencil marks object\");\n    };\n}\n","import {extend} from '../../functions';\nimport PencilMarksInterface from './PencilMarksInterface';\nimport GridCell from '../GridCell';\n\nextend(CornerMarks, PencilMarksInterface);\n\n/**\n * @inheritDoc\n */\nexport default function CornerMarks(cell) {\n    const self = this;\n    PencilMarksInterface.call(self, cell);\n\n    /**\n     * @inheritDoc\n     */\n    self.toggleDigit = digit => {\n        // Setting corner marks is disabled when the cell is prefilled\n        if (self.cell.isPrefilled() === true) {\n            return;\n        }\n\n        // Don't set a corner mark, if a value is filled in\n        if (self.cell.getValue() !== null) {\n            return;\n        }\n\n        // Remove if the digit exists, otherwise add it\n        const cornerMarks = self.get();\n        const existingIndex = cornerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            cornerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && cornerMarks.length < GridCell.MAX_CORNER_MARKS) {\n                cornerMarks.push(digit);\n            }\n        }\n\n        self.setDigits(cornerMarks);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    self.setDigits = digits => {\n        // Don't set corner marks, if there are too many\n        if (digits.length > GridCell.MAX_CORNER_MARKS) {\n            return;\n        }\n\n        self.digits = digits;\n        self.show();\n    };\n\n    /**\n     * @inheritDoc\n     */\n    self.show = () => {\n        // Clear all corner marks first\n        const allElements = self.cell.getElement().getElementsByClassName('corner-mark');\n        for (let i = 0; i < allElements.length; i++) {\n            allElements[i].innerText = null;\n        }\n\n        // Show the corner marks\n        self.get()\n            // Sort ascending\n            .sort((a, b) => a - b)\n            .forEach((item, index) => {\n                document.getElementById(`corner-mark-${self.cell.getCellNumber()}-${index + 1}`)\n                    .innerText = item.toString(10);\n            });\n    };\n}\n","import {extend} from '../../functions';\nimport PencilMarksInterface from './PencilMarksInterface';\nimport GridCell from '../GridCell';\n\nextend(CenterMarks, PencilMarksInterface);\n\n/**\n * @inheritDoc\n */\nexport default function CenterMarks(cell) {\n    const self = this;\n    PencilMarksInterface.call(self, cell);\n\n    /**\n     * Automatically filled in candidates\n     * @type {number[]}\n     * @private\n     */\n    let _autoCandidates = [];\n\n    /**\n     * @return {number[]}\n     */\n    self.getAutoCandidates = () => _autoCandidates;\n\n    /**\n     * @inheritDoc\n     */\n    self.toggleDigit = digit => {\n        // Setting center marks is disabled when the cell is prefilled,\n        // or when auto-candidate mode is on\n        if (\n            self.cell.isPrefilled() === true\n            || Sudoku.settings.autoCandidateModeState() === true\n        ) {\n            return;\n        }\n\n        // Don't set a center mark, if a value is filled in\n        if (self.cell.getValue() !== null) {\n            return;\n        }\n\n        // Remove if the digit exists, otherwise add it\n        const centerMarks = self.get();\n        const existingIndex = centerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            centerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && centerMarks.length < GridCell.MAX_CENTER_MARKS) {\n                centerMarks.push(digit);\n            }\n        }\n\n        self.setDigits(centerMarks);\n    };\n\n    /**\n     * @inheritDoc\n     * @param {boolean} useAutoCandidates Whether to use auto-candidates, or normal center marks\n     */\n    self.setDigits = (digits, useAutoCandidates = false) => {\n        // Empty the candidates, if there are too many\n        if (useAutoCandidates === true && digits.length > GridCell.MAX_CENTER_MARKS) {\n            digits = [];\n        }\n\n        // Don't set pencil marks, if there are too many\n        if (digits.length > GridCell.MAX_CENTER_MARKS) {\n            return;\n        }\n\n        (useAutoCandidates === true)\n            ? _autoCandidates = digits\n            : self.digits = digits;\n\n        self.show(useAutoCandidates);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    self.has = digit => {\n        const centerMarks = (Sudoku.settings.autoCandidateModeState() === true)\n            ? self.getAutoCandidates()\n            : self.get();\n\n        return (centerMarks.indexOf(digit) > -1);\n    };\n\n    /**\n     * @inheritDoc\n     * @param {boolean} useAutoCandidates Whether to use auto-candidates, or normal center marks\n     */\n    self.show = (useAutoCandidates = false) => {\n        let centerMarks = (useAutoCandidates === true)\n            ? self.getAutoCandidates()\n            : self.get();\n\n        centerMarks = centerMarks\n            // Sort ascending\n            .sort((a, b) => a - b)\n            // Concatenate the numbers\n            .join('');\n\n        // Show the pencil marks\n        self.cell.getElement()\n            .getElementsByClassName('center-marks')[0]\n            .innerText = centerMarks;\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport GridCellEventHandler from '../EventHandlers/GridCellEventHandler';\nimport InputMode from '../InputMode';\nimport CornerMarks from './PencilMarks/CornerMarks';\nimport CenterMarks from './PencilMarks/CenterMarks';\n\n/**\n * The maximum amount of pencil marks\n * @type {number}\n * @static\n */\nGridCell.MAX_CORNER_MARKS = 8;\nGridCell.MAX_CENTER_MARKS = 5;\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     * @private\n     */\n    const _cellNumber = cellNumber;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLLIElement|null}\n     * @private\n     */\n    let _element = null;\n\n    /**\n     * The corner marks of the cell\n     * @type {CornerMarks}\n     * @private\n     */\n    const _cornerMarks = new CornerMarks(self);\n\n    /**\n     * The center marks of the cell\n     * @type {CenterMarks}\n     * @private\n     */\n    const _centerMarks = new CenterMarks(self);\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     * @private\n     */\n    let _gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     * @private\n     */\n    let _gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     * @private\n     */\n    let _gridBox = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     * @private\n     */\n    let _isPrefilled = false;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     * @private\n     */\n    let _colorNumber = 1;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    let _value = null;\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    let _isSelected = false;\n\n    /**\n     * Whether the cell is currently highlighted\n     * @type {boolean}\n     * @private\n     */\n    let _isHighlighted = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        // Get the HTML cell element\n        _element = document.getElementById(`grid-cell-${self.getCellNumber()}`);\n        if (_element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.getCellNumber()}' not found`);\n        }\n\n        // Register event handlers\n        const eventHandler = new GridCellEventHandler(self);\n        eventHandler.register();\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getCellNumber = () => _cellNumber;\n\n    /**\n     * @return {HTMLLIElement|null}\n     */\n    self.getElement = () => _element;\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.isPrefilled = (state = null) => {\n        if (state !== null) {\n            _isPrefilled = state;\n\n            // Toggle the CSS class of the prefilled state\n            const toggleMethod = (state === true) ? 'add' : 'remove';\n            self.getElement().classList[toggleMethod]('is-prefilled');\n        }\n\n        return _isPrefilled;\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getColorNumber = () => _colorNumber;\n\n    /**\n     * Wrapper for value, corner-marks and center-marks setting\n     * @param {number|null} digit\n     * @param {number|null} mode The input mode, uses current mode by default\n     * @return {void}\n     * @see InputMode for the mode constants\n     */\n    self.setDigit = (digit, mode = null) => {\n        if (Sudoku.settings.designModeState() === true) {\n            // Remove all pencil marks\n            self.getCornerMarks().setDigits([]);\n            self.getCenterMarks().setDigits([]);\n\n            self.toggleValue(digit);\n            self.isPrefilled(digit !== null);\n            return;\n        }\n\n        // Prefilled cells are not editable\n        if (self.isPrefilled() === true) {\n            return;\n        }\n\n        // Remove error state in manual error checking mode\n        if (! Sudoku.settings.autoErrorCheckingState()) {\n            self.setErrorState(false);\n        }\n\n        // Use the current input mode, if null\n        if (mode === null) {\n            mode = Sudoku.inputMode.getMode();\n        }\n\n        // Null means deleting\n        if (digit === null) {\n            // Remove the marks only if no value is filled in\n            if (self.getValue() === null) {\n                self.getCornerMarks().setDigits([]);\n\n                // Don't remove player filled center marks in auto candidate mode\n                // Because they are unused and invisible\n                if (! Sudoku.settings.autoCandidateModeState()) {\n                    self.getCenterMarks().setDigits([]);\n                }\n            } else {\n                self.toggleValue(null);\n            }\n\n            return;\n        }\n\n        switch (mode) {\n            case InputMode.MODE_VALUE:\n                self.toggleValue(digit);\n                break;\n            case InputMode.MODE_CORNER:\n                self.getCornerMarks().toggleDigit(digit);\n                break;\n            case InputMode.MODE_CENTER:\n                self.getCenterMarks().toggleDigit(digit);\n                break;\n        }\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => _value;\n\n    /**\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.toggleValue = digit => {\n        // Remove the value, if the same digit is entered\n        if (digit === self.getValue()) {\n            digit = null;\n        }\n\n        // Show or hide the pencil marks\n        _toggleMarksVisibility(digit === null);\n\n        // Show the value on screen\n        self.getElement().getElementsByClassName('cell-value')[0].innerText = digit;\n\n        _value = digit;\n\n        // Highlight other cells\n        Sudoku.gridCellHighlighter.highlightRelatedCells();\n\n        // Remove pencil marks of related cells, if needed\n        if (Sudoku.settings.autoRemovePencilMarksState() === true) {\n            _removeRelatedPencilMarks(digit);\n        }\n\n        // Show possible candidates if needed\n        if (Sudoku.settings.autoCandidateModeState() === true) {\n            Sudoku.grid.determineCandidates();\n        }\n    };\n\n    /**\n     * Check if the cell has a value\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasValue = (digit = null) => {\n        // Check if the cell has any value\n        if (digit === null) {\n            return (self.getValue() !== null);\n        }\n\n        // Or check for a specific value\n        return (self.getValue() === digit);\n    };\n\n    /**\n     * Remove a pencil mark\n     * @param type 'corner' or 'center'\n     * @param digit\n     * @return {void}\n     */\n    self.removePencilMark = (type, digit) => {\n        if (['corner', 'center'].indexOf(type) < 0) {\n            throw new Error(`Invalid pencil mark type given, only 'corner' and 'center' are valid, '${type}' given`);\n        }\n\n        const pencilMarksObject = (type === 'corner')\n            ? self.getCornerMarks()\n            : self.getCenterMarks();\n\n        // Only remove the digit, if it exists\n        const pencilMarks = pencilMarksObject.get();\n        const digitIndex = pencilMarks.indexOf(digit);\n        if (digitIndex > -1) {\n            pencilMarks.splice(digitIndex, 1);\n            pencilMarksObject.setDigits(pencilMarks);\n        }\n    };\n\n    /**\n     * Remove pencil marks of related cells, based on cell value\n     * @param {number} digit\n     * @return {void}\n     * @private\n     */\n    const _removeRelatedPencilMarks = digit => {\n        self.getRow().getCells()\n            .concat(self.getColumn().getCells())\n            .concat(self.getBox().getCells())\n            .forEach(cell => {\n                cell.removePencilMark('corner', digit);\n                cell.removePencilMark('center', digit);\n            });\n    };\n\n    /**\n     * Toggle the visibility of the pencil marks\n     * @param {boolean} show\n     * @private\n     */\n    const _toggleMarksVisibility = show => {\n        const toggleMethod = show ? 'remove' : 'add';\n\n        // Toggle the corner marks\n        for (let i = 1; i < 9; i++) {\n            document.getElementById(`corner-mark-${self.getCellNumber()}-${i}`)\n                .classList[toggleMethod]('hide');\n        }\n\n        // Toggle the center marks\n        self.getElement().getElementsByClassName('center-marks')[0]\n            .classList[toggleMethod]('hide');\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isSelected = () => _isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setSelectedState = selected => {\n        const toggleMethod = selected ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-selected');\n\n        // Don't add duplicates to the list\n        if (selected && ! self.isSelected()) {\n            Sudoku.grid.addSelectedCell(self);\n        }\n\n        _isSelected = selected;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isHighlighted = () => _isHighlighted;\n\n    /**\n     * @param {boolean} highlighted\n     * @return {void}\n     */\n    self.setHighlightedState = highlighted => {\n        const toggleMethod = highlighted ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-highlighted');\n\n        // Don't add duplicates to the list\n        if (highlighted && ! self.isHighlighted()) {\n            Sudoku.gridCellHighlighter.addHighlightedCell(self);\n        }\n\n        _isHighlighted = highlighted;\n    };\n\n    /**\n     * @return {CornerMarks}\n     */\n    self.getCornerMarks = () => _cornerMarks;\n\n    /**\n     * @return {CenterMarks}\n     */\n    self.getCenterMarks = () => _centerMarks;\n\n    /**\n     * @return {GridRow|null}\n     */\n    self.getRow = () => _gridRow;\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => _gridRow = row;\n\n    /**\n     * @return {GridColumn|null}\n     */\n    self.getColumn = () => _gridColumn;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => _gridColumn = column;\n\n    /**\n     * @return {GridBox|null}\n     */\n    self.getBox = () => _gridBox;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => _gridBox = box;\n\n    /**\n     * Set the error status of the element\n     * @param {boolean} on\n     * @return {void}\n     */\n    self.setErrorState = on => {\n        const toggleMethod = on ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('has-error');\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.getCellNumber()\n        + (self.isPrefilled() ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.getColorNumber()\n        + 'cr' + self.getCornerMarks().get().join('')\n        + 'cn' + self.getCenterMarks().get().join('');\n}\n","export default function CommandInterface() {\n    const self = this;\n\n    /**\n     * Execute the command\n     * @return {void}\n     */\n    self.execute = () => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../functions';\nimport CommandInterface from './CommandInterface';\n\nextend(UndoableCommandInterface, CommandInterface);\n\nexport default function UndoableCommandInterface() {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * Undo the command\n     * @return {void}\n     */\n    self.undo = () => {\n        throw new Error(\"'undo' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../../functions';\nimport UndoableCommandInterface from '../UndoableCommandInterface';\n\nextend(ChangeDigitCommand, UndoableCommandInterface);\n\n/**\n * @param {number|null} digit\n * @constructor\n */\nexport default function ChangeDigitCommand(digit) {\n    const self = this;\n    UndoableCommandInterface.call(self);\n\n    /**\n     * The digit to apply to cell(s)\n     * @type {number|null}\n     * @private\n     */\n    const _digit = digit;\n\n    /**\n     * The cells to apply the digit to\n     * @type {GridCell[]}\n     * @private\n     */\n    const _cells = Sudoku.grid.getSelectedCells();\n\n    /**\n     * The input mode for the digit\n     * @type {number}\n     * @private\n     */\n    const _inputMode = Sudoku.inputMode.getMode();\n\n    /**\n     * Contains the state of cells, before changing the digit\n     * @type {object}\n     * @private\n     */\n    const _cellsState = (() => {\n        // Pairs of cellNumber:{value, cornerMarks, centerMarks}\n        const state = {};\n\n        // Collect the state of all cells\n        _cells.forEach(cell => {\n            state[cell.getCellNumber()] = {\n                isPrefilled: cell.isPrefilled(),\n                value: cell.getValue(),\n                // Copy the array, because they go by reference\n                cornerMarks: cell.getCornerMarks().get().map(item => item),\n                centerMarks: cell.getCenterMarks().get().map(item => item),\n            };\n        });\n\n        return state;\n    })();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        _cells.forEach(cell => cell.setDigit(_digit, _inputMode));\n\n        if (Sudoku.settings.autoErrorCheckingState()) {\n            Sudoku.grid.checkForErrors();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    self.undo = () => {\n        // Apply the previous values to the cell(s)\n        _cells.forEach(cell => {\n            const state = _cellsState[cell.getCellNumber()];\n\n            cell.isPrefilled(state.isPrefilled);\n            cell.toggleValue(state.value);\n            // Copy the array, because they go by reference\n            cell.getCornerMarks().setDigits(state.cornerMarks.map(item => item));\n            cell.getCenterMarks().setDigits(state.centerMarks.map(item => item));\n        });\n\n        if (Sudoku.settings.autoErrorCheckingState() === true) {\n            Sudoku.grid.checkForErrors();\n        }\n    };\n}\n","import {extend} from '../functions';\nimport CommandInterface from './CommandInterface';\n\nextend(TogglableCommandInterface, CommandInterface);\n\nexport default function TogglableCommandInterface() {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * The current state of the command\n     * @type {boolean|function|null}\n     * @private\n     */\n    self.state = null;\n\n    /**\n     * @inheritDoc\n     * @param {boolean} state\n     */\n    self.execute = state => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n\n    /**\n     * Toggle between states of the command\n     * @return {void}\n     */\n    self.toggle = () => {\n        const currentState = ((typeof self.state).toLowerCase() === 'function')\n            ? self.state()\n            : self.state;\n\n        if (currentState === null) {\n            throw new Error('The command needs an (initial) boolean state, it can be a function that returns a boolean');\n        }\n\n        self.execute(! currentState);\n    };\n}\n","import {extend} from '../../functions';\nimport CommandInterface from '../CommandInterface';\nimport PauseGameCommand from '../PauseGameCommand';\n\nextend(OpenModalCommand, CommandInterface);\n\n/**\n * @param {string} modalId ID of the modal dialog to open\n * @constructor\n */\nexport default function OpenModalCommand(modalId) {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    const _modalId = modalId;\n\n    /**\n     * The modal dialog to show\n     * @type {HTMLElement}\n     * @private\n     */\n    const _modalElement = document.getElementById(_modalId);\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        Sudoku.modal.setCurrentModalId(_modalId);\n        _modalElement.classList.add('show');\n\n        (new PauseGameCommand()).execute(true);\n    };\n}\n","import {extend} from '../functions';\nimport TogglableCommandInterface from './TogglableCommandInterface';\nimport OpenModalCommand from './Modal/OpenModalCommand';\n\nextend(PauseGameCommand, TogglableCommandInterface);\n\nexport default function PauseGameCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.game.isPaused();\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    const _bodyElement = document.getElementById('page-body');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const pauseIcon = document.getElementById('game-pause-icon');\n        const resumeIcon = document.getElementById('game-resume-icon');\n\n        if (state === true) {\n            Sudoku.clock.pause();\n            _bodyElement.classList.add('is-paused');\n\n            // Toggle the pause/resume icons\n            pauseIcon.classList.add('hide');\n            resumeIcon.classList.remove('hide');\n\n            // Only open the pause modal, if there is no modal open yet\n            if (Sudoku.modal.openState() === false) {\n                const openModalCommand = new OpenModalCommand('pause-modal');\n                openModalCommand.execute();\n            }\n        } else {\n            Sudoku.clock.unpause();\n            _bodyElement.classList.remove('is-paused');\n\n            // Toggle the pause/resume icons\n            pauseIcon.classList.remove('hide');\n            resumeIcon.classList.add('hide');\n        }\n\n        Sudoku.game.setPausedState(state);\n    };\n}\n","import {extend} from '../../functions';\nimport CommandInterface from '../CommandInterface';\nimport PauseGameCommand from '../PauseGameCommand';\n\nextend(CloseAllModalsCommand, CommandInterface);\n\n/**\n * @constructor\n */\nexport default function CloseAllModalsCommand() {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * @type {PauseGameCommand}\n     * @private\n     */\n    const _pauseGameCommand = new PauseGameCommand();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        // Close all the modals\n        const modals = document.getElementsByClassName('modal');\n        for (let i = 0; i < modals.length; i++) {\n            modals[i].classList.remove('show');\n        }\n\n        _pauseGameCommand.execute(false);\n        Sudoku.modal.setCurrentModalId(null);\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(ShowClockCommand, TogglableCommandInterface);\n\nexport default function ShowClockCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.clockState();\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    const _clockElement = document.getElementById('clock-wrapper');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-show-clock');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'remove' : 'add';\n        _clockElement.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.clockState(state);\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(AutoErrorCheckingCommand, TogglableCommandInterface);\n\nexport default function AutoErrorCheckingCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoErrorCheckingState();\n\n    /**\n     * The manual error checking button\n     * @type {HTMLElement}\n     * @private\n     */\n    const _errorCheckingButton = document.getElementById('check-errors');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-auto-error-checking');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'add' : 'remove';\n        _errorCheckingButton.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.autoErrorCheckingState(state);\n\n        // Check or remove errors\n        (state === true)\n            ? Sudoku.grid.checkForErrors()\n            : Sudoku.grid.removeAllErrors();\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(AutoRemovePencilMarksCommand, TogglableCommandInterface);\n\nexport default function AutoRemovePencilMarksCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoRemovePencilMarksState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-auto-remove-pencil-marks');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.autoRemovePencilMarksState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightMultipleSelectionCommand, TogglableCommandInterface);\n\nexport default function HighlightMultipleSelectionCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightMultipleSelectionState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-multiple-selection');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightMultipleSelectionState(state);\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightRowCommand, TogglableCommandInterface);\n\nexport default function HighlightRowCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightRowState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-row');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightRowState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightColumnCommand, TogglableCommandInterface);\n\nexport default function HighlightColumnCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightColumnState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-column');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightColumnState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightBoxCommand, TogglableCommandInterface);\n\nexport default function HighlightBoxCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightBoxState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-box');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightBoxState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightValueCommand, TogglableCommandInterface);\n\nexport default function HighlightValueCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightValueState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-value');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightValueState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightPencilMarksCommand, TogglableCommandInterface);\n\nexport default function HighlightPencilMarksCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightPencilMarksState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-pencil-marks');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightPencilMarksState(state);\n    };\n};\n","import {extend} from '../functions';\nimport TogglableCommandInterface from './TogglableCommandInterface';\n\nextend(AutoCandidateModeCommand, TogglableCommandInterface);\n\nexport default function AutoCandidateModeCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoCandidateModeState();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        Sudoku.settings.autoCandidateModeState(state);\n        Sudoku.inputMode.triggerAutoCandidateModeActions(state);\n\n        (state === true)\n            ? Sudoku.grid.determineCandidates()\n            : Sudoku.grid.removeCandidates();\n    };\n}\n","import {extend} from '../functions';\nimport TogglableCommandInterface from './TogglableCommandInterface';\n\nextend(DesignModeCommand, TogglableCommandInterface);\n\nexport default function DesignModeCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.designModeState();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        Sudoku.settings.designModeState(state);\n        Sudoku.inputMode.triggerDesignModeActions(state);\n    };\n}\n","import Application from './Application';\nimport Controls from './Controls';\nimport InputMode from './InputMode';\nimport Grid from './Grid/Grid';\nimport Clock from './Clock';\nimport DocumentEventHandler from './EventHandlers/DocumentEventHandler';\nimport CommandHistory from './Commands/CommandHistory';\nimport Meta from './Meta';\nimport Modal from './Modal';\nimport Settings from './Settings';\nimport SettingsEventHandler from './EventHandlers/SettingsEventHandler';\nimport ActionsEventHandler from './EventHandlers/ActionsEventHandler';\nimport GridCellHighlighter from './Grid/GridCellHighlighter';\nimport Game from './Game';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    application: new Application(),\n    game: new Game(),\n    settings: new Settings(),\n    history: new CommandHistory(),\n    meta: new Meta(),\n    controls: new Controls(),\n    inputMode: new InputMode(),\n    gridCellHighlighter: new GridCellHighlighter(),\n    grid: new Grid(),\n    clock: new Clock(),\n    modal: new Modal(),\n    documentEventHandler: new DocumentEventHandler(),\n    settingsEventHandler: new SettingsEventHandler(),\n    actionsEventHandler: new ActionsEventHandler(),\n};\n\nSudoku.settings.init();\nSudoku.settingsEventHandler.init();\nSudoku.clock.init();\nSudoku.modal.init();\nSudoku.meta.init();\nSudoku.inputMode.init();\nSudoku.controls.init();\nSudoku.grid.init();\nSudoku.documentEventHandler.init();\nSudoku.actionsEventHandler.init();\n\n/*\nconst LZString = require('lz-string');\n\nfunction logResults(state, label = null) {\n    const result1 = LZString.compress(state);\n    const result2 = LZString.compressToEncodedURIComponent(state);\n\n    console.group(label || 'Compression result');\n    console.log('Original state', state.length, state);\n    console.log('Compressed state', result1.length, result1);\n    console.log('URL-encoded compressed state', result2.length, result2);\n    console.groupEnd();\n}\n\n// The state from the application\n// logResults(JSON.stringify(Sudoku.grid.getState()), 'App');\n\n// 3 digits per cell: 2 digits for cell number, 1 for value\nconst threeDigits = '038149156382416811295104457093378472567629123781806';\nlogResults(threeDigits, '3 digits per cell');\n\n// 81 numbers, representing every cell value (0 = empty)\nconst eightyOneNumbers = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nlogResults(eightyOneNumbers, '81 numbers');\n\n// A 1 as a counter, so the the digit 2 is '11', and 7 is '1111111' (delimited by a comma)\nconst csvOnes = eightyOneNumbers.split('')\n    .map(number => {\n        number = parseInt(number, 10);\n        return '1'.repeat(number);\n    })\n    .join(',');\nlogResults(csvOnes, 'CSV, counting with ones');\n\n// Grid cells state\nconst cellsState = ('n' + '1'.repeat(23) // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v' + '1'.repeat(7) // Cell value\n    + 'c' + '1'.repeat(4) // Color number 4\n    + 'cr' + [3, 4, 6, 8].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Center pencil marks\n).repeat(81) // For 81 cells\n// 366 length compressed, 975 length URL-encoded compressed\nlogResults(cellsState, 'Cells state v1');\n\n// Grid cells state, normal way\nconst cellsState2 = ('n23' // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v7' // Cell value\n    + 'c4' // Color number 4\n    + 'cr' + [3, 4, 6, 8].join('') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].join('') // Center pencil marks\n).repeat(81) // For 81 cells\n// 118 length compressed, 315 length URL-encoded compressed\nlogResults(cellsState2, 'Cells state v2');\n//*/\n","export default function Application() {\n    const self = this;\n\n    /**\n     * Apply puzzle properties to the application\n     * @param {object|null} properties\n     * @return {void}\n     */\n    self.applyPuzzleProperties = properties => {\n        if (properties === null) {\n            return;\n        }\n    };\n}\n","export default function Game() {\n    const self = this;\n\n    /**\n     * Indicates whether the game is paused\n     * @type {boolean}\n     * @private\n     */\n    let _isPaused = false;\n\n    /**\n     * @return {boolean}\n     */\n    self.isPaused = () => _isPaused;\n\n    /**\n     * @param {boolean} state\n     * @return {boolean}\n     */\n    self.setPausedState = state => _isPaused = state;\n}\n","import ShowClockCommand from './Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from './Commands/Settings/AutoErrorCheckingCommand';\nimport AutoRemovePencilMarksCommand from './Commands/Settings/AutoRemovePencilMarksCommand';\nimport HighlightMultipleSelectionCommand from './Commands/Settings/HighlightMultipleSelectionCommand';\nimport HighlightRowCommand from './Commands/Settings/HighlightRowCommand';\nimport HighlightColumnCommand from './Commands/Settings/HighlightColumnCommand';\nimport HighlightBoxCommand from './Commands/Settings/HighlightBoxCommand';\nimport HighlightValueCommand from './Commands/Settings/HighlightValueCommand';\nimport HighlightPencilMarksCommand from './Commands/Settings/HighlightPencilMarksCommand';\n\nexport default function Settings() {\n    const self = this;\n\n    /**\n     * Indicates whether the clock is shown\n     * @type {boolean}\n     * @private\n     */\n    let _clockState;\n\n    /**\n     * Indicates whether automatic error checking is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _autoErrorCheckingState;\n\n    /**\n     * Indicates whether pencil marks should automatically be removed\n     * @type {boolean}\n     * @private\n     */\n    let _autoRemovePencilMarksState = false;\n\n    /**\n     * Indicates whether highlighting is enabled when multiple cells are selected\n     * @type {boolean}\n     * @private\n     */\n    let _highlightMultipleSelectionState;\n\n    /**\n     * Indicates whether highlighting rows is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightRowState;\n\n    /**\n     * Indicates whether highlighting columns is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightColumnState;\n\n    /**\n     * Indicates whether highlighting 3x3 boxes is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightBoxState;\n\n    /**\n     * Indicates whether highlighting cells with the same value is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightValueState;\n\n    /**\n     * Indicates whether highlighting cells with the same value (pencil marks) is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightPencilMarksState;\n\n    /**\n     * Indicates whether auto-candidate mode is on\n     * @type {boolean}\n     * @private\n     */\n    let _autoCandidateModeState = false;\n\n    /**\n     * Indicates whether puzzle design mode is on\n     * @type {boolean}\n     * @private\n     */\n    let _designModeState = false;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        // Initialize the settings in local storage if needed\n        if (localStorage.getItem('settings') === null) {\n            localStorage.setItem('settings', JSON.stringify({}));\n        }\n\n        _fromLocalStorage();\n        _applySettings();\n    };\n\n    /**\n     * Get settings stored in local storage\n     * @return {void}\n     * @private\n     */\n    const _fromLocalStorage = () => {\n        const settings = JSON.parse(localStorage.getItem('settings'));\n\n        _clockState = (settings.clock !== undefined)\n            ? settings.clock\n            : true;\n\n        _autoErrorCheckingState = (settings.autoErrorChecking !== undefined)\n            ? settings.autoErrorChecking\n            : true;\n\n        _autoRemovePencilMarksState = (settings.autoRemovePencilMarks !== undefined)\n            ? settings.autoRemovePencilMarks\n            : false;\n\n        _highlightMultipleSelectionState = (settings.highlightMultipleSelection !== undefined)\n            ? settings.highlightMultipleSelection\n            : false;\n\n        _highlightRowState = (settings.highlightRow !== undefined)\n            ? settings.highlightRow\n            : true;\n\n        _highlightColumnState = (settings.highlightColumn !== undefined)\n            ? settings.highlightColumn\n            : true;\n\n        _highlightBoxState = (settings.highlightBox !== undefined)\n            ? settings.highlightBox\n            : true;\n\n        _highlightValueState = (settings.highlightValue !== undefined)\n            ? settings.highlightValue\n            : true;\n\n        _highlightPencilMarksState = (settings.highlightPencilMarks !== undefined)\n            ? settings.highlightPencilMarks\n            : true;\n    };\n\n    /**\n     * Export settings to local storage\n     * @return {void}\n     * @private\n     */\n    const _toLocalStorage = () => {\n        localStorage.setItem('settings', JSON.stringify({\n            clock: self.clockState(),\n            autoErrorChecking: self.autoErrorCheckingState(),\n            autoRemovePencilMarks: self.autoRemovePencilMarksState(),\n            highlightMultipleSelection: self.highlightMultipleSelectionState(),\n            highlightRow: self.highlightRowState(),\n            highlightColumn: self.highlightColumnState(),\n            highlightBox: self.highlightBoxState(),\n            highlightValue: self.highlightValueState(),\n            highlightPencilMarks: self.highlightPencilMarksState(),\n        }));\n    };\n\n    /**\n     * Apply the stored settings\n     * @return {void}\n     * @private\n     */\n    const _applySettings = () => {\n        (new ShowClockCommand()).execute(self.clockState());\n        (new AutoErrorCheckingCommand()).execute(self.autoErrorCheckingState());\n        (new AutoRemovePencilMarksCommand()).execute(self.autoRemovePencilMarksState());\n        (new HighlightMultipleSelectionCommand()).execute(self.highlightMultipleSelectionState());\n        (new HighlightRowCommand()).execute(self.highlightRowState());\n        (new HighlightColumnCommand()).execute(self.highlightColumnState());\n        (new HighlightBoxCommand()).execute(self.highlightBoxState());\n        (new HighlightValueCommand()).execute(self.highlightValueState());\n        (new HighlightPencilMarksCommand()).execute(self.highlightPencilMarksState());\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.clockState = (state = null) => {\n        if (state !== null) {\n            _clockState = state;\n            _toLocalStorage();\n        }\n\n        return _clockState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoErrorCheckingState = (state = null) => {\n        if (state !== null) {\n            _autoErrorCheckingState = state;\n            _toLocalStorage();\n        }\n\n        return _autoErrorCheckingState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoRemovePencilMarksState = (state = null) => {\n        if (state !== null) {\n            _autoRemovePencilMarksState = state;\n            _toLocalStorage();\n        }\n\n        return _autoRemovePencilMarksState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightMultipleSelectionState = (state = null) => {\n        if (state !== null) {\n            _highlightMultipleSelectionState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightMultipleSelectionState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightRowState = (state = null) => {\n        if (state !== null) {\n            _highlightRowState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightRowState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightColumnState = (state = null) => {\n        if (state !== null) {\n            _highlightColumnState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightColumnState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightBoxState = (state = null) => {\n        if (state !== null) {\n            _highlightBoxState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightBoxState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightValueState = (state = null) => {\n        if (state !== null) {\n            _highlightValueState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightValueState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightPencilMarksState = (state = null) => {\n        if (state !== null) {\n            _highlightPencilMarksState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightPencilMarksState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoCandidateModeState = (state = null) => {\n        if (state !== null) {\n            _autoCandidateModeState = state;\n        }\n\n        return _autoCandidateModeState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.designModeState = (state = null) => {\n        if (state !== null) {\n            _designModeState = state;\n        }\n\n        return _designModeState;\n    };\n}\n","import UndoableCommandInterface from './UndoableCommandInterface';\n\nexport default function CommandHistory() {\n    const self = this;\n\n    /**\n     * The list of commands that have been executed\n     * @type {UndoableCommandInterface[]}\n     * @private\n     */\n    let _past = [];\n\n    /**\n     * The list of commands to redo\n     * @type {UndoableCommandInterface[]}\n     * @private\n     */\n    let _future = [];\n\n    /**\n     * Add a command to be executed\n     * @param {UndoableCommandInterface} command\n     * @param {boolean} clearFuture Whether to clear the future (redo) stack\n     * @return {number}\n     */\n    self.execute = (command, clearFuture = true) => {\n        if (! (command instanceof UndoableCommandInterface)) {\n            throw new Error('Command needs to have UndoableCommandInterface in its prototype chain');\n        }\n\n        command.execute();\n        _past.push(command);\n\n        // Clear the future (redo) list if needed\n        if (clearFuture) {\n            _future = [];\n        }\n    };\n\n    /**\n     * Undo the most recent command\n     * @return {void}\n     */\n    self.undo = () => {\n        // A command needs to exist\n        if (_past.length < 1) {\n            return;\n        }\n\n        // Undo the command\n        const command = _past.pop();\n        command.undo();\n\n        // Put the command in the future stack, for redoing\n        _future.push(command);\n    };\n\n    /**\n     * Execute the most recent command from the future stack\n     * @return {void}\n     */\n    self.redo = () => {\n        // A command needs to exist\n        if (_future.length < 1) {\n            return;\n        }\n\n        // Redo the command\n        const command = _future.pop();\n        self.execute(command, false);\n    };\n}\n","export default function Meta() {\n    const self = this;\n\n    /**\n     * The name of the application\n     * @type {string}\n     */\n    const appName = document.getElementById('meta-app-name').getAttribute('content');\n\n    /**\n     * The page title element\n     * @type {HTMLCollectionOf<HTMLElement>}\n     */\n    const titleElements = document.getElementsByClassName('page-title');\n\n    /**\n     * The title input field\n     * @type {HTMLInputElement}\n     */\n    const titleField = document.getElementById('puzzle-title');\n\n    /**\n     * The notes input field\n     * @type {HTMLTextAreaElement}\n     */\n    const notesField = document.getElementById('puzzle-notes');\n\n    /**\n     * An optional title for the sudoku\n     * @type {string|null}\n     */\n    let title = null;\n\n    /**\n     * An optional notes for the sudoku\n     * @type {string|null}\n     */\n    let notes = null;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableTextFields();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableTextFields = () => {\n        const titleCallback = () => {\n            title = titleField.value.trim();\n\n            // Update the page title\n            const pageTitle = (title !== '')\n                ? `${title} - ${appName}`\n                : appName;\n\n            for (let i = 0; i < titleElements.length; i++) {\n                titleElements[i].innerText = pageTitle;\n            }\n        };\n\n        titleField.addEventListener('change', titleCallback);\n        titleField.addEventListener('keyup', titleCallback);\n        titleField.addEventListener('paste', titleCallback);\n\n        const notesCallback = () => notes = notesField.value;\n\n        notesField.addEventListener('change', notesCallback);\n        notesField.addEventListener('keyup', notesCallback);\n        notesField.addEventListener('paste', notesCallback);\n    };\n}\n","import Visitor from './Utilities/Visitor';\n\nexport default function Controls() {\n    const self = this;\n\n    /**\n     * Indicates whether a mouse button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _mousePressed = false;\n\n    /**\n     * Indicates whether a ctrl button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _ctrlKeyPressed = false;\n\n    /**\n     * Indicates whether a shift button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _shiftKeyPressed = false;\n\n    /**\n     * Arrow key codes\n     * @type {object}\n     * @private\n     */\n    const _arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Arrow key codes, as 1 array\n     * @type {string[]}\n     * @private\n     */\n    const _arrowKeysConcatenated = _arrowKeys.up\n        .concat(_arrowKeys.down)\n        .concat(_arrowKeys.left)\n        .concat(_arrowKeys.right);\n\n    /**\n     * Delete key codes\n     * @type {string[]}\n     * @private\n     */\n    const _deleteKeys = ['Delete', 'Backspace'];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => _mousePressed = true);\n        document.addEventListener('mouseup', () => _mousePressed = false);\n        document.addEventListener('keyup', _keyUpDownCallback);\n        document.addEventListener('keydown', _keyUpDownCallback);\n        document.addEventListener('keydown', _keyDownCallback);\n        _registerClickDisabling();\n    };\n\n    /**\n     * Disable click events for certain elements\n     * @return {void}\n     * @private\n     */\n    const _registerClickDisabling = () => {\n        document.addEventListener('click', event => {\n            if (event.target.closest('.click-prevent') !== null) {\n                event.preventDefault();\n            }\n        });\n    };\n\n    /**\n     * Decide whether to cancel a keyboard listener\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.cancelKeyboardEvent = event => {\n        const nodeName = event.target.nodeName.toLowerCase();\n\n        // Don't use custom listener on input elements\n        return (['input', 'textarea'].indexOf(nodeName) > -1);\n    };\n\n    /**\n     * Callback for keydown and keyup\n     * @param {Event} event\n     * @return {void}\n     * @private\n     */\n    const _keyUpDownCallback = event => {\n        _ctrlKeyPressed = Visitor.usesMacOs ? event.metaKey : event.ctrlKey;\n        _shiftKeyPressed = event.shiftKey;\n    };\n\n    /**\n     * @param {Event} event\n     * @return {void}\n     * @private\n     */\n    const _keyDownCallback = event => {\n        // Prevent browser keyboard actions\n        if (! self.cancelKeyboardEvent(event)) {\n            if ([\n                'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown',\n                'Space'\n            ].indexOf(event.code) > -1) {\n                event.preventDefault();\n            }\n\n            if (_ctrlKeyPressed) {\n                if (event.code === 'KeyY') {\n                    event.preventDefault();\n                }\n            }\n        }\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.mouseIsPressed = () => _mousePressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.ctrlKeyIsPressed = () => _ctrlKeyPressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.shiftKeyIsPressed = () => _shiftKeyPressed;\n\n    /**\n     * Checks whether an event is a number key\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.isNumberKey = event => (! isNaN(parseInt(event.key, 10)));\n\n    /**\n     * Checks whether an event is a delete key\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.isDeleteKey = event => (_deleteKeys.indexOf(event.code) > -1);\n\n    /**\n     * Checks whether an event is an arrow key\n     * @param {Event} event\n     * @param {string} direction (any or up/down/left/right)\n     * @return {boolean}\n     */\n    self.isArrowKey = (event, direction = 'any') => {\n        // Check for any arrow key\n        if (direction === 'any') {\n            return (_arrowKeysConcatenated.indexOf(event.code) > -1);\n        }\n\n        // Check for a specific arrow key\n        return (\n            _arrowKeys[direction]\n            && _arrowKeys[direction].indexOf(event.code) > -1\n        );\n    };\n}\n","import GridCell from './GridCell';\n\nexport default function GridCellHighlighter() {\n    const self = this;\n\n    /**\n     * A list of currently highlighted cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _highlightedCells = [];\n\n    /**\n     * Add a cell to the list of highlighted cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addHighlightedCell = cell => _highlightedCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getHighlightedCells = () => _highlightedCells;\n\n    /**\n     * Highlight all cells that are related to selected cell(s)\n     * @return {void}\n     */\n    self.highlightRelatedCells = () => {\n        self.dehighlightAllCells();\n\n        let cellNumbers = [];\n\n        // Add the cell numbers of the row, column and box that the cell is in\n        Sudoku.grid.getSelectedCells().forEach(cell => {\n            if (Sudoku.settings.highlightRowState()) {\n                cellNumbers = cellNumbers.concat(cell.getRow().getCellNumbers());\n            }\n\n            if (Sudoku.settings.highlightColumnState()) {\n                cellNumbers = cellNumbers.concat(cell.getColumn().getCellNumbers());\n            }\n\n            if (Sudoku.settings.highlightBoxState()) {\n                cellNumbers = cellNumbers.concat(cell.getBox().getCellNumbers());\n            }\n\n            // See if value highlighting is needed or possible\n            const cellValue = cell.getValue();\n            if (cellValue === null\n                || (! Sudoku.settings.highlightValueState()\n                    && ! Sudoku.settings.highlightPencilMarksState())\n            ) {\n                return;\n            }\n\n            // Add the cell numbers of cells that contain the same digit\n            const sameDigitCellNumbers = Sudoku.grid.getCells()\n                .filter(cell => {\n                    // Filter by cell value\n                    if (Sudoku.settings.highlightValueState() && cell.hasValue(cellValue)) {\n                        return true;\n                    }\n\n                    // Filter by pencil marks\n                    else if (Sudoku.settings.highlightPencilMarksState()\n                        // Skip filled in cells, because then pencil marks are invisible\n                        && ! cell.hasValue()\n                        && (cell.getCornerMarks().has(cellValue)\n                            || cell.getCenterMarks().has(cellValue))\n                    ) {\n                        return true;\n                    }\n\n                    return false;\n                })\n                .map(cell => cell.getCellNumber());\n\n            cellNumbers = cellNumbers.concat(sameDigitCellNumbers);\n        });\n\n        cellNumbers\n            // Remove duplicates\n            .filter((value, index, numbers) => {\n                return numbers.indexOf(value) === index;\n            })\n            // Highlight the cells\n            .forEach(cellNumber => {\n                Sudoku.grid.getCell(cellNumber).setHighlightedState(true);\n            });\n    };\n\n    /**\n     * De-highlight all the highlighted cells\n     * @return {void}\n     */\n    self.dehighlightAllCells = () => {\n        self.getHighlightedCells()\n            .forEach(cell => cell.setHighlightedState(false));\n\n        _highlightedCells = [];\n    };\n}\n","import {trait} from '../functions';\nimport GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport HasGridCells from '../Traits/HasGridCells';\n\nexport default function Grid() {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     * @private\n     */\n    const _gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     * @private\n     */\n    const _gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     * @private\n     */\n    const _gridBoxes = [];\n\n    /**\n     * A list of currently selected cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _selectedCells = [];\n\n    /**\n     * The cell that is last navigated to\n     * @type {GridCell|null}\n     * @private\n     */\n    let _lastNavigatedCell = null;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        _collectCells();\n    };\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     * @private\n     */\n    const _collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            _gridRows.push(new GridRow(i));\n            _gridColumns.push(new GridColumn(i));\n            _gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n            self.addCell(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (_gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridRows[j].addCell(gridCell);\n                    gridCell.setRow(_gridRows[j]);\n                }\n\n                if (_gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(_gridColumns[j]);\n                }\n\n                if (_gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(_gridBoxes[j]);\n                }\n            }\n        }\n\n        self.setLastNavigatedCell(null);\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getSelectedCells = () => _selectedCells;\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    self.addSelectedCell = cell => {\n        _selectedCells.push(cell);\n\n        // Highlight related cells after selecting\n        Sudoku.gridCellHighlighter.highlightRelatedCells();\n    };\n\n    /**\n     * Deselect all the selected cells\n     * @return {void}\n     */\n    self.deselectAllCells = () => {\n        self.getSelectedCells().forEach(cell => cell.setSelectedState(false));\n        _selectedCells = [];\n    };\n\n    /**\n     * @return {GridCell|null}\n     */\n    self.getLastNavigatedCell = () => _lastNavigatedCell;\n\n    /**\n     * @param {GridCell|null} cell\n     * @return {null}\n     */\n    self.setLastNavigatedCell = cell => {\n        // The default last navigated cell is the center one\n        if (cell === null) {\n            _lastNavigatedCell = self.getCell(41);\n        } else {\n            _lastNavigatedCell = cell;\n        }\n    };\n\n    /**\n     * Check for errors in the grid\n     * @return {void}\n     */\n    self.checkForErrors = () => {\n        self.removeAllErrors();\n\n        _gridRows.forEach(row => row.checkDuplicateCellValues());\n        _gridColumns.forEach(column => column.checkDuplicateCellValues());\n        _gridBoxes.forEach(box => box.checkDuplicateCellValues());\n    };\n\n    /**\n     * Remove the error status of all cells\n     * @return {void}\n     */\n    self.removeAllErrors = () => {\n        self.getCells().forEach(cell => cell.setErrorState(false));\n    };\n\n    /**\n     * Show all possible candidates\n     * @return {void}\n     */\n    self.determineCandidates = () => {\n        self.getCells()\n            // Only cells that don't have a value\n            .filter(cell => cell.getValue() === null)\n            .forEach(cell => {\n                // Get pencil marks to show\n                const centerMarks = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n                    .filter(number => {\n                        // If the value exists, filter out the number\n                        if (cell.getRow().containsValue(number)) {\n                            return false;\n                        } else if (cell.getColumn().containsValue(number)) {\n                            return false;\n                        } else if (cell.getBox().containsValue(number)) {\n                            return false;\n                        }\n\n                        return true;\n                    });\n\n                // Apply the pencil marks\n                cell.getCenterMarks().setDigits(centerMarks, true);\n            });\n    };\n\n    /**\n     * Remove all automatically shown candidates\n     * @return {void}\n     */\n    self.removeCandidates = () => {\n        self.getCells().forEach(cell => {\n            // Remove the auto-candidates\n            cell.getCenterMarks().setDigits([], true);\n\n            // Show the user-filled center marks\n            cell.getCenterMarks().show();\n        });\n    };\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () =>\n        // Application version\n        'a1'\n        // Elapsed milliseconds\n        + 't' + Sudoku.clock.getTotalElapsedMs()\n        // Cells state\n        + self.getCells().map(cell => cell.getState()).join('');\n}\n","export default function Clock() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     * @private\n     */\n    let _initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     * @private\n     */\n    let _startMoment = null;\n\n    /**\n     * The element that shows the elapsed time\n     * @type {HTMLSpanElement}\n     * @private\n     */\n    const _timeElement = document.getElementById('elapsed-time');\n\n    /**\n     * The interval for showing the time on screen\n     * @type {number|null}\n     * @private\n     */\n    let _timeInterval = null;\n\n    /**\n     * Indicates whether the clock is paused\n     * @type {boolean}\n     * @private\n     */\n    let _paused = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        self.start();\n    };\n\n    /**\n     * Set the start/unpause moment for calculating elapsed time\n     * @return {void}\n     */\n    self.start = self.unpause = () => {\n        _startMoment = new Date();\n        _paused = false;\n        self.enableTimeInterval();\n    };\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        _initialMs += self.getElapsedMsSinceStart();\n        _startMoment = null;\n        _paused = true;\n        self.enableTimeInterval(false);\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isPaused = () => _paused;\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (_startMoment !== null)\n            ? (new Date()).getTime() - _startMoment.getTime()\n            : 0;\n    };\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => _initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n\n    /**\n     * Decide whether to start/stop the timer interval\n     * @param {boolean} enable\n     * @return {void}\n     */\n    self.enableTimeInterval = (enable = true) => {\n        if (enable) {\n            _timeInterval = setInterval(() => {\n                _timeElement.innerText = self.getElapsedTimeString();\n            }, 1000);\n        } else {\n            clearInterval(_timeInterval);\n        }\n    };\n}\n","import CloseAllModalsCommand from './Commands/Modal/CloseAllModalsCommand';\nimport OpenModalCommand from './Commands/Modal/OpenModalCommand';\n\nexport default function Modal() {\n    const self = this;\n\n    /**\n     * The modal dialog backdrop\n     * @type {HTMLElement}\n     * @private\n     */\n    const _backdropElement = document.getElementById('modal-backdrop');\n\n    /**\n     * Indicates whether a modal is currently open\n     * @type {boolean}\n     * @private\n     */\n    let _openState = false;\n\n    /**\n     * The ID of the currently opened modal\n     * @type {string|null}\n     * @private\n     */\n    let _currentModalId = null;\n\n    /**\n     * Reusable close command, for all modals\n     * @type {CloseAllModalsCommand}\n     * @private\n     */\n    const _closeCommand = new CloseAllModalsCommand();\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableOpening();\n        _enableClosing();\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.openState = () => _openState;\n\n    /**\n     * @param {string|null} modalId\n     * @return {void}\n     */\n    self.setCurrentModalId = modalId => {\n        _currentModalId = modalId;\n\n        // Set the open state, based on if there is an ID\n        _openState = (modalId !== null);\n\n        // Toggle the backdrop, based on if there is an ID\n        const toggleMethod = (modalId !== null) ? 'add' : 'remove';\n        _backdropElement.classList[toggleMethod]('show');\n    };\n\n    /**\n     * @return {string|null}\n     */\n    self.getCurrentModalId = () => _currentModalId;\n\n    /**\n     * Close an open modal dialog, if there is any\n     * @return {void}\n     */\n    self.close = () => _closeCommand.execute();\n\n    /**\n     * Enable opening of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableOpening = () => {\n        const openButtons = document.getElementsByClassName('open-modal');\n\n        for (let i = 0; i < openButtons.length; i++) {\n            openButtons[i].addEventListener('click', event => {\n                // Open the modal dialog\n                const modalId = event.target.dataset.modalId;\n                const command = new OpenModalCommand(modalId);\n                command.execute();\n            });\n        }\n    };\n\n    /**\n     * Enable closing of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableClosing = () => {\n        // Enable close buttons of the modal dialogs\n        const closeButtons = document.getElementsByClassName('close-modal');\n        for (let i = 0; i < closeButtons.length; i++) {\n            closeButtons[i].addEventListener('click', self.close);\n        }\n\n        // Clicking the backdrop also closes modal dialogs\n        _backdropElement.addEventListener('click', event => {\n            // Prevent child elements from triggering closing\n            if (event.target === _backdropElement) {\n                self.close();\n            }\n        });\n    };\n}\n","import ChangeDigitCommand from '../Commands/Grid/ChangeDigitCommand';\nimport PauseGameCommand from '../Commands/PauseGameCommand';\n\nexport default function DocumentEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _registerKeyboardEvents();\n        _registerMouseEvents();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerKeyboardEvents = () => {\n        const pauseGameCommand = new PauseGameCommand();\n\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.cancelKeyboardEvent(event)) {\n                return;\n            }\n\n            if (Sudoku.controls.isArrowKey(event)) {\n                // Deselect all cells, if the ctrl key is not pressed\n                if (! Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.grid.deselectAllCells();\n                }\n\n                let newCellIndex = Sudoku.grid.getLastNavigatedCell().getCellNumber() - 1;\n                let newCell = null;\n\n                // Then navigate to the intended cell\n                // Wrap around if needed\n                if (Sudoku.controls.isArrowKey(event, 'up')) {\n                    if ((newCellIndex -= 9) < 0) {\n                        newCellIndex = 81 + newCellIndex;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event, 'down')) {\n                    if ((newCellIndex += 9) > 80) {\n                        newCellIndex = newCellIndex - 81;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event, 'left')) {\n                    if ((--newCellIndex + 1) % 9 === 0) {\n                        newCellIndex += 9;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event, 'right')) {\n                    if (++newCellIndex % 9 === 0) {\n                        newCellIndex -= 9;\n                    }\n                }\n\n                // Make the new cell the active one\n                newCell = Sudoku.grid.getCell(newCellIndex + 1);\n                newCell.setSelectedState(true);\n                Sudoku.grid.setLastNavigatedCell(newCell);\n            }\n\n            if (Sudoku.controls.isNumberKey(event)) {\n                // Set a number value\n                const digit = parseInt(event.key, 10);\n                if (digit > 0) {\n                    Sudoku.history.execute(new ChangeDigitCommand(digit));\n                }\n            } else if (Sudoku.controls.isDeleteKey(event)) {\n                // Remove a value\n                Sudoku.history.execute(new ChangeDigitCommand(null));\n            } else if (event.code === 'KeyZ') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    // Redo or undo an action\n                    if (Sudoku.controls.shiftKeyIsPressed()) {\n                        Sudoku.history.redo();\n                    } else {\n                        Sudoku.history.undo();\n                    }\n                }\n            } else if (event.code === 'KeyY') {\n                // Redo an action\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.history.redo();\n                }\n            } else if (event.code === 'Escape') {\n                (Sudoku.modal.openState() === true)\n                    // Close a modal dialog\n                    ? Sudoku.modal.close()\n                    // Pause / unpause the game\n                    : pauseGameCommand.toggle();\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseEvents = () => {\n        document.addEventListener('mousedown', event => {\n            // Deselect all cells, when clicking outside the grid\n            if (event.target.closest('.grid-cell') === null) {\n                Sudoku.grid.deselectAllCells();\n                Sudoku.gridCellHighlighter.dehighlightAllCells();\n            }\n        });\n    };\n}\n","import ShowClockCommand from '../Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from '../Commands/Settings/AutoErrorCheckingCommand';\nimport AutoRemovePencilMarksCommand from '../Commands/Settings/AutoRemovePencilMarksCommand';\nimport HighlightRowCommand from '../Commands/Settings/HighlightRowCommand';\nimport HighlightColumnCommand from '../Commands/Settings/HighlightColumnCommand';\nimport HighlightBoxCommand from '../Commands/Settings/HighlightBoxCommand';\nimport HighlightValueCommand from '../Commands/Settings/HighlightValueCommand';\nimport HighlightPencilMarksCommand from '../Commands/Settings/HighlightPencilMarksCommand';\nimport HighlightMultipleSelectionCommand from '../Commands/Settings/HighlightMultipleSelectionCommand';\n\nexport default function SettingsEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableClockToggling();\n        _enableAutoErrorCheckingToggling();\n        _enableAutoRemovePencilMarksToggling();\n        _enableHighlightingToggling();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableClockToggling = () => {\n        document.getElementById('setting-show-clock')\n            .addEventListener('change', event => {\n                (new ShowClockCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableAutoErrorCheckingToggling = () => {\n        document.getElementById('setting-auto-error-checking')\n            .addEventListener('change', event => {\n                (new AutoErrorCheckingCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableAutoRemovePencilMarksToggling = () => {\n        document.getElementById('setting-auto-remove-pencil-marks')\n            .addEventListener('change', event => {\n                (new AutoRemovePencilMarksCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableHighlightingToggling = () => {\n        // Highlighting when multiple cells are selected\n        document.getElementById('setting-highlight-multiple-selection')\n            .addEventListener('change', event => {\n                (new HighlightMultipleSelectionCommand()).execute(event.target.checked);\n            });\n\n        // Row highlighting\n        document.getElementById('setting-highlight-row')\n            .addEventListener('change', event => {\n                (new HighlightRowCommand()).execute(event.target.checked);\n            });\n\n        // Column highlighting\n        document.getElementById('setting-highlight-column')\n            .addEventListener('change', event => {\n                (new HighlightColumnCommand()).execute(event.target.checked);\n            });\n\n        // 3x3 box highlighting\n        document.getElementById('setting-highlight-box')\n            .addEventListener('change', event => {\n                (new HighlightBoxCommand()).execute(event.target.checked);\n            });\n\n        // Same value highlighting\n        document.getElementById('setting-highlight-value')\n            .addEventListener('change', event => {\n                (new HighlightValueCommand()).execute(event.target.checked);\n            });\n\n        // Same value highlighting\n        document.getElementById('setting-highlight-pencil-marks')\n            .addEventListener('change', event => {\n                (new HighlightPencilMarksCommand()).execute(event.target.checked);\n            });\n    };\n}\n","import AutoCandidateModeCommand from '../Commands/AutoCandidateModeCommand';\nimport PauseGameCommand from '../Commands/PauseGameCommand';\nimport DesignModeCommand from '../Commands/DesignModeCommand';\n\nexport default function ActionsEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _registerPauseResumeEvent();\n        _registerCheckErrorsEvent();\n        _registerAutoCandidateModeEvent();\n        _registerDesignModeEvent();\n    };\n\n    /**\n     * @private\n     */\n    const _registerPauseResumeEvent = () => {\n        document.getElementById('toggle-pause-button')\n            .addEventListener('click', () => {\n                (new PauseGameCommand()).toggle();\n            });\n\n        document.getElementById('game-resume-button')\n            .addEventListener('click', () => {\n                (new PauseGameCommand()).execute(false);\n                Sudoku.modal.close();\n            });\n    };\n\n    /**\n     * @private\n     */\n    const _registerCheckErrorsEvent = () => {\n        document.getElementById('check-errors')\n            .addEventListener('click', Sudoku.grid.checkForErrors);\n    };\n\n    /**\n     * @private\n     */\n    const _registerAutoCandidateModeEvent = () => {\n        document.getElementById('setting-auto-candidate')\n            .addEventListener('change', event => {\n                (new AutoCandidateModeCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @private\n     */\n    const _registerDesignModeEvent = () => {\n        document.getElementById('toggle-design-mode')\n            .addEventListener('change', event => {\n                (new DesignModeCommand()).execute(event.target.checked);\n            });\n    };\n}\n"],"sourceRoot":""}