{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/Utilities/Visitor.js","webpack:///./assets/js/InputMode.js","webpack:///./assets/js/functions.js","webpack:///./assets/js/Traits/HasGridCells.js","webpack:///./assets/js/Grid/GridRow.js","webpack:///./assets/js/Grid/GridColumn.js","webpack:///./assets/js/Grid/GridBox.js","webpack:///./assets/js/EventHandlers/GridCellEventHandler.js","webpack:///./assets/js/Grid/PencilMarks/PencilMarksInterface.js","webpack:///./assets/js/Grid/PencilMarks/CornerMarks.js","webpack:///./assets/js/Grid/PencilMarks/CenterMarks.js","webpack:///./assets/js/Grid/GridCell.js","webpack:///./assets/js/Commands/CommandInterface.js","webpack:///./assets/js/Commands/UndoableCommandInterface.js","webpack:///./assets/js/Commands/Grid/ChangeDigitCommand.js","webpack:///./assets/js/Commands/TogglableCommandInterface.js","webpack:///./assets/js/Commands/Modal/OpenModalCommand.js","webpack:///./assets/js/Commands/PauseGameCommand.js","webpack:///./assets/js/Commands/Modal/CloseAllModalsCommand.js","webpack:///./assets/js/Commands/Settings/ShowClockCommand.js","webpack:///./assets/js/Commands/Settings/AutoErrorCheckingCommand.js","webpack:///./assets/js/Commands/Settings/AutoRemovePencilMarksCommand.js","webpack:///./assets/js/Commands/Settings/HighlightRowCommand.js","webpack:///./assets/js/Commands/Settings/HighlightColumnCommand.js","webpack:///./assets/js/Commands/Settings/HighlightBoxCommand.js","webpack:///./assets/js/Commands/Settings/HighlightValueCommand.js","webpack:///./assets/js/Commands/Settings/HighlightPencilMarksCommand.js","webpack:///./assets/js/Commands/AutoCandidateModeCommand.js","webpack:///./assets/js/Commands/DesignModeCommand.js","webpack:///./assets/js/app.js","webpack:///./assets/js/Game.js","webpack:///./assets/js/Settings.js","webpack:///./assets/js/Commands/CommandHistory.js","webpack:///./assets/js/Meta.js","webpack:///./assets/js/Controls.js","webpack:///./assets/js/Grid/GridCellHighlighter.js","webpack:///./assets/js/Grid/Grid.js","webpack:///./assets/js/Clock.js","webpack:///./assets/js/Modal.js","webpack:///./assets/js/EventHandlers/DocumentEventHandler.js","webpack:///./assets/js/EventHandlers/SettingsEventHandler.js","webpack:///./assets/js/EventHandlers/ActionsEventHandler.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Visitor","InputMode","self","this","_mode","MODE_VALUE","_radioButtons","document","getElementsByName","_inputModeValueLabel","getElementById","_inputModeCornerLabel","_inputModeCenterLabel","init","_selectCurrentRadioButton","_registerEventListeners","forEach","radioButton","parseInt","getMode","checked","addEventListener","setMode","event","code","changeMode","MODE_CORNER","Sudoku","settings","autoCandidateModeState","MODE_CENTER","designModeState","toLowerCase","Error","_disableInput","label","disable","classList","add","getElementsByTagName","disabled","remove","triggerAutoCandidateModeActions","state","triggerDesignModeActions","extend","constructor","baseConstructor","trait","instance","traitConstructor","thing","traitInstance","HasGridCells","gridCells","addCell","cell","push","getCells","getCell","number","find","getCellNumber","undefined","getCellValues","map","getValue","filter","checkDuplicateCellValues","cellValues","cellValue","cells","length","setErrorState","containsValue","hasValue","GridRow","rowNumber","_rowNumber","getCellNumbers","numbers","rowIndex","GridColumn","columnNumber","_columnNumber","j","GridBox","boxNumber","_boxNumber","boxIndex","topLeftNumber","Math","floor","GridCellEventHandler","gridCell","_gridCell","register","_registerMouseDownEvent","_registerMouseEnterEvent","_registerMouseUpEvent","getElement","controls","ctrlKeyIsPressed","setSelectedState","isSelected","grid","deselectAllCells","mouseIsPressed","setLastNavigatedCell","PencilMarksInterface","digits","toggleDigit","digit","setDigits","has","indexOf","hasAny","show","CornerMarks","isPrefilled","cornerMarks","existingIndex","splice","GridCell","MAX_CORNER_MARKS","allElements","getElementsByClassName","innerText","sort","a","b","item","index","toString","CenterMarks","_autoCandidates","getAutoCandidates","centerMarks","MAX_CENTER_MARKS","useAutoCandidates","join","cellNumber","_cellNumber","_element","_cornerMarks","_centerMarks","_gridRow","_gridColumn","_gridBox","_isPrefilled","_value","_isSelected","_isHighlighted","toggleMethod","getColorNumber","setDigit","getCornerMarks","getCenterMarks","toggleValue","autoErrorCheckingState","inputMode","_toggleMarksVisibility","gridCellHighlighter","highlightRelatedCells","autoRemovePencilMarksState","_removeRelatedPencilMarks","determineCandidates","removePencilMark","type","pencilMarksObject","pencilMarks","digitIndex","getRow","concat","getColumn","getBox","selected","addSelectedCell","isHighlighted","setHighlightedState","highlighted","addHighlightedCell","setRow","row","setColumn","column","setBox","box","on","getState","CommandInterface","execute","UndoableCommandInterface","undo","ChangeDigitCommand","_digit","_cells","getSelectedCells","_inputMode","_cellsState","checkForErrors","TogglableCommandInterface","toggle","currentState","OpenModalCommand","modalId","_modalId","_modalElement","modal","setCurrentModalId","PauseGameCommand","game","isPaused","_bodyElement","pauseIcon","resumeIcon","clock","pause","openState","unpause","setPausedState","CloseAllModalsCommand","_pauseGameCommand","modals","ShowClockCommand","clockState","_clockElement","_toggleCheckbox","AutoErrorCheckingCommand","_errorCheckingButton","removeAllErrors","AutoRemovePencilMarksCommand","HighlightRowCommand","highlightRowState","HighlightColumnCommand","highlightColumnState","HighlightBoxCommand","highlightBoxState","HighlightValueCommand","highlightValueState","HighlightPencilMarksCommand","highlightPencilMarksState","AutoCandidateModeCommand","removeCandidates","DesignModeCommand","usesMacOs","navigator","userAgent","match","window","_isPaused","_clockState","_autoErrorCheckingState","_highlightRowState","_highlightColumnState","_highlightBoxState","_highlightValueState","_highlightPencilMarksState","_autoRemovePencilMarksState","_autoCandidateModeState","_designModeState","localStorage","getItem","setItem","JSON","stringify","_fromLocalStorage","_applySettings","parse","autoErrorChecking","autoRemovePencilMarks","highlightRow","highlightColumn","highlightBox","highlightValue","highlightPencilMarks","_toLocalStorage","history","_past","_future","command","clearFuture","pop","redo","meta","appName","getAttribute","titleElements","titleField","descriptionField","title","_enableTextFields","titleCallback","pageTitle","trim","descriptionCallback","_mousePressed","_ctrlKeyPressed","_shiftKeyPressed","_arrowKeys","up","down","left","right","_arrowKeysConcatenated","_deleteKeys","_keyUpDownCallback","_keyDownCallback","_registerClickDisabling","target","closest","preventDefault","cancelKeyboardEvent","nodeName","metaKey","ctrlKey","shiftKey","shiftKeyIsPressed","isNumberKey","isNaN","isDeleteKey","isArrowKey","direction","_highlightedCells","getHighlightedCells","dehighlightAllCells","cellNumbers","sameDigitCellNumbers","_gridRows","_gridColumns","_gridBoxes","_selectedCells","_lastNavigatedCell","_collectCells","getLastNavigatedCell","getTotalElapsedMs","_initialMs","_startMoment","_timeElement","_timeInterval","_paused","start","Date","enableTimeInterval","getElapsedMsSinceStart","getTime","getElapsedTimeString","totalSeconds","hours","minutes","seconds","padStart","enable","setInterval","clearInterval","_backdropElement","_openState","_currentModalId","_closeCommand","_enableOpening","_enableClosing","getCurrentModalId","close","openButtons","dataset","closeButtons","documentEventHandler","_registerKeyboardEvents","_registerMouseEvents","pauseGameCommand","newCellIndex","newCell","settingsEventHandler","_enableClockToggling","_enableAutoErrorCheckingToggling","_enableAutoRemovePencilMarksToggling","_enableHighlightingToggling","actionsEventHandler","_registerPauseResumeEvent","_registerCheckErrorsEvent","_registerAutoCandidateModeEvent","_registerDesignModeEvent"],"mappings":"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","file":"app_8aeb87762ddd8938434a.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Indicates whether the visitor's OS is macOS\n * @type {boolean}\n * @static\n */\nVisitor.usesMacOs = (navigator.userAgent.toLowerCase().match(/macintosh/) !== null);\n\nexport default function Visitor() {\n    const self = this;\n}\n","/**\n * Several input modes, to be used as constants\n * @type {number}\n * @static\n */\nInputMode.MODE_VALUE = 1;\nInputMode.MODE_CORNER = 2;\nInputMode.MODE_CENTER = 3;\n\nexport default function InputMode() {\n    const self = this;\n\n    /**\n     * The current mode\n     * @type {number}\n     * @private\n     */\n    let _mode = InputMode.MODE_VALUE;\n\n    /**\n     * The radio buttons that can change the mode\n     * @type {NodeListOf<HTMLElement>}\n     * @private\n     */\n    const _radioButtons = document.getElementsByName('input_mode');\n\n    /**\n     * The label containing the checkbox for the 'value' input mode\n     * @type {HTMLLabelElement}\n     * @private\n     */\n    const _inputModeValueLabel = document.getElementById('input-mode-value-label');\n\n    /**\n     * The label containing the checkbox for the 'corner marks' input mode\n     * @type {HTMLLabelElement}\n     * @private\n     */\n    const _inputModeCornerLabel = document.getElementById('input-mode-corner-label');\n\n    /**\n     * The label containing the checkbox for the 'center marks' input mode\n     * @type {HTMLLabelElement}\n     * @private\n     */\n    const _inputModeCenterLabel = document.getElementById('input-mode-center-label');\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        _selectCurrentRadioButton();\n        _registerEventListeners();\n    };\n\n    /**\n     * Make the radio button of the current input mode checked\n     * @return {void}\n     * @private\n     */\n    const _selectCurrentRadioButton = () => {\n        _radioButtons.forEach(radioButton => {\n            if (parseInt(radioButton.value, 10) === self.getMode()) {\n                radioButton.checked = true;\n            }\n        });\n    };\n\n    /**\n     * Enable toggling the mode with radio buttons\n     * @return {void}\n     * @private\n     */\n    const _registerEventListeners = () => {\n        _radioButtons.forEach(radioButton => {\n            radioButton.addEventListener('change', () => {\n                self.setMode(parseInt(radioButton.value, 10));\n            });\n        });\n\n        document.addEventListener('keydown', event => {\n            switch (event.code) {\n                case 'Space':\n                    self.changeMode();\n                    break;\n                case 'KeyI':\n                    self.setMode(InputMode.MODE_VALUE);\n                    break;\n                case 'KeyO':\n                    self.setMode(InputMode.MODE_CORNER);\n                    break;\n                case 'KeyP':\n                    if (! Sudoku.settings.autoCandidateModeState()) {\n                        self.setMode(InputMode.MODE_CENTER);\n                    }\n                    break;\n            }\n        });\n    };\n\n    /**\n     * @param {number} mode\n     * @return {void}\n     */\n    self.setMode = mode => {\n        // Restrict to value mode, when design mode is on\n        if (Sudoku.settings.designModeState() === true) {\n            _mode = InputMode.MODE_VALUE;\n            _selectCurrentRadioButton();\n            return;\n        }\n\n        if ((typeof mode).toLowerCase() !== 'number') {\n            throw new Error(`Expected a number, got ${typeof mode}`);\n        }\n\n        const maxModeNumber = (Sudoku.settings.autoCandidateModeState() === true)\n            // Center-marks are disabled in auto-candidate mode\n            ? InputMode.MODE_CORNER\n            : InputMode.MODE_CENTER;\n\n        // Wrap around, when max number is reached\n        if (mode > maxModeNumber) {\n            mode = InputMode.MODE_VALUE;\n        }\n\n        _mode = mode;\n        _selectCurrentRadioButton();\n    };\n\n    /**\n     * Change the mode number incrementally\n     * @return {void}\n     */\n    self.changeMode = () => {\n        // Increase the mode number\n        self.setMode(_mode + 1);\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getMode = () => _mode;\n\n    /**\n     *\n     * @param {HTMLLabelElement} label\n     * @param {boolean} disable\n     * @private\n     */\n    const _disableInput = (label, disable = true) => {\n        if (disable === true) {\n            // Disable the input mode checkbox\n            label.classList.add('strike-through');\n            label.getElementsByTagName('input')[0].disabled = true;\n        } else {\n            // Enable the input mode checkbox\n            label.classList.remove('strike-through');\n            label.getElementsByTagName('input')[0].disabled = false;\n        }\n    };\n\n    /**\n     * Perform actions based on whether auto-candidate mode is on\n     * @param {boolean} state\n     * @return {void}\n     */\n    self.triggerAutoCandidateModeActions = state => {\n        if (state === true) {\n            _disableInput(_inputModeCenterLabel, true);\n\n            // Trigger any restrictions on the current input mode\n            self.setMode(self.getMode());\n        } else {\n            _disableInput(_inputModeCenterLabel, false);\n        }\n    };\n\n    /**\n     * Perform actions based on whether design mode is on\n     * @param {boolean} state\n     * @return {void}\n     */\n    self.triggerDesignModeActions = state => {\n        if (state === true) {\n            _disableInput(_inputModeValueLabel, true);\n            _disableInput(_inputModeCornerLabel, true);\n            _disableInput(_inputModeCenterLabel, true);\n\n            // Trigger any restrictions on the current input mode\n            self.setMode(self.getMode());\n        } else {\n            _disableInput(_inputModeValueLabel, false);\n            _disableInput(_inputModeCornerLabel, false);\n            _disableInput(_inputModeCenterLabel, false);\n        }\n    };\n}\n","/**\n * Extend a base constructor\n * @param {function} constructor\n * @param {function} baseConstructor\n * @return {void}\n */\nexport function extend(constructor, baseConstructor) {\n    // Check the constructor types\n    if ((typeof constructor).toLowerCase() !== 'function') {\n        throw new Error(`Constructor needs to be a function, got ${typeof constructor} instead`);\n    }\n\n    if ((typeof baseConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Base constructor needs to be a function, got ${typeof baseConstructor} instead`);\n    }\n\n    constructor.prototype = new baseConstructor();\n    constructor.prototype.constructor = constructor;\n};\n\n/**\n * Add code from a trait to an object\n * @param {object} instance\n * @param {function} traitConstructor\n * @return {void}\n */\nexport function trait(instance, traitConstructor) {\n    // Check the instance type\n    if ((typeof instance).toLowerCase() !== 'object') {\n        throw new Error(`Instance needs to be an object, got ${typeof instance} instead`);\n    }\n\n    // Check the constructor type\n    if ((typeof traitConstructor).toLowerCase() !== 'function') {\n        throw new Error(`Trait constructor needs to be a function, got ${typeof traitConstructor} instead`);\n    }\n\n    // Create a new instance of the trait\n    const traitInstance = new traitConstructor();\n    // A property or method of the trait\n    let thing;\n\n    // Set the properties/methods in the calling object\n    for (thing in traitInstance) {\n        instance[thing] = traitInstance[thing];\n    }\n};\n","import GridCell from '../Grid/GridCell';\n\nexport default function HasGridCells() {\n    const self = this;\n\n    /**\n     * Cells in the row\n     * @type {GridCell[]}\n     */\n    self.gridCells = [];\n\n    /**\n     * Add a cell to the row\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addCell = cell => self.gridCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getCells = () => self.gridCells;\n\n    /**\n     * Get a cell by its cell number\n     * @param {number} number A 1-based cell number\n     * @return {GridCell|null}\n     */\n    self.getCell = number => {\n        const cell = self.gridCells.find(cell => cell.getCellNumber() === number);\n        return (cell === undefined) ? null : cell;\n    };\n\n    /**\n     * Get a list of cell values\n     * @return {Array}\n     */\n    self.getCellValues = () => self.gridCells\n        .map(cell => cell.getValue())\n        .filter(value => value !== null);\n\n    /**\n     * See if the list of cell values contains duplicates\n     * @return {boolean}\n     */\n    self.checkDuplicateCellValues = () => {\n        // Pairs of value:gridCell[]\n        // Arrays of cells that have a certain value\n        const cellValues = {};\n\n        self.gridCells.forEach(cell => {\n            // Get the filled in value of the cell\n            const cellValue = cell.getValue();\n\n            // A value is needed for checking\n            if (cellValue === null) {\n                return;\n            }\n\n            // Get the cells that have that value and add the cell\n            const cells = cellValues[cellValue] || [];\n            cells.push(cell);\n            cellValues[cellValue] = cells;\n\n            // Set an error status on all duplicate cells, if there are any\n            if (cells.length > 1) {\n                cells.forEach(cell => cell.setErrorState(true));\n            }\n        });\n    };\n\n    /**\n     * See if any of the cells contain a value\n     * @param {Number} value\n     * @return {boolean}\n     */\n    self.containsValue = value => {\n        value = parseInt(value, 10);\n        const cells = self.getCells();\n\n        for (let i = 0; i < cells.length; i++) {\n            if (cells[i].hasValue(value)) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} rowNumber\n * @constructor\n */\nexport default function GridRow(rowNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _rowNumber = rowNumber;\n\n    /**\n     * Get the cell numbers that self row has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        const rowIndex = _rowNumber - 1;\n\n        for (let i = 1; i < 10; i++) {\n            numbers.push(i + (rowIndex * 9));\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} columnNumber\n * @constructor\n */\nexport default function GridColumn(columnNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based row number in the grid\n     * @type {number}\n     * @private\n     */\n    let _columnNumber = columnNumber;\n\n    /**\n     * Get the cell numbers that self column has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const numbers = [];\n        let number = _columnNumber;\n\n        // Add the first cell number\n        numbers.push(number);\n\n        // Add 8 numbers, each incremented by 9\n        for (let j = 0; j < 8; j++) {\n            number += 9;\n            numbers.push(number);\n        }\n\n        return numbers;\n    };\n}\n","import {trait} from '../functions';\nimport HasGridCells from '../Traits/HasGridCells';\n\n/**\n * @param {number} boxNumber\n * @constructor\n */\nexport default function GridBox(boxNumber) {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * The 1-based box number in the grid\n     * @type {number}\n     * @private\n     */\n    let _boxNumber = boxNumber;\n\n    /**\n     * Get the cell numbers that self box has\n     * @return {Array}\n     */\n    self.getCellNumbers = () => {\n        const boxIndex = _boxNumber - 1;\n        // The row index of the box (0, 1 or 2)\n        const boxRowIndex = Math.floor(boxIndex / 3);\n\n        // Determine the top-left number of the 3x3 box\n        let topLeftNumber = boxIndex * 3;\n        topLeftNumber += boxRowIndex * 18;\n        // Make the number 1-based\n        topLeftNumber++;\n\n        // Get cell numbers,\n        // based on the top-left number in the box\n        const numbers = [];\n        for (let i = 0; i < 3; i++) {\n            numbers.push(topLeftNumber);\n            numbers.push(++topLeftNumber);\n            numbers.push(++topLeftNumber);\n            topLeftNumber += 7;\n        }\n\n        return numbers;\n    };\n}\n","import GridCell from '../Grid/GridCell';\n\n/**\n * @param {GridCell} gridCell\n * @constructor\n */\nexport default function GridCellEventHandler(gridCell) {\n    const self = this;\n\n    /**\n     * The cell to register event handlers for\n     * @type {GridCell}\n     * @private\n     */\n    const _gridCell = gridCell;\n\n    /**\n     * Register event handlers for a grid cell\n     * @return {void}\n     */\n    self.register = () => {\n        _registerMouseDownEvent();\n        _registerMouseEnterEvent();\n        _registerMouseUpEvent();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseDownEvent = () => {\n        _gridCell.getElement().addEventListener('mousedown', () => {\n            if (Sudoku.controls.ctrlKeyIsPressed()) {\n                // Toggle the selected status when clicked, if the ctrl key is pressed\n                _gridCell.setSelectedState(! _gridCell.isSelected());\n            } else {\n                // Select only this cell, if the ctrl key is not pressed\n                Sudoku.grid.deselectAllCells();\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseEnterEvent = () => {\n        _gridCell.getElement().addEventListener('mouseenter', () => {\n            // Allow multiple cells to be selected\n            if (Sudoku.controls.mouseIsPressed()) {\n                _gridCell.setSelectedState(true);\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseUpEvent = () => {\n        // On mouse up, this is the last selected cell\n        _gridCell.getElement().addEventListener(\n            'mouseup',\n            () => Sudoku.grid.setLastNavigatedCell(_gridCell)\n        );\n    };\n}\n","import GridCell from '../GridCell';\n\n/**\n * @param {GridCell} cell\n * @constructor\n */\nexport default function PencilMarksInterface(cell) {\n    const self = this;\n\n    /**\n     * The cell to apply pencil marks to\n     * @type {GridCell}\n     */\n    self.cell = cell;\n\n    /**\n     * The pencil mark digits\n     * @type {number[]}\n     */\n    self.digits = [];\n\n    /**\n     * @return {number[]}\n     */\n    self.get = () => self.digits;\n\n    /**\n     * Add or remove one 1 digit\n     * @param {number} digit\n     * @return {void}\n     */\n    self.toggleDigit = digit => {\n        throw new Error(\"'toggleDigit' method is not implemented in the pencil marks object\");\n    };\n\n    /**\n     * Replace all digits\n     * @param {number[]} digits\n     * @return {void}\n     */\n    self.setDigits = digits => {\n        throw new Error(\"'setDigits' method is not implemented in the pencil marks object\");\n    };\n\n    /**\n     * See if a pencil mark exists\n     * @param {number} digit\n     * @return {boolean}\n     */\n    self.has = digit => (self.get().indexOf(digit) > -1);\n\n    /**\n     * See if any pencil marks exist\n     * @return {boolean}\n     */\n    self.hasAny = () => (self.get().length > 0);\n\n    /**\n     * Show the pencil marks in the cell\n     * @return {void}\n     */\n    self.show = () => {\n        throw new Error(\"'show' method is not implemented in the pencil marks object\");\n    };\n}\n","import {extend} from '../../functions';\nimport PencilMarksInterface from './PencilMarksInterface';\nimport GridCell from '../GridCell';\n\nextend(CornerMarks, PencilMarksInterface);\n\n/**\n * @inheritDoc\n */\nexport default function CornerMarks(cell) {\n    const self = this;\n    PencilMarksInterface.call(self, cell);\n\n    /**\n     * @inheritDoc\n     */\n    self.toggleDigit = digit => {\n        // Setting corner marks is disabled when the cell is prefilled\n        if (self.cell.isPrefilled() === true) {\n            return;\n        }\n\n        // Don't set a corner mark, if a value is filled in\n        if (self.cell.getValue() !== null) {\n            return;\n        }\n\n        // Remove if the digit exists, otherwise add it\n        const cornerMarks = self.get();\n        const existingIndex = cornerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            cornerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && cornerMarks.length < GridCell.MAX_CORNER_MARKS) {\n                cornerMarks.push(digit);\n            }\n        }\n\n        self.setDigits(cornerMarks);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    self.setDigits = digits => {\n        // Don't set corner marks, if there are too many\n        if (digits.length > GridCell.MAX_CORNER_MARKS) {\n            return;\n        }\n\n        self.digits = digits;\n        self.show();\n    };\n\n    /**\n     * @inheritDoc\n     */\n    self.show = () => {\n        // Clear all corner marks first\n        const allElements = self.cell.getElement().getElementsByClassName('corner-mark');\n        for (let i = 0; i < allElements.length; i++) {\n            allElements[i].innerText = null;\n        }\n\n        // Show the corner marks\n        self.get()\n            // Sort ascending\n            .sort((a, b) => a - b)\n            .forEach((item, index) => {\n                document.getElementById(`corner-mark-${self.cell.getCellNumber()}-${index + 1}`)\n                    .innerText = item.toString(10);\n            });\n    };\n}\n","import {extend} from '../../functions';\nimport PencilMarksInterface from './PencilMarksInterface';\nimport GridCell from '../GridCell';\n\nextend(CenterMarks, PencilMarksInterface);\n\n/**\n * @inheritDoc\n */\nexport default function CenterMarks(cell) {\n    const self = this;\n    PencilMarksInterface.call(self, cell);\n\n    /**\n     * Automatically filled in candidates\n     * @type {number[]}\n     * @private\n     */\n    let _autoCandidates = [];\n\n    /**\n     * @return {number[]}\n     */\n    self.getAutoCandidates = () => _autoCandidates;\n\n    /**\n     * @inheritDoc\n     */\n    self.toggleDigit = digit => {\n        // Setting center marks is disabled when the cell is prefilled,\n        // or when auto-candidate mode is on\n        if (\n            self.cell.isPrefilled() === true\n            || Sudoku.settings.autoCandidateModeState() === true\n        ) {\n            return;\n        }\n\n        // Don't set a center mark, if a value is filled in\n        if (self.cell.getValue() !== null) {\n            return;\n        }\n\n        // Remove if the digit exists, otherwise add it\n        const centerMarks = self.get();\n        const existingIndex = centerMarks.indexOf(digit);\n        if (existingIndex > -1) {\n            centerMarks.splice(existingIndex, 1);\n        } else {\n            // Don't add if the maximum amount is reached\n            if (digit !== null && centerMarks.length < GridCell.MAX_CENTER_MARKS) {\n                centerMarks.push(digit);\n            }\n        }\n\n        self.setDigits(centerMarks);\n    };\n\n    /**\n     * @inheritDoc\n     * @param {boolean} useAutoCandidates Whether to use auto-candidates, or normal center marks\n     */\n    self.setDigits = (digits, useAutoCandidates = false) => {\n        // Empty the candidates, if there are too many\n        if (useAutoCandidates === true && digits.length > GridCell.MAX_CENTER_MARKS) {\n            digits = [];\n        }\n\n        // Don't set pencil marks, if there are too many\n        if (digits.length > GridCell.MAX_CENTER_MARKS) {\n            return;\n        }\n\n        (useAutoCandidates === true)\n            ? _autoCandidates = digits\n            : self.digits = digits;\n\n        self.show(useAutoCandidates);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    self.has = digit => {\n        const centerMarks = (Sudoku.settings.autoCandidateModeState() === true)\n            ? self.getAutoCandidates()\n            : self.get();\n\n        return (centerMarks.indexOf(digit) > -1);\n    };\n\n    /**\n     * @inheritDoc\n     * @param {boolean} useAutoCandidates Whether to use auto-candidates, or normal center marks\n     */\n    self.show = (useAutoCandidates = false) => {\n        let centerMarks = (useAutoCandidates === true)\n            ? self.getAutoCandidates()\n            : self.get();\n\n        centerMarks = centerMarks\n            // Sort ascending\n            .sort((a, b) => a - b)\n            // Concatenate the numbers\n            .join('');\n\n        // Show the pencil marks\n        self.cell.getElement()\n            .getElementsByClassName('center-marks')[0]\n            .innerText = centerMarks;\n    };\n}\n","import GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport GridCellEventHandler from '../EventHandlers/GridCellEventHandler';\nimport InputMode from '../InputMode';\nimport CornerMarks from './PencilMarks/CornerMarks';\nimport CenterMarks from './PencilMarks/CenterMarks';\n\n/**\n * The maximum amount of pencil marks\n * @type {number}\n * @static\n */\nGridCell.MAX_CORNER_MARKS = 8;\nGridCell.MAX_CENTER_MARKS = 5;\n\n/**\n * @param {number} cellNumber\n * @constructor\n */\nexport default function GridCell(cellNumber) {\n    const self = this;\n\n    /**\n     * The 1-based cell number in the grid\n     * @type {number}\n     * @private\n     */\n    const _cellNumber = cellNumber;\n\n    /**\n     * The HTML element that is the cell\n     * @type {HTMLLIElement|null}\n     * @private\n     */\n    let _element = null;\n\n    /**\n     * The corner marks of the cell\n     * @type {CornerMarks}\n     * @private\n     */\n    const _cornerMarks = new CornerMarks(self);\n\n    /**\n     * The center marks of the cell\n     * @type {CenterMarks}\n     * @private\n     */\n    const _centerMarks = new CenterMarks(self);\n\n    /**\n     * The row the cell belongs to\n     * @type {GridRow|null}\n     * @private\n     */\n    let _gridRow = null;\n\n    /**\n     * The column the cell belongs to\n     * @type {GridColumn|null}\n     * @private\n     */\n    let _gridColumn = null;\n\n    /**\n     * The 3x3 box the cell belongs to\n     * @type {GridBox|null}\n     * @private\n     */\n    let _gridBox = null;\n\n    /**\n     * Whether the cell value is set at the start\n     * @type {boolean}\n     * @private\n     */\n    let _isPrefilled = false;\n\n    /**\n     * The background color number of the cell\n     * @type {number}\n     * @private\n     */\n    let _colorNumber = 1;\n\n    /**\n     * The value of the cell\n     * @type {number|null}\n     * @private\n     */\n    let _value = null;\n\n    /**\n     * Whether the cell is currently selected\n     * @type {boolean}\n     * @private\n     */\n    let _isSelected = false;\n\n    /**\n     * Whether the cell is currently highlighted\n     * @type {boolean}\n     * @private\n     */\n    let _isHighlighted = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        // Get the HTML cell element\n        _element = document.getElementById(`grid-cell-${self.getCellNumber()}`);\n        if (_element === null) {\n            throw new Error(`Cell element with ID 'grid-cell-${self.getCellNumber()}' not found`);\n        }\n\n        // Register event handlers\n        const eventHandler = new GridCellEventHandler(self);\n        eventHandler.register();\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getCellNumber = () => _cellNumber;\n\n    /**\n     * @return {HTMLLIElement|null}\n     */\n    self.getElement = () => _element;\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.isPrefilled = (state = null) => {\n        if (state !== null) {\n            _isPrefilled = state;\n\n            // Toggle the CSS class of the prefilled state\n            const toggleMethod = (state === true) ? 'add' : 'remove';\n            self.getElement().classList[toggleMethod]('is-prefilled');\n        }\n\n        return _isPrefilled;\n    };\n\n    /**\n     * @return {number}\n     */\n    self.getColorNumber = () => _colorNumber;\n\n    /**\n     * Wrapper for value, corner-marks and center-marks setting\n     * @param {number|null} digit\n     * @param {number|null} mode The input mode, uses current mode by default\n     * @return {void}\n     * @see InputMode for the mode constants\n     */\n    self.setDigit = (digit, mode = null) => {\n        if (Sudoku.settings.designModeState() === true) {\n            // Remove all pencil marks\n            self.getCornerMarks().setDigits([]);\n            self.getCenterMarks().setDigits([]);\n\n            self.toggleValue(digit);\n            self.isPrefilled(true);\n            return;\n        }\n\n        // Prefilled cells are not editable\n        if (self.isPrefilled() === true) {\n            return;\n        }\n\n        // Remove error state in manual error checking mode\n        if (! Sudoku.settings.autoErrorCheckingState()) {\n            self.setErrorState(false);\n        }\n\n        // Use the current input mode, if null\n        if (mode === null) {\n            mode = Sudoku.inputMode.getMode();\n        }\n\n        // Null means deleting\n        if (digit === null) {\n            // Remove the marks only if no value is filled in\n            if (self.getValue() === null) {\n                self.getCornerMarks().setDigits([]);\n\n                // Don't remove player filled center marks in auto candidate mode\n                // Because they are unused and invisible\n                if (! Sudoku.settings.autoCandidateModeState()) {\n                    self.getCenterMarks().setDigits([]);\n                }\n            } else {\n                self.toggleValue(null);\n            }\n\n            return;\n        }\n\n        switch (mode) {\n            case InputMode.MODE_VALUE:\n                self.toggleValue(digit);\n                break;\n            case InputMode.MODE_CORNER:\n                self.getCornerMarks().toggleDigit(digit);\n                break;\n            case InputMode.MODE_CENTER:\n                self.getCenterMarks().toggleDigit(digit);\n                break;\n        }\n    };\n\n    /**\n     * @return {number|null}\n     */\n    self.getValue = () => _value;\n\n    /**\n     * @param {number|null} digit\n     * @return {void}\n     */\n    self.toggleValue = digit => {\n        // Remove the value, if the same digit is entered\n        if (digit === self.getValue()) {\n            digit = null;\n        }\n\n        // Show or hide the pencil marks\n        _toggleMarksVisibility(digit === null);\n\n        // Show the value on screen\n        self.getElement().getElementsByClassName('cell-value')[0].innerText = digit;\n\n        _value = digit;\n\n        // Highlight other cells\n        Sudoku.gridCellHighlighter.highlightRelatedCells();\n\n        // Remove pencil marks of related cells, if needed\n        if (Sudoku.settings.autoRemovePencilMarksState() === true) {\n            _removeRelatedPencilMarks(digit);\n        }\n\n        // Show possible candidates if needed\n        if (Sudoku.settings.autoCandidateModeState() === true) {\n            Sudoku.grid.determineCandidates();\n        }\n    };\n\n    /**\n     * Check if the cell has a value\n     * @param {number|null} digit\n     * @return {boolean}\n     */\n    self.hasValue = (digit = null) => {\n        // Check if the cell has any value\n        if (digit === null) {\n            return (self.getValue() !== null);\n        }\n\n        // Or check for a specific value\n        return (self.getValue() === digit);\n    };\n\n    /**\n     * Remove a pencil mark\n     * @param type 'corner' or 'center'\n     * @param digit\n     * @return {void}\n     */\n    self.removePencilMark = (type, digit) => {\n        if (['corner', 'center'].indexOf(type) < 0) {\n            throw new Error(`Invalid pencil mark type given, only 'corner' and 'center' are valid, '${type}' given`);\n        }\n\n        const pencilMarksObject = (type === 'corner')\n            ? self.getCornerMarks()\n            : self.getCenterMarks();\n\n        // Only remove the digit, if it exists\n        const pencilMarks = pencilMarksObject.get();\n        const digitIndex = pencilMarks.indexOf(digit);\n        if (digitIndex > -1) {\n            pencilMarks.splice(digitIndex, 1);\n            pencilMarksObject.setDigits(pencilMarks);\n        }\n    };\n\n    /**\n     * Remove pencil marks of related cells, based on cell value\n     * @param {number} digit\n     * @return {void}\n     * @private\n     */\n    const _removeRelatedPencilMarks = digit => {\n        self.getRow().getCells()\n            .concat(self.getColumn().getCells())\n            .concat(self.getBox().getCells())\n            .forEach(cell => {\n                cell.removePencilMark('corner', digit);\n                cell.removePencilMark('center', digit);\n            });\n    };\n\n    /**\n     * Toggle the visibility of the pencil marks\n     * @param {boolean} show\n     * @private\n     */\n    const _toggleMarksVisibility = show => {\n        const toggleMethod = show ? 'remove' : 'add';\n\n        // Toggle the corner marks\n        for (let i = 1; i < 9; i++) {\n            document.getElementById(`corner-mark-${self.getCellNumber()}-${i}`)\n                .classList[toggleMethod]('hide');\n        }\n\n        // Toggle the center marks\n        self.getElement().getElementsByClassName('center-marks')[0]\n            .classList[toggleMethod]('hide');\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isSelected = () => _isSelected;\n\n    /**\n     * @param {boolean} selected\n     * @return {void}\n     */\n    self.setSelectedState = selected => {\n        const toggleMethod = selected ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-selected');\n\n        // Don't add duplicates to the list\n        if (selected && ! self.isSelected()) {\n            Sudoku.grid.addSelectedCell(self);\n        }\n\n        _isSelected = selected;\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isHighlighted = () => _isHighlighted;\n\n    /**\n     * @param {boolean} highlighted\n     * @return {void}\n     */\n    self.setHighlightedState = highlighted => {\n        const toggleMethod = highlighted ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('is-highlighted');\n\n        // Don't add duplicates to the list\n        if (highlighted && ! self.isHighlighted()) {\n            Sudoku.gridCellHighlighter.addHighlightedCell(self);\n        }\n\n        _isHighlighted = highlighted;\n    };\n\n    /**\n     * @return {CornerMarks}\n     */\n    self.getCornerMarks = () => _cornerMarks;\n\n    /**\n     * @return {CenterMarks}\n     */\n    self.getCenterMarks = () => _centerMarks;\n\n    /**\n     * @return {GridRow|null}\n     */\n    self.getRow = () => _gridRow;\n\n    /**\n     * @param {GridRow} row\n     * @return {GridRow}\n     */\n    self.setRow = row => _gridRow = row;\n\n    /**\n     * @return {GridColumn|null}\n     */\n    self.getColumn = () => _gridColumn;\n\n    /**\n     * @param {GridColumn} column\n     * @return {GridColumn}\n     */\n    self.setColumn = column => _gridColumn = column;\n\n    /**\n     * @return {GridBox|null}\n     */\n    self.getBox = () => _gridBox;\n\n    /**\n     * @param {GridBox} box\n     * @return {GridBox}\n     */\n    self.setBox = box => _gridBox = box;\n\n    /**\n     * Set the error status of the element\n     * @param {boolean} on\n     * @return {void}\n     */\n    self.setErrorState = on => {\n        const toggleMethod = on ? 'add' : 'remove';\n        self.getElement().classList[toggleMethod]('has-error');\n    };\n\n    /**\n     * Get the state of the cell\n     * @return {string}\n     */\n    self.getState = () => 'n' + self.getCellNumber()\n        + (self.isPrefilled() ? 'p' : '')\n        + 'v' + self.getValue()\n        + 'c' + self.getColorNumber()\n        + 'cr' + self.getCornerMarks().get().join('')\n        + 'cn' + self.getCenterMarks().get().join('');\n}\n","export default function CommandInterface() {\n    const self = this;\n\n    /**\n     * Execute the command\n     * @return {void}\n     */\n    self.execute = () => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../functions';\nimport CommandInterface from './CommandInterface';\n\nextend(UndoableCommandInterface, CommandInterface);\n\nexport default function UndoableCommandInterface() {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * Undo the command\n     * @return {void}\n     */\n    self.undo = () => {\n        throw new Error(\"'undo' method is not implemented in the command\");\n    };\n}\n","import {extend} from '../../functions';\nimport UndoableCommandInterface from '../UndoableCommandInterface';\nimport InputMode from '../../InputMode';\n\nextend(ChangeDigitCommand, UndoableCommandInterface);\n\n/**\n * @param {number|null} digit\n * @constructor\n */\nexport default function ChangeDigitCommand(digit) {\n    const self = this;\n    UndoableCommandInterface.call(self);\n\n    /**\n     * The digit to apply to cell(s)\n     * @type {number|null}\n     * @private\n     */\n    const _digit = digit;\n\n    /**\n     * The cells to apply the digit to\n     * @type {GridCell[]}\n     * @private\n     */\n    const _cells = Sudoku.grid.getSelectedCells();\n\n    /**\n     * The input mode for the digit\n     * @type {number}\n     * @private\n     */\n    const _inputMode = Sudoku.inputMode.getMode();\n\n    /**\n     * Contains the state of cells, before changing the digit\n     * @type {object}\n     * @private\n     */\n    const _cellsState = (() => {\n        // Pairs of cellNumber:{value, cornerMarks, centerMarks}\n        const state = {};\n\n        // Collect the state of all cells\n        _cells.forEach(cell => {\n            state[cell.getCellNumber()] = {\n                isPrefilled: cell.isPrefilled(),\n                value: cell.getValue(),\n                // Copy the array, because they go by reference\n                cornerMarks: cell.getCornerMarks().get().map(item => item),\n                centerMarks: cell.getCenterMarks().get().map(item => item),\n            };\n        });\n\n        return state;\n    })();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        _cells.forEach(cell => cell.setDigit(_digit, _inputMode));\n\n        if (Sudoku.settings.autoErrorCheckingState()) {\n            Sudoku.grid.checkForErrors();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    self.undo = () => {\n        // Apply the previous values to the cell(s)\n        _cells.forEach(cell => {\n            const state = _cellsState[cell.getCellNumber()];\n\n            cell.isPrefilled(state.isPrefilled);\n            cell.toggleValue(state.value);\n            // Copy the array, because they go by reference\n            cell.getCornerMarks().setDigits(state.cornerMarks.map(item => item));\n            cell.getCenterMarks().setDigits(state.centerMarks.map(item => item));\n        });\n\n        if (Sudoku.settings.autoErrorCheckingState() === true) {\n            Sudoku.grid.checkForErrors();\n        }\n    };\n}\n","import {extend} from '../functions';\nimport CommandInterface from './CommandInterface';\n\nextend(TogglableCommandInterface, CommandInterface);\n\nexport default function TogglableCommandInterface() {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * The current state of the command\n     * @type {boolean|function|null}\n     * @private\n     */\n    self.state = null;\n\n    /**\n     * @inheritDoc\n     * @param {boolean} state\n     */\n    self.execute = state => {\n        throw new Error(\"'execute' method is not implemented in the command\");\n    };\n\n    /**\n     * Toggle between states of the command\n     * @return {void}\n     */\n    self.toggle = () => {\n        const currentState = ((typeof self.state).toLowerCase() === 'function')\n            ? self.state()\n            : self.state;\n\n        if (currentState === null) {\n            throw new Error('The command needs an (initial) boolean state, it can be a function that returns a boolean');\n        }\n\n        self.execute(! currentState);\n    };\n}\n","import {extend} from '../../functions';\nimport CommandInterface from '../CommandInterface';\nimport PauseGameCommand from '../PauseGameCommand';\n\nextend(OpenModalCommand, CommandInterface);\n\n/**\n * @param {string} modalId ID of the modal dialog to open\n * @constructor\n */\nexport default function OpenModalCommand(modalId) {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    const _modalId = modalId;\n\n    /**\n     * The modal dialog to show\n     * @type {HTMLElement}\n     * @private\n     */\n    const _modalElement = document.getElementById(_modalId);\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        Sudoku.modal.setCurrentModalId(_modalId);\n        _modalElement.classList.add('show');\n\n        (new PauseGameCommand()).execute(true);\n    };\n}\n","import {extend} from '../functions';\nimport TogglableCommandInterface from './TogglableCommandInterface';\nimport OpenModalCommand from './Modal/OpenModalCommand';\n\nextend(PauseGameCommand, TogglableCommandInterface);\n\nexport default function PauseGameCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.game.isPaused();\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    const _bodyElement = document.getElementById('page-body');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const pauseIcon = document.getElementById('game-pause-icon');\n        const resumeIcon = document.getElementById('game-resume-icon');\n\n        if (state === true) {\n            Sudoku.clock.pause();\n            _bodyElement.classList.add('is-paused');\n\n            // Toggle the pause/resume icons\n            pauseIcon.classList.add('hide');\n            resumeIcon.classList.remove('hide');\n\n            // Only open the pause modal, if there is no modal open yet\n            if (Sudoku.modal.openState() === false) {\n                const openModalCommand = new OpenModalCommand('pause-modal');\n                openModalCommand.execute();\n            }\n        } else {\n            Sudoku.clock.unpause();\n            _bodyElement.classList.remove('is-paused');\n\n            // Toggle the pause/resume icons\n            pauseIcon.classList.remove('hide');\n            resumeIcon.classList.add('hide');\n        }\n\n        Sudoku.game.setPausedState(state);\n    };\n}\n","import {extend} from '../../functions';\nimport CommandInterface from '../CommandInterface';\nimport PauseGameCommand from '../PauseGameCommand';\n\nextend(CloseAllModalsCommand, CommandInterface);\n\n/**\n * @constructor\n */\nexport default function CloseAllModalsCommand() {\n    const self = this;\n    CommandInterface.call(self);\n\n    /**\n     * @type {PauseGameCommand}\n     * @private\n     */\n    const _pauseGameCommand = new PauseGameCommand();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = () => {\n        // Close all the modals\n        const modals = document.getElementsByClassName('modal');\n        for (let i = 0; i < modals.length; i++) {\n            modals[i].classList.remove('show');\n        }\n\n        _pauseGameCommand.execute(false);\n        Sudoku.modal.setCurrentModalId(null);\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(ShowClockCommand, TogglableCommandInterface);\n\nexport default function ShowClockCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.clockState();\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    const _clockElement = document.getElementById('clock-wrapper');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-show-clock');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'remove' : 'add';\n        _clockElement.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.clockState(state);\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(AutoErrorCheckingCommand, TogglableCommandInterface);\n\nexport default function AutoErrorCheckingCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoErrorCheckingState();\n\n    /**\n     * The manual error checking button\n     * @type {HTMLElement}\n     * @private\n     */\n    const _errorCheckingButton = document.getElementById('check-errors');\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-auto-error-checking');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        const toggleMethod = state ? 'add' : 'remove';\n        _errorCheckingButton.classList[toggleMethod]('hide');\n\n        _toggleCheckbox.checked = state;\n\n        Sudoku.settings.autoErrorCheckingState(state);\n\n        // Check or remove errors\n        (state === true)\n            ? Sudoku.grid.checkForErrors()\n            : Sudoku.grid.removeAllErrors();\n    };\n}\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(AutoRemovePencilMarksCommand, TogglableCommandInterface);\n\nexport default function AutoRemovePencilMarksCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoRemovePencilMarksState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-auto-remove-pencil-marks');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.autoRemovePencilMarksState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightRowCommand, TogglableCommandInterface);\n\nexport default function HighlightRowCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightRowState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-row');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightRowState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightColumnCommand, TogglableCommandInterface);\n\nexport default function HighlightColumnCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightColumnState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-column');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightColumnState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightBoxCommand, TogglableCommandInterface);\n\nexport default function HighlightBoxCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightBoxState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-box');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightBoxState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightValueCommand, TogglableCommandInterface);\n\nexport default function HighlightValueCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightValueState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-value');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightValueState(state);\n    };\n};\n","import {extend} from '../../functions';\nimport TogglableCommandInterface from '../TogglableCommandInterface';\n\nextend(HighlightPencilMarksCommand, TogglableCommandInterface);\n\nexport default function HighlightPencilMarksCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.highlightPencilMarksState();\n\n    /**\n     * The checkbox that toggles the setting\n     * @type {HTMLElement}\n     * @private\n     */\n    const _toggleCheckbox = document.getElementById('setting-highlight-pencil-marks');\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        _toggleCheckbox.checked = state;\n        Sudoku.settings.highlightPencilMarksState(state);\n    };\n};\n","import {extend} from '../functions';\nimport TogglableCommandInterface from './TogglableCommandInterface';\n\nextend(AutoCandidateModeCommand, TogglableCommandInterface);\n\nexport default function AutoCandidateModeCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.autoCandidateModeState();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        Sudoku.settings.autoCandidateModeState(state);\n        Sudoku.inputMode.triggerAutoCandidateModeActions(state);\n\n        (state === true)\n            ? Sudoku.grid.determineCandidates()\n            : Sudoku.grid.removeCandidates();\n    };\n}\n","import {extend} from '../functions';\nimport TogglableCommandInterface from './TogglableCommandInterface';\n\nextend(DesignModeCommand, TogglableCommandInterface);\n\nexport default function DesignModeCommand() {\n    const self = this;\n    TogglableCommandInterface.call(self);\n\n    /**\n     * @inheritDoc\n     */\n    self.state = () => Sudoku.settings.designModeState();\n\n    /**\n     * @inheritDoc\n     */\n    self.execute = state => {\n        Sudoku.settings.designModeState(state);\n        Sudoku.inputMode.triggerDesignModeActions(state);\n    };\n}\n","import Controls from './Controls';\nimport InputMode from './InputMode';\nimport Grid from './Grid/Grid';\nimport Clock from './Clock';\nimport DocumentEventHandler from './EventHandlers/DocumentEventHandler';\nimport CommandHistory from './Commands/CommandHistory';\nimport Meta from './Meta';\nimport Modal from './Modal';\nimport Settings from './Settings';\nimport SettingsEventHandler from './EventHandlers/SettingsEventHandler';\nimport ActionsEventHandler from './EventHandlers/ActionsEventHandler';\nimport GridCellHighlighter from './Grid/GridCellHighlighter';\nimport Game from './Game';\n\n// 'Namespace' of the project\nwindow.Sudoku = {\n    game: new Game(),\n    settings: new Settings(),\n    history: new CommandHistory(),\n    meta: new Meta(),\n    controls: new Controls(),\n    inputMode: new InputMode(),\n    gridCellHighlighter: new GridCellHighlighter(),\n    grid: new Grid(),\n    clock: new Clock(),\n    modal: new Modal(),\n    documentEventHandler: new DocumentEventHandler(),\n    settingsEventHandler: new SettingsEventHandler(),\n    actionsEventHandler: new ActionsEventHandler(),\n};\n\nSudoku.settings.init();\nSudoku.settingsEventHandler.init();\nSudoku.clock.init();\nSudoku.modal.init();\nSudoku.meta.init();\nSudoku.inputMode.init();\nSudoku.controls.init();\nSudoku.grid.init();\nSudoku.documentEventHandler.init();\nSudoku.actionsEventHandler.init();\n\n/*\nconst LZString = require('lz-string');\n\nfunction logResults(state, label = null) {\n    const result1 = LZString.compress(state);\n    const result2 = LZString.compressToEncodedURIComponent(state);\n\n    console.group(label || 'Compression result');\n    console.log('Original state', state.length, state);\n    console.log('Compressed state', result1.length, result1);\n    console.log('URL-encoded compressed state', result2.length, result2);\n    console.groupEnd();\n}\n\n// The state from the application\n// logResults(JSON.stringify(Sudoku.grid.getState()), 'App');\n\n// 3 digits per cell: 2 digits for cell number, 1 for value\nconst threeDigits = '038149156382416811295104457093378472567629123781806';\nlogResults(threeDigits, '3 digits per cell');\n\n// 81 numbers, representing every cell value (0 = empty)\nconst eightyOneNumbers = '000300004000000056780000001230000045000098700012000045000005600300002300001320004';\nlogResults(eightyOneNumbers, '81 numbers');\n\n// A 1 as a counter, so the the digit 2 is '11', and 7 is '1111111' (delimited by a comma)\nconst csvOnes = eightyOneNumbers.split('')\n    .map(number => {\n        number = parseInt(number, 10);\n        return '1'.repeat(number);\n    })\n    .join(',');\nlogResults(csvOnes, 'CSV, counting with ones');\n\n// Grid cells state\nconst cellsState = ('n' + '1'.repeat(23) // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v' + '1'.repeat(7) // Cell value\n    + 'c' + '1'.repeat(4) // Color number 4\n    + 'cr' + [3, 4, 6, 8].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].map(digit => {\n        digit = parseInt(digit, 10);\n        return '1'.repeat(digit);\n    }).join(',') // Center pencil marks\n).repeat(81) // For 81 cells\n// 366 length compressed, 975 length URL-encoded compressed\nlogResults(cellsState, 'Cells state v1');\n\n// Grid cells state, normal way\nconst cellsState2 = ('n23' // Cell number\n    + 'p' // Is prefilled, empty string when not prefilled\n    + 'v7' // Cell value\n    + 'c4' // Color number 4\n    + 'cr' + [3, 4, 6, 8].join('') // Corner pencil marks\n    + 'cn' + [1, 2, 7, 9].join('') // Center pencil marks\n).repeat(81) // For 81 cells\n// 118 length compressed, 315 length URL-encoded compressed\nlogResults(cellsState2, 'Cells state v2');\n//*/\n","export default function Game() {\n    const self = this;\n\n    /**\n     * Indicates whether the game is paused\n     * @type {boolean}\n     * @private\n     */\n    let _isPaused = false;\n\n    /**\n     * @return {boolean}\n     */\n    self.isPaused = () => _isPaused;\n\n    /**\n     * @param {boolean} state\n     * @return {boolean}\n     */\n    self.setPausedState = state => _isPaused = state;\n}\n","import ShowClockCommand from './Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from './Commands/Settings/AutoErrorCheckingCommand';\nimport AutoRemovePencilMarksCommand from './Commands/Settings/AutoRemovePencilMarksCommand';\nimport HighlightRowCommand from './Commands/Settings/HighlightRowCommand';\nimport HighlightColumnCommand from './Commands/Settings/HighlightColumnCommand';\nimport HighlightBoxCommand from './Commands/Settings/HighlightBoxCommand';\nimport HighlightValueCommand from './Commands/Settings/HighlightValueCommand';\nimport HighlightPencilMarksCommand from './Commands/Settings/HighlightPencilMarksCommand';\n\nexport default function Settings() {\n    const self = this;\n\n    /**\n     * Indicates whether the clock is shown\n     * @type {boolean}\n     * @private\n     */\n    let _clockState;\n\n    /**\n     * Indicates whether automatic error checking is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _autoErrorCheckingState;\n\n    /**\n     * Indicates whether pencil marks should automatically be removed\n     * @type {boolean}\n     * @private\n     */\n    let _autoRemovePencilMarksState = false;\n\n    /**\n     * Indicates whether highlighting rows is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightRowState;\n\n    /**\n     * Indicates whether highlighting columns is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightColumnState;\n\n    /**\n     * Indicates whether highlighting 3x3 boxes is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightBoxState;\n\n    /**\n     * Indicates whether highlighting cells with the same value is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightValueState;\n\n    /**\n     * Indicates whether highlighting cells with the same value (pencil marks) is enabled\n     * @type {boolean}\n     * @private\n     */\n    let _highlightPencilMarksState;\n\n    /**\n     * Indicates whether auto-candidate mode is on\n     * @type {boolean}\n     * @private\n     */\n    let _autoCandidateModeState = false;\n\n    /**\n     * Indicates whether puzzle design mode is on\n     * @type {boolean}\n     * @private\n     */\n    let _designModeState = false;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        // Initialize the settings in local storage if needed\n        if (localStorage.getItem('settings') === null) {\n            localStorage.setItem('settings', JSON.stringify({}));\n        }\n\n        _fromLocalStorage();\n        _applySettings();\n    };\n\n    /**\n     * Get settings stored in local storage\n     * @return {void}\n     * @private\n     */\n    const _fromLocalStorage = () => {\n        const settings = JSON.parse(localStorage.getItem('settings'));\n\n        _clockState = (settings.clock !== undefined)\n            ? settings.clock\n            : true;\n\n        _autoErrorCheckingState = (settings.autoErrorChecking !== undefined)\n            ? settings.autoErrorChecking\n            : true;\n\n        _autoRemovePencilMarksState = (settings.autoRemovePencilMarks !== undefined)\n            ? settings.autoRemovePencilMarks\n            : false;\n\n        _highlightRowState = (settings.highlightRow !== undefined)\n            ? settings.highlightRow\n            : true;\n\n        _highlightColumnState = (settings.highlightColumn !== undefined)\n            ? settings.highlightColumn\n            : true;\n\n        _highlightBoxState = (settings.highlightBox !== undefined)\n            ? settings.highlightBox\n            : true;\n\n        _highlightValueState = (settings.highlightValue !== undefined)\n            ? settings.highlightValue\n            : true;\n\n        _highlightPencilMarksState = (settings.highlightPencilMarks !== undefined)\n            ? settings.highlightPencilMarks\n            : true;\n    };\n\n    /**\n     * Export settings to local storage\n     * @return {void}\n     * @private\n     */\n    const _toLocalStorage = () => {\n        localStorage.setItem('settings', JSON.stringify({\n            clock: self.clockState(),\n            autoErrorChecking: self.autoErrorCheckingState(),\n            autoRemovePencilMarks: self.autoRemovePencilMarksState(),\n            highlightRow: self.highlightRowState(),\n            highlightColumn: self.highlightColumnState(),\n            highlightBox: self.highlightBoxState(),\n            highlightValue: self.highlightValueState(),\n            highlightPencilMarks: self.highlightPencilMarksState(),\n        }));\n    };\n\n    /**\n     * Apply the stored settings\n     * @return {void}\n     * @private\n     */\n    const _applySettings = () => {\n        (new ShowClockCommand()).execute(self.clockState());\n        (new AutoErrorCheckingCommand()).execute(self.autoErrorCheckingState());\n        (new AutoRemovePencilMarksCommand()).execute(self.autoRemovePencilMarksState());\n        (new HighlightRowCommand()).execute(self.highlightRowState());\n        (new HighlightColumnCommand()).execute(self.highlightColumnState());\n        (new HighlightBoxCommand()).execute(self.highlightBoxState());\n        (new HighlightValueCommand()).execute(self.highlightValueState());\n        (new HighlightPencilMarksCommand()).execute(self.highlightPencilMarksState());\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.clockState = (state = null) => {\n        if (state !== null) {\n            _clockState = state;\n            _toLocalStorage();\n        }\n\n        return _clockState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoErrorCheckingState = (state = null) => {\n        if (state !== null) {\n            _autoErrorCheckingState = state;\n            _toLocalStorage();\n        }\n\n        return _autoErrorCheckingState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoRemovePencilMarksState = (state = null) => {\n        if (state !== null) {\n            _autoRemovePencilMarksState = state;\n            _toLocalStorage();\n        }\n\n        return _autoRemovePencilMarksState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightRowState = (state = null) => {\n        if (state !== null) {\n            _highlightRowState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightRowState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightColumnState = (state = null) => {\n        if (state !== null) {\n            _highlightColumnState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightColumnState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightBoxState = (state = null) => {\n        if (state !== null) {\n            _highlightBoxState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightBoxState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightValueState = (state = null) => {\n        if (state !== null) {\n            _highlightValueState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightValueState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.highlightPencilMarksState = (state = null) => {\n        if (state !== null) {\n            _highlightPencilMarksState = state;\n            _toLocalStorage();\n        }\n\n        return _highlightPencilMarksState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.autoCandidateModeState = (state = null) => {\n        if (state !== null) {\n            _autoCandidateModeState = state;\n        }\n\n        return _autoCandidateModeState;\n    };\n\n    /**\n     * @param {boolean|null} state Setter if given, getter otherwise\n     * @return {boolean}\n     */\n    self.designModeState = (state = null) => {\n        if (state !== null) {\n            _designModeState = state;\n        }\n\n        return _designModeState;\n    };\n}\n","import UndoableCommandInterface from './UndoableCommandInterface';\n\nexport default function CommandHistory() {\n    const self = this;\n\n    /**\n     * The list of commands that have been executed\n     * @type {UndoableCommandInterface[]}\n     * @private\n     */\n    let _past = [];\n\n    /**\n     * The list of commands to redo\n     * @type {UndoableCommandInterface[]}\n     * @private\n     */\n    let _future = [];\n\n    /**\n     * Add a command to be executed\n     * @param {UndoableCommandInterface} command\n     * @param {boolean} clearFuture Whether to clear the future (redo) stack\n     * @return {number}\n     */\n    self.execute = (command, clearFuture = true) => {\n        if (! (command instanceof UndoableCommandInterface)) {\n            throw new Error('Command needs to have UndoableCommandInterface in its prototype chain');\n        }\n\n        command.execute();\n        _past.push(command);\n\n        // Clear the future (redo) list if needed\n        if (clearFuture) {\n            _future = [];\n        }\n    };\n\n    /**\n     * Undo the most recent command\n     * @return {void}\n     */\n    self.undo = () => {\n        // A command needs to exist\n        if (_past.length < 1) {\n            return;\n        }\n\n        // Undo the command\n        const command = _past.pop();\n        command.undo();\n\n        // Put the command in the future stack, for redoing\n        _future.push(command);\n    };\n\n    /**\n     * Execute the most recent command from the future stack\n     * @return {void}\n     */\n    self.redo = () => {\n        // A command needs to exist\n        if (_future.length < 1) {\n            return;\n        }\n\n        // Redo the command\n        const command = _future.pop();\n        self.execute(command, false);\n    };\n}\n","export default function Meta() {\n    const self = this;\n\n    /**\n     * The name of the application\n     * @type {string}\n     */\n    const appName = document.getElementById('meta-app-name').getAttribute('content');\n\n    /**\n     * The page title element\n     * @type {HTMLCollectionOf<HTMLElement>}\n     */\n    const titleElements = document.getElementsByClassName('page-title');\n\n    /**\n     * The title input field\n     * @type {HTMLInputElement}\n     */\n    const titleField = document.getElementById('puzzle-title');\n\n    /**\n     * The description input field\n     * @type {HTMLTextAreaElement}\n     */\n    const descriptionField = document.getElementById('puzzle-description');\n\n    /**\n     * An optional title for the sudoku\n     * @type {string|null}\n     */\n    let title = null;\n\n    /**\n     * An optional description for the sudoku\n     * @type {string|null}\n     */\n    let description = null;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableTextFields();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableTextFields = () => {\n        const titleCallback = () => {\n            title = titleField.value.trim();\n\n            // Update the page title\n            const pageTitle = (title !== '')\n                ? `${title} - ${appName}`\n                : appName;\n\n            for (let i = 0; i < titleElements.length; i++) {\n                titleElements[i].innerText = pageTitle;\n            }\n        };\n\n        titleField.addEventListener('change', titleCallback);\n        titleField.addEventListener('keyup', titleCallback);\n        titleField.addEventListener('paste', titleCallback);\n\n        const descriptionCallback = () => description = descriptionField.value;\n\n        descriptionField.addEventListener('change', descriptionCallback);\n        descriptionField.addEventListener('keyup', descriptionCallback);\n        descriptionField.addEventListener('paste', descriptionCallback);\n    };\n}\n","import Visitor from './Utilities/Visitor';\n\nexport default function Controls() {\n    const self = this;\n\n    /**\n     * Indicates whether a mouse button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _mousePressed = false;\n\n    /**\n     * Indicates whether a ctrl button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _ctrlKeyPressed = false;\n\n    /**\n     * Indicates whether a shift button is currently pressed\n     * @type {boolean}\n     * @private\n     */\n    let _shiftKeyPressed = false;\n\n    /**\n     * Arrow key codes\n     * @type {object}\n     * @private\n     */\n    const _arrowKeys = {\n        up: ['ArrowUp', 'KeyW'],\n        down: ['ArrowDown', 'KeyS'],\n        left: ['ArrowLeft', 'KeyA'],\n        right: ['ArrowRight', 'KeyD'],\n    };\n\n    /**\n     * Arrow key codes, as 1 array\n     * @type {string[]}\n     * @private\n     */\n    const _arrowKeysConcatenated = _arrowKeys.up\n        .concat(_arrowKeys.down)\n        .concat(_arrowKeys.left)\n        .concat(_arrowKeys.right);\n\n    /**\n     * Delete key codes\n     * @type {string[]}\n     * @private\n     */\n    const _deleteKeys = ['Delete', 'Backspace'];\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        document.addEventListener('mousedown', () => _mousePressed = true);\n        document.addEventListener('mouseup', () => _mousePressed = false);\n        document.addEventListener('keyup', _keyUpDownCallback);\n        document.addEventListener('keydown', _keyUpDownCallback);\n        document.addEventListener('keydown', _keyDownCallback);\n        _registerClickDisabling();\n    };\n\n    /**\n     * Disable click events for certain elements\n     * @return {void}\n     * @private\n     */\n    const _registerClickDisabling = () => {\n        document.addEventListener('click', event => {\n            if (event.target.closest('.click-prevent') !== null) {\n                event.preventDefault();\n            }\n        });\n    };\n\n    /**\n     * Decide whether to cancel a keyboard listener\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.cancelKeyboardEvent = event => {\n        const nodeName = event.target.nodeName.toLowerCase();\n\n        // Don't use custom listener on input elements\n        return (['input', 'textarea'].indexOf(nodeName) > -1);\n    };\n\n    /**\n     * Callback for keydown and keyup\n     * @param {Event} event\n     * @return {void}\n     * @private\n     */\n    const _keyUpDownCallback = event => {\n        _ctrlKeyPressed = Visitor.usesMacOs ? event.metaKey : event.ctrlKey;\n        _shiftKeyPressed = event.shiftKey;\n    };\n\n    /**\n     * @param {Event} event\n     * @return {void}\n     * @private\n     */\n    const _keyDownCallback = event => {\n        // Prevent browser keyboard actions\n        if (! self.cancelKeyboardEvent(event)) {\n            if ([\n                'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown',\n                'Space'\n            ].indexOf(event.code) > -1) {\n                event.preventDefault();\n            }\n\n            if (_ctrlKeyPressed) {\n                if (event.code === 'KeyY') {\n                    event.preventDefault();\n                }\n            }\n        }\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.mouseIsPressed = () => _mousePressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.ctrlKeyIsPressed = () => _ctrlKeyPressed;\n\n    /**\n     * @return {boolean}\n     */\n    self.shiftKeyIsPressed = () => _shiftKeyPressed;\n\n    /**\n     * Checks whether an event is a number key\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.isNumberKey = event => (! isNaN(parseInt(event.key, 10)));\n\n    /**\n     * Checks whether an event is a delete key\n     * @param {Event} event\n     * @return {boolean}\n     */\n    self.isDeleteKey = event => (_deleteKeys.indexOf(event.code) > -1);\n\n    /**\n     * Checks whether an event is an arrow key\n     * @param {Event} event\n     * @param {string} direction (any or up/down/left/right)\n     * @return {boolean}\n     */\n    self.isArrowKey = (event, direction = 'any') => {\n        // Check for any arrow key\n        if (direction === 'any') {\n            return (_arrowKeysConcatenated.indexOf(event.code) > -1);\n        }\n\n        // Check for a specific arrow key\n        return (\n            _arrowKeys[direction]\n            && _arrowKeys[direction].indexOf(event.code) > -1\n        );\n    };\n}\n","import GridCell from './GridCell';\n\nexport default function GridCellHighlighter() {\n    const self = this;\n\n    /**\n     * A list of currently highlighted cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _highlightedCells = [];\n\n    /**\n     * Add a cell to the list of highlighted cells\n     * @param {GridCell} cell\n     * @return {number}\n     */\n    self.addHighlightedCell = cell => _highlightedCells.push(cell);\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getHighlightedCells = () => _highlightedCells;\n\n    /**\n     * Highlight all cells that are related to selected cell(s)\n     * @return {void}\n     */\n    self.highlightRelatedCells = () => {\n        self.dehighlightAllCells();\n\n        let cellNumbers = [];\n\n        // Add the cell numbers of the row, column and box that the cell is in\n        Sudoku.grid.getSelectedCells().forEach(cell => {\n            if (Sudoku.settings.highlightRowState()) {\n                cellNumbers = cellNumbers.concat(cell.getRow().getCellNumbers());\n            }\n\n            if (Sudoku.settings.highlightColumnState()) {\n                cellNumbers = cellNumbers.concat(cell.getColumn().getCellNumbers());\n            }\n\n            if (Sudoku.settings.highlightBoxState()) {\n                cellNumbers = cellNumbers.concat(cell.getBox().getCellNumbers());\n            }\n\n            // See if value highlighting is needed or possible\n            const cellValue = cell.getValue();\n            if (cellValue === null\n                || (! Sudoku.settings.highlightValueState()\n                    && ! Sudoku.settings.highlightPencilMarksState())\n            ) {\n                return;\n            }\n\n            // Add the cell numbers of cells that contain the same digit\n            const sameDigitCellNumbers = Sudoku.grid.getCells()\n                .filter(cell => {\n                    // Filter by cell value\n                    if (Sudoku.settings.highlightValueState() && cell.hasValue(cellValue)) {\n                        return true;\n                    }\n\n                    // Filter by pencil marks\n                    else if (Sudoku.settings.highlightPencilMarksState()\n                        // Skip filled in cells, because then pencil marks are invisible\n                        && ! cell.hasValue()\n                        && (cell.getCornerMarks().has(cellValue)\n                            || cell.getCenterMarks().has(cellValue))\n                    ) {\n                        return true;\n                    }\n\n                    return false;\n                })\n                .map(cell => cell.getCellNumber());\n\n            cellNumbers = cellNumbers.concat(sameDigitCellNumbers);\n        });\n\n        cellNumbers\n            // Remove duplicates\n            .filter((value, index, numbers) => {\n                return numbers.indexOf(value) === index;\n            })\n            // Highlight the cells\n            .forEach(cellNumber => {\n                Sudoku.grid.getCell(cellNumber).setHighlightedState(true);\n            });\n    };\n\n    /**\n     * De-highlight all the highlighted cells\n     * @return {void}\n     */\n    self.dehighlightAllCells = () => {\n        self.getHighlightedCells()\n            .forEach(cell => cell.setHighlightedState(false));\n\n        _highlightedCells = [];\n    };\n}\n","import {trait} from '../functions';\nimport GridCell from './GridCell';\nimport GridRow from './GridRow';\nimport GridColumn from './GridColumn';\nimport GridBox from './GridBox';\nimport HasGridCells from '../Traits/HasGridCells';\n\nexport default function Grid() {\n    const self = this;\n    trait(self, HasGridCells);\n\n    /**\n     * All the rows in the grid\n     * @type {GridRow[]}\n     * @private\n     */\n    const _gridRows = [];\n\n    /**\n     * All the columns in the grid\n     * @type {GridColumn[]}\n     * @private\n     */\n    const _gridColumns = [];\n\n    /**\n     * All the 3x3 boxes in the grid\n     * @type {GridBox[]}\n     * @private\n     */\n    const _gridBoxes = [];\n\n    /**\n     * A list of currently selected cells\n     * @type {GridCell[]}\n     * @private\n     */\n    let _selectedCells = [];\n\n    /**\n     * The cell that is last navigated to\n     * @type {GridCell|null}\n     * @private\n     */\n    let _lastNavigatedCell = null;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        _collectCells();\n    };\n\n    /**\n     * Collect all the cell elements\n     * @return {void}\n     * @private\n     */\n    const _collectCells = () => {\n        // Create 9 rows, columns and 3x3 boxes\n        for (let i = 1; i < 10; i++) {\n            _gridRows.push(new GridRow(i));\n            _gridColumns.push(new GridColumn(i));\n            _gridBoxes.push(new GridBox(i));\n        }\n\n        // Add all 81 cells\n        let gridCell;\n        for (let i = 1; i < 82; i++) {\n            gridCell = new GridCell(i);\n            gridCell.init();\n            self.addCell(gridCell);\n\n            // Add the cell to the applicable row/column/box\n            // And vice versa\n            for (let j = 0; j < 9; j++) {\n                if (_gridRows[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridRows[j].addCell(gridCell);\n                    gridCell.setRow(_gridRows[j]);\n                }\n\n                if (_gridColumns[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridColumns[j].addCell(gridCell);\n                    gridCell.setColumn(_gridColumns[j]);\n                }\n\n                if (_gridBoxes[j].getCellNumbers().indexOf(i) !== -1) {\n                    _gridBoxes[j].addCell(gridCell);\n                    gridCell.setBox(_gridBoxes[j]);\n                }\n            }\n        }\n\n        self.setLastNavigatedCell(null);\n    };\n\n    /**\n     * @return {GridCell[]}\n     */\n    self.getSelectedCells = () => _selectedCells;\n\n    /**\n     * Add a cell to the list of selected cells\n     * @param {GridCell} cell\n     * @return {void}\n     */\n    self.addSelectedCell = cell => {\n        _selectedCells.push(cell);\n\n        // Highlight related cells after selecting\n        Sudoku.gridCellHighlighter.highlightRelatedCells();\n    };\n\n    /**\n     * Deselect all the selected cells\n     * @return {void}\n     */\n    self.deselectAllCells = () => {\n        self.getSelectedCells().forEach(cell => cell.setSelectedState(false));\n        _selectedCells = [];\n    };\n\n    /**\n     * @return {GridCell|null}\n     */\n    self.getLastNavigatedCell = () => _lastNavigatedCell;\n\n    /**\n     * @param {GridCell|null} cell\n     * @return {null}\n     */\n    self.setLastNavigatedCell = cell => {\n        // The default last navigated cell is the center one\n        if (cell === null) {\n            _lastNavigatedCell = self.getCell(41);\n        } else {\n            _lastNavigatedCell = cell;\n        }\n    };\n\n    /**\n     * Check for errors in the grid\n     * @return {void}\n     */\n    self.checkForErrors = () => {\n        self.removeAllErrors();\n\n        _gridRows.forEach(row => row.checkDuplicateCellValues());\n        _gridColumns.forEach(column => column.checkDuplicateCellValues());\n        _gridBoxes.forEach(box => box.checkDuplicateCellValues());\n    };\n\n    /**\n     * Remove the error status of all cells\n     * @return {void}\n     */\n    self.removeAllErrors = () => {\n        self.getCells().forEach(cell => cell.setErrorState(false));\n    };\n\n    /**\n     * Show all possible candidates\n     * @return {void}\n     */\n    self.determineCandidates = () => {\n        self.getCells()\n            // Only cells that don't have a value\n            .filter(cell => cell.getValue() === null)\n            .forEach(cell => {\n                // Get pencil marks to show\n                const centerMarks = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n                    .filter(number => {\n                        // If the value exists, filter out the number\n                        if (cell.getRow().containsValue(number)) {\n                            return false;\n                        } else if (cell.getColumn().containsValue(number)) {\n                            return false;\n                        } else if (cell.getBox().containsValue(number)) {\n                            return false;\n                        }\n\n                        return true;\n                    });\n\n                // Apply the pencil marks\n                cell.getCenterMarks().setDigits(centerMarks, true);\n            });\n    };\n\n    /**\n     * Remove all automatically shown candidates\n     * @return {void}\n     */\n    self.removeCandidates = () => {\n        self.getCells().forEach(cell => {\n            // Remove the auto-candidates\n            cell.getCenterMarks().setDigits([], true);\n\n            // Show the user-filled center marks\n            cell.getCenterMarks().show();\n        });\n    };\n\n    /**\n     * Get the state of the entire grid\n     * @return {string}\n     */\n    self.getState = () =>\n        // Application version\n        'a1'\n        // Elapsed milliseconds\n        + 't' + Sudoku.clock.getTotalElapsedMs()\n        // Cells state\n        + self.getCells().map(cell => cell.getState()).join('');\n}\n","export default function Clock() {\n    const self = this;\n\n    /**\n     * The initial amount of elapsed milliseconds\n     * Useful to keep track of previously elapsed time, when unpausing\n     * @type {number}\n     * @private\n     */\n    let _initialMs = 0;\n\n    /**\n     * The start moment of the timer\n     * @type {Date|null}\n     * @private\n     */\n    let _startMoment = null;\n\n    /**\n     * The element that shows the elapsed time\n     * @type {HTMLSpanElement}\n     * @private\n     */\n    const _timeElement = document.getElementById('elapsed-time');\n\n    /**\n     * The interval for showing the time on screen\n     * @type {number|null}\n     * @private\n     */\n    let _timeInterval = null;\n\n    /**\n     * Indicates whether the clock is paused\n     * @type {boolean}\n     * @private\n     */\n    let _paused = false;\n\n    /**\n     * Initialize the object\n     * @return {void}\n     */\n    self.init = () => {\n        self.start();\n    };\n\n    /**\n     * Set the start/unpause moment for calculating elapsed time\n     * @return {void}\n     */\n    self.start = self.unpause = () => {\n        _startMoment = new Date();\n        _paused = false;\n        self.enableTimeInterval();\n    };\n\n    /**\n     * Pause the timer\n     * @return {void}\n     */\n    self.pause = () => {\n        // Keep the elapsed milliseconds, for use with unpausing\n        _initialMs += self.getElapsedMsSinceStart();\n        _startMoment = null;\n        _paused = true;\n        self.enableTimeInterval(false);\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.isPaused = () => _paused;\n\n    /**\n     * Get the elapsed milliseconds, since the start moment\n     * @return {number}\n     */\n    self.getElapsedMsSinceStart = () => {\n        return (_startMoment !== null)\n            ? (new Date()).getTime() - _startMoment.getTime()\n            : 0;\n    };\n\n    /**\n     * Get the amount of elapsed milliseconds, since the timer started\n     * @return {number}\n     */\n    self.getTotalElapsedMs = () => _initialMs + self.getElapsedMsSinceStart();\n\n    /**\n     * Get a string representation ('0:00') of elapsed time\n     * Uses '0:00:00' format if there is at least 1 hour\n     * @return {string}\n     */\n    self.getElapsedTimeString = () => {\n        const totalSeconds = Math.floor(self.getTotalElapsedMs() / 1000);\n\n        // Calculate hours, minutes and seconds\n        const hours = Math.floor(totalSeconds / 3600);\n        let minutes = Math.floor((totalSeconds % 3600) / 60);\n        // Seconds need a leading zero\n        const seconds = (totalSeconds % 60).toString(10).padStart(2, '0');\n\n        // Minutes only need a leading zero if there is at least 1 hour\n        if (hours > 0) {\n            minutes = minutes.toString().padStart(2, '0');\n            return `${hours}:${minutes}:${seconds}`;\n        }\n\n        return `${minutes}:${seconds}`;\n    };\n\n    /**\n     * Decide whether to start/stop the timer interval\n     * @param {boolean} enable\n     * @return {void}\n     */\n    self.enableTimeInterval = (enable = true) => {\n        if (enable) {\n            _timeInterval = setInterval(() => {\n                _timeElement.innerText = self.getElapsedTimeString();\n            }, 1000);\n        } else {\n            clearInterval(_timeInterval);\n        }\n    };\n}\n","import CloseAllModalsCommand from './Commands/Modal/CloseAllModalsCommand';\nimport OpenModalCommand from './Commands/Modal/OpenModalCommand';\n\nexport default function Modal() {\n    const self = this;\n\n    /**\n     * The modal dialog backdrop\n     * @type {HTMLElement}\n     * @private\n     */\n    const _backdropElement = document.getElementById('modal-backdrop');\n\n    /**\n     * Indicates whether a modal is currently open\n     * @type {boolean}\n     * @private\n     */\n    let _openState = false;\n\n    /**\n     * The ID of the currently opened modal\n     * @type {string|null}\n     * @private\n     */\n    let _currentModalId = null;\n\n    /**\n     * Reusable close command, for all modals\n     * @type {CloseAllModalsCommand}\n     * @private\n     */\n    const _closeCommand = new CloseAllModalsCommand();\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableOpening();\n        _enableClosing();\n    };\n\n    /**\n     * @return {boolean}\n     */\n    self.openState = () => _openState;\n\n    /**\n     * @param {string|null} modalId\n     * @return {void}\n     */\n    self.setCurrentModalId = modalId => {\n        _currentModalId = modalId;\n\n        // Set the open state, based on if there is an ID\n        _openState = (modalId !== null);\n\n        // Toggle the backdrop, based on if there is an ID\n        const toggleMethod = (modalId !== null) ? 'add' : 'remove';\n        _backdropElement.classList[toggleMethod]('show');\n    };\n\n    /**\n     * @return {string|null}\n     */\n    self.getCurrentModalId = () => _currentModalId;\n\n    /**\n     * Close an open modal dialog, if there is any\n     * @return {void}\n     */\n    self.close = () => _closeCommand.execute();\n\n    /**\n     * Enable opening of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableOpening = () => {\n        const openButtons = document.getElementsByClassName('open-modal');\n\n        for (let i = 0; i < openButtons.length; i++) {\n            openButtons[i].addEventListener('click', event => {\n                // Open the modal dialog\n                const modalId = event.target.dataset.modalId;\n                const command = new OpenModalCommand(modalId);\n                command.execute();\n            });\n        }\n    };\n\n    /**\n     * Enable closing of modal dialogs\n     * @return {void}\n     * @private\n     */\n    const _enableClosing = () => {\n        // Enable close buttons of the modal dialogs\n        const closeButtons = document.getElementsByClassName('close-modal');\n        for (let i = 0; i < closeButtons.length; i++) {\n            closeButtons[i].addEventListener('click', self.close);\n        }\n\n        // Clicking the backdrop also closes modal dialogs\n        _backdropElement.addEventListener('click', self.close);\n    };\n}\n","import ChangeDigitCommand from '../Commands/Grid/ChangeDigitCommand';\nimport PauseGameCommand from '../Commands/PauseGameCommand';\n\nexport default function DocumentEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _registerKeyboardEvents();\n        _registerMouseEvents();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerKeyboardEvents = () => {\n        const pauseGameCommand = new PauseGameCommand();\n\n        document.addEventListener('keydown', event => {\n            if (Sudoku.controls.cancelKeyboardEvent(event)) {\n                return;\n            }\n\n            if (Sudoku.controls.isArrowKey(event)) {\n                // Deselect all cells, if the ctrl key is not pressed\n                if (! Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.grid.deselectAllCells();\n                }\n\n                let newCellIndex = Sudoku.grid.getLastNavigatedCell().getCellNumber() - 1;\n                let newCell = null;\n\n                // Then navigate to the intended cell\n                // Wrap around if needed\n                if (Sudoku.controls.isArrowKey(event, 'up')) {\n                    if ((newCellIndex -= 9) < 0) {\n                        newCellIndex = 81 + newCellIndex;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event, 'down')) {\n                    if ((newCellIndex += 9) > 80) {\n                        newCellIndex = newCellIndex - 81;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event, 'left')) {\n                    if ((--newCellIndex + 1) % 9 === 0) {\n                        newCellIndex += 9;\n                    }\n                } else if (Sudoku.controls.isArrowKey(event, 'right')) {\n                    if (++newCellIndex % 9 === 0) {\n                        newCellIndex -= 9;\n                    }\n                }\n\n                // Make the new cell the active one\n                newCell = Sudoku.grid.getCell(newCellIndex + 1);\n                newCell.setSelectedState(true);\n                Sudoku.grid.setLastNavigatedCell(newCell);\n            }\n\n            if (Sudoku.controls.isNumberKey(event)) {\n                // Set a number value\n                const digit = parseInt(event.key, 10);\n                Sudoku.history.execute(new ChangeDigitCommand(digit));\n            } else if (Sudoku.controls.isDeleteKey(event)) {\n                // Remove a value\n                Sudoku.history.execute(new ChangeDigitCommand(null));\n            } else if (event.code === 'KeyZ') {\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    // Redo or undo an action\n                    if (Sudoku.controls.shiftKeyIsPressed()) {\n                        Sudoku.history.redo();\n                    } else {\n                        Sudoku.history.undo();\n                    }\n                }\n            } else if (event.code === 'KeyY') {\n                // Redo an action\n                if (Sudoku.controls.ctrlKeyIsPressed()) {\n                    Sudoku.history.redo();\n                }\n            } else if (event.code === 'Escape') {\n                (Sudoku.modal.openState() === true)\n                    // Close a modal dialog\n                    ? Sudoku.modal.close()\n                    // Pause / unpause the game\n                    : pauseGameCommand.toggle();\n            }\n        });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _registerMouseEvents = () => {\n        document.addEventListener('mousedown', event => {\n            // Deselect all cells, when clicking outside the grid\n            if (event.target.closest('.grid-cell') === null) {\n                Sudoku.grid.deselectAllCells();\n                Sudoku.gridCellHighlighter.dehighlightAllCells();\n            }\n        });\n    };\n}\n","import ShowClockCommand from '../Commands/Settings/ShowClockCommand';\nimport AutoErrorCheckingCommand from '../Commands/Settings/AutoErrorCheckingCommand';\nimport AutoRemovePencilMarksCommand from '../Commands/Settings/AutoRemovePencilMarksCommand';\nimport HighlightRowCommand from '../Commands/Settings/HighlightRowCommand';\nimport HighlightColumnCommand from '../Commands/Settings/HighlightColumnCommand';\nimport HighlightBoxCommand from '../Commands/Settings/HighlightBoxCommand';\nimport HighlightValueCommand from '../Commands/Settings/HighlightValueCommand';\nimport HighlightPencilMarksCommand from '../Commands/Settings/HighlightPencilMarksCommand';\n\nexport default function SettingsEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _enableClockToggling();\n        _enableAutoErrorCheckingToggling();\n        _enableAutoRemovePencilMarksToggling();\n        _enableHighlightingToggling();\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableClockToggling = () => {\n        document.getElementById('setting-show-clock')\n            .addEventListener('change', event => {\n                (new ShowClockCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableAutoErrorCheckingToggling = () => {\n        document.getElementById('setting-auto-error-checking')\n            .addEventListener('change', event => {\n                (new AutoErrorCheckingCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableAutoRemovePencilMarksToggling = () => {\n        document.getElementById('setting-auto-remove-pencil-marks')\n            .addEventListener('change', event => {\n                (new AutoRemovePencilMarksCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @return {void}\n     * @private\n     */\n    const _enableHighlightingToggling = () => {\n        // Row highlighting\n        document.getElementById('setting-highlight-row')\n            .addEventListener('change', event => {\n                (new HighlightRowCommand()).execute(event.target.checked);\n            });\n\n        // Column highlighting\n        document.getElementById('setting-highlight-column')\n            .addEventListener('change', event => {\n                (new HighlightColumnCommand()).execute(event.target.checked);\n            });\n\n        // 3x3 box highlighting\n        document.getElementById('setting-highlight-box')\n            .addEventListener('change', event => {\n                (new HighlightBoxCommand()).execute(event.target.checked);\n            });\n\n        // Same value highlighting\n        document.getElementById('setting-highlight-value')\n            .addEventListener('change', event => {\n                (new HighlightValueCommand()).execute(event.target.checked);\n            });\n\n        // Same value highlighting\n        document.getElementById('setting-highlight-pencil-marks')\n            .addEventListener('change', event => {\n                (new HighlightPencilMarksCommand()).execute(event.target.checked);\n            });\n    };\n}\n","import AutoCandidateModeCommand from '../Commands/AutoCandidateModeCommand';\nimport PauseGameCommand from '../Commands/PauseGameCommand';\nimport DesignModeCommand from '../Commands/DesignModeCommand';\n\nexport default function ActionsEventHandler() {\n    const self = this;\n\n    /**\n     * Initialize the object\n     */\n    self.init = () => {\n        _registerPauseResumeEvent();\n        _registerCheckErrorsEvent();\n        _registerAutoCandidateModeEvent();\n        _registerDesignModeEvent();\n    };\n\n    /**\n     * @private\n     */\n    const _registerPauseResumeEvent = () => {\n        document.getElementById('toggle-pause-button')\n            .addEventListener('click', () => {\n                (new PauseGameCommand()).toggle();\n            });\n\n        document.getElementById('game-resume-button')\n            .addEventListener('click', () => {\n                (new PauseGameCommand()).execute(false);\n                Sudoku.modal.close();\n            });\n    };\n\n    /**\n     * @private\n     */\n    const _registerCheckErrorsEvent = () => {\n        document.getElementById('check-errors')\n            .addEventListener('click', Sudoku.grid.checkForErrors);\n    };\n\n    /**\n     * @private\n     */\n    const _registerAutoCandidateModeEvent = () => {\n        document.getElementById('setting-auto-candidate')\n            .addEventListener('change', event => {\n                (new AutoCandidateModeCommand()).execute(event.target.checked);\n            });\n    };\n\n    /**\n     * @private\n     */\n    const _registerDesignModeEvent = () => {\n        document.getElementById('toggle-design-mode')\n            .addEventListener('change', event => {\n                (new DesignModeCommand()).execute(event.target.checked);\n            });\n    };\n}\n"],"sourceRoot":""}